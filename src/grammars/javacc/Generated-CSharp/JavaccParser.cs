//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Javacc.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class JavaccParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, LOOKAHEAD=8, IGNORE_CASE=9, 
		PARSER_BEGIN=10, PARSER_END=11, JAVACODE=12, CPPCODE=13, TOKEN=14, SPECIAL_TOKEN=15, 
		MORE_=16, SKIP_=17, TOKEN_MGR_DECLS=18, EOF_=19, DCL_PARSER_BEGIN=20, 
		DCL_PARSER_END=21, INC_PARSER_BEGIN=22, INC_PARSER_END=23, DEF_PARSER_BEGIN=24, 
		DEF_PARSER_END=25, WS=26, COMMENT=27, LINE_COMMENT=28, ABSTRACT=29, ASSERT=30, 
		BOOLEAN=31, BREAK=32, BYTE=33, CASE=34, CATCH=35, CHAR=36, CLASS=37, CONST=38, 
		CONTINUE=39, DEFAULT=40, DO=41, DOUBLE=42, ELSE=43, ENUM=44, EXTENDS=45, 
		FALSE=46, FINAL=47, FINALLY=48, FLOAT=49, FOR=50, GOTO=51, IF=52, IMPLEMENTS=53, 
		IMPORT=54, INSTANCEOF=55, INT=56, INTERFACE=57, LONG=58, NATIVE=59, NEW=60, 
		NULL=61, PACKAGE=62, PRIVATE=63, PROTECTED=64, PUBLIC=65, RETURN=66, SHORT=67, 
		STATIC=68, STRICTFP=69, SUPER=70, SWITCH=71, SYNCHRONIZED=72, THIS=73, 
		THROW=74, THROWS=75, TRANSIENT=76, TRUE=77, TRY=78, VOID=79, VOLATILE=80, 
		WHILE=81, TEMPLATE=82, TYPENAME=83, INTEGER_LITERAL=84, DECIMAL_LITERAL=85, 
		HEX_LITERAL=86, OCTAL_LITERAL=87, BINARY_LITERAL=88, FLOATING_POINT_LITERAL=89, 
		DECIMAL_FLOATING_POINT_LITERAL=90, DECIMAL_EXPONENT=91, HEXADECIMAL_FLOATING_POINT_LITERAL=92, 
		HEXADECIMAL_EXPONENT=93, CHARACTER_LITERAL=94, STRING_LITERAL=95, LPAREN=96, 
		RPAREN=97, LBRACE=98, RBRACE=99, LBRACKET=100, RBRACKET=101, SEMICOLON=102, 
		COMMA=103, DOT=104, ASSIGN=105, LT=106, BANG=107, TILDE=108, HOOK=109, 
		COLON=110, DOUBLECOLON=111, EQ=112, LE=113, GE=114, NE=115, SC_OR=116, 
		SC_AND=117, INCR=118, DECR=119, PLUS=120, MINUS=121, STAR=122, SLASH=123, 
		BIT_AND=124, BIT_OR=125, XOR=126, REM=127, PLUSASSIGN=128, MINUSASSIGN=129, 
		STARASSIGN=130, SLASHASSIGN=131, ANDASSIGN=132, ORASSIGN=133, XORASSIGN=134, 
		REMASSIGN=135, GT=136, IDENTIFIER=137, LETTER=138, PART_LETTER=139;
	public const int
		RULE_runsignedshift = 0, RULE_rsignedshift = 1, RULE_javacc_input = 2, 
		RULE_javacc_options = 3, RULE_option_binding = 4, RULE_stringList = 5, 
		RULE_production = 6, RULE_javacode_production = 7, RULE_cppcode_production = 8, 
		RULE_bnf_production = 9, RULE_accessModifier = 10, RULE_regular_expr_production = 11, 
		RULE_token_manager_decls = 12, RULE_regexpr_kind = 13, RULE_regexpr_spec = 14, 
		RULE_expansion_choices = 15, RULE_expansion = 16, RULE_local_lookahead = 17, 
		RULE_expansion_unit = 18, RULE_regular_expression = 19, RULE_complex_regular_expression_choices = 20, 
		RULE_complex_regular_expression = 21, RULE_complex_regular_expression_unit = 22, 
		RULE_character_list = 23, RULE_character_descriptor = 24, RULE_identifier = 25, 
		RULE_node_descriptor = 26, RULE_node_descriptor_expression = 27, RULE_javaIdentifier = 28, 
		RULE_compilationUnit = 29, RULE_packageDeclaration = 30, RULE_importDeclaration = 31, 
		RULE_modifiers = 32, RULE_typeDeclaration = 33, RULE_classOrInterfaceDeclaration = 34, 
		RULE_extendsList = 35, RULE_implementsList = 36, RULE_enumDeclaration = 37, 
		RULE_enumBody = 38, RULE_enumConstant = 39, RULE_typeParameters = 40, 
		RULE_typeParameter = 41, RULE_typeBound = 42, RULE_classOrInterfaceBody = 43, 
		RULE_classOrInterfaceBodyDeclaration = 44, RULE_fieldDeclaration = 45, 
		RULE_variableDeclarator = 46, RULE_variableDeclaratorId = 47, RULE_variableInitializer = 48, 
		RULE_arrayInitializer = 49, RULE_methodDeclaration = 50, RULE_methodDeclarator = 51, 
		RULE_formalParameters = 52, RULE_formalParameter = 53, RULE_constructorDeclaration = 54, 
		RULE_explicitConstructorInvocation = 55, RULE_initializer = 56, RULE_type = 57, 
		RULE_referenceType = 58, RULE_template = 59, RULE_templateBase = 60, RULE_templatePack = 61, 
		RULE_classOrInterfaceType = 62, RULE_typeArguments = 63, RULE_typeArgument = 64, 
		RULE_wildcardBounds = 65, RULE_primitiveType = 66, RULE_resultType = 67, 
		RULE_name = 68, RULE_nameList = 69, RULE_expression = 70, RULE_assignmentOperator = 71, 
		RULE_conditionalExpression = 72, RULE_conditionalOrExpression = 73, RULE_conditionalAndExpression = 74, 
		RULE_inclusiveOrExpression = 75, RULE_exclusiveOrExpression = 76, RULE_andExpression = 77, 
		RULE_equalityExpression = 78, RULE_instanceOfExpression = 79, RULE_relationalExpression = 80, 
		RULE_shiftExpression = 81, RULE_additiveExpression = 82, RULE_multiplicativeExpression = 83, 
		RULE_unaryExpression = 84, RULE_preIncrementExpression = 85, RULE_preDecrementExpression = 86, 
		RULE_unaryExpressionNotPlusMinus = 87, RULE_castLookahead = 88, RULE_postfixExpression = 89, 
		RULE_castExpression = 90, RULE_primaryExpression = 91, RULE_memberSelector = 92, 
		RULE_primaryPrefix = 93, RULE_primarySuffix = 94, RULE_literal = 95, RULE_integerLiteral = 96, 
		RULE_booleanLiteral = 97, RULE_stringLiteral = 98, RULE_nullLiteral = 99, 
		RULE_arguments = 100, RULE_argumentList = 101, RULE_allocationExpression = 102, 
		RULE_arrayDimsAndInits = 103, RULE_statement = 104, RULE_assertStatement = 105, 
		RULE_labeledStatement = 106, RULE_block = 107, RULE_blockStatement = 108, 
		RULE_localVariableDeclaration = 109, RULE_emptyStatement = 110, RULE_statementExpression = 111, 
		RULE_switchStatement = 112, RULE_switchLabel = 113, RULE_ifStatement = 114, 
		RULE_whileStatement = 115, RULE_doStatement = 116, RULE_forStatement = 117, 
		RULE_forInit = 118, RULE_statementExpressionList = 119, RULE_forUpdate = 120, 
		RULE_breakStatement = 121, RULE_continueStatement = 122, RULE_returnStatement = 123, 
		RULE_throwStatement = 124, RULE_synchronizedStatement = 125, RULE_resourceDeclaration = 126, 
		RULE_catchParameter = 127, RULE_tryStatement = 128, RULE_annotation = 129, 
		RULE_normalAnnotation = 130, RULE_markerAnnotation = 131, RULE_singleMemberAnnotation = 132, 
		RULE_memberValuePairs = 133, RULE_memberValuePair = 134, RULE_memberValue = 135, 
		RULE_memberValueArrayInitializer = 136, RULE_annotationTypeDeclaration = 137, 
		RULE_annotationTypeBody = 138, RULE_annotationTypeMemberDeclaration = 139, 
		RULE_defaultValue = 140;
	public static readonly string[] ruleNames = {
		"runsignedshift", "rsignedshift", "javacc_input", "javacc_options", "option_binding", 
		"stringList", "production", "javacode_production", "cppcode_production", 
		"bnf_production", "accessModifier", "regular_expr_production", "token_manager_decls", 
		"regexpr_kind", "regexpr_spec", "expansion_choices", "expansion", "local_lookahead", 
		"expansion_unit", "regular_expression", "complex_regular_expression_choices", 
		"complex_regular_expression", "complex_regular_expression_unit", "character_list", 
		"character_descriptor", "identifier", "node_descriptor", "node_descriptor_expression", 
		"javaIdentifier", "compilationUnit", "packageDeclaration", "importDeclaration", 
		"modifiers", "typeDeclaration", "classOrInterfaceDeclaration", "extendsList", 
		"implementsList", "enumDeclaration", "enumBody", "enumConstant", "typeParameters", 
		"typeParameter", "typeBound", "classOrInterfaceBody", "classOrInterfaceBodyDeclaration", 
		"fieldDeclaration", "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
		"arrayInitializer", "methodDeclaration", "methodDeclarator", "formalParameters", 
		"formalParameter", "constructorDeclaration", "explicitConstructorInvocation", 
		"initializer", "type", "referenceType", "template", "templateBase", "templatePack", 
		"classOrInterfaceType", "typeArguments", "typeArgument", "wildcardBounds", 
		"primitiveType", "resultType", "name", "nameList", "expression", "assignmentOperator", 
		"conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
		"inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
		"instanceOfExpression", "relationalExpression", "shiftExpression", "additiveExpression", 
		"multiplicativeExpression", "unaryExpression", "preIncrementExpression", 
		"preDecrementExpression", "unaryExpressionNotPlusMinus", "castLookahead", 
		"postfixExpression", "castExpression", "primaryExpression", "memberSelector", 
		"primaryPrefix", "primarySuffix", "literal", "integerLiteral", "booleanLiteral", 
		"stringLiteral", "nullLiteral", "arguments", "argumentList", "allocationExpression", 
		"arrayDimsAndInits", "statement", "assertStatement", "labeledStatement", 
		"block", "blockStatement", "localVariableDeclaration", "emptyStatement", 
		"statementExpression", "switchStatement", "switchLabel", "ifStatement", 
		"whileStatement", "doStatement", "forStatement", "forInit", "statementExpressionList", 
		"forUpdate", "breakStatement", "continueStatement", "returnStatement", 
		"throwStatement", "synchronizedStatement", "resourceDeclaration", "catchParameter", 
		"tryStatement", "annotation", "normalAnnotation", "markerAnnotation", 
		"singleMemberAnnotation", "memberValuePairs", "memberValuePair", "memberValue", 
		"memberValueArrayInitializer", "annotationTypeDeclaration", "annotationTypeBody", 
		"annotationTypeMemberDeclaration", "defaultValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'...'", "'<<='", "'>>='", "'>>>='", "'<<'", "'@'", "'LOOKAHEAD'", 
		"'IGNORE_CASE'", "'PARSER_BEGIN'", "'PARSER_END'", "'JAVACODE'", "'CPPCODE'", 
		"'TOKEN'", "'SPECIAL_TOKEN'", "'MORE'", "'SKIP'", "'TOKEN_MGR_DECLS'", 
		"'EOF'", "'DCL_PARSER_BEGIN'", "'DCL_PARSER_END'", "'INC_PARSER_BEGIN'", 
		"'INC_PARSER_END'", "'DEF_PARSER_BEGIN'", "'DEF_PARSER_END'", null, null, 
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'false'", "'final'", 
		"'finally'", "'float'", "'for'", "'goto'", "'if'", "'implements'", "'import'", 
		"'instanceof'", "'int'", "'interface'", "'long'", "'native'", "'new'", 
		"'null'", "'package'", "'private'", "'protected'", "'public'", "'return'", 
		"'short'", "'static'", "'strictfp'", "'super'", "'switch'", "'synchronized'", 
		"'this'", "'throw'", "'throws'", "'transient'", "'true'", "'try'", "'void'", 
		"'volatile'", "'while'", "'template'", "'typename'", null, null, null, 
		null, null, null, null, null, null, null, null, null, "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'<'", "'!'", "'~'", 
		"'?'", "':'", "'::'", "'=='", "'<='", "'>='", "'!='", "'||'", "'&&'", 
		"'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
		"'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "LOOKAHEAD", "IGNORE_CASE", 
		"PARSER_BEGIN", "PARSER_END", "JAVACODE", "CPPCODE", "TOKEN", "SPECIAL_TOKEN", 
		"MORE_", "SKIP_", "TOKEN_MGR_DECLS", "EOF_", "DCL_PARSER_BEGIN", "DCL_PARSER_END", 
		"INC_PARSER_BEGIN", "INC_PARSER_END", "DEF_PARSER_BEGIN", "DEF_PARSER_END", 
		"WS", "COMMENT", "LINE_COMMENT", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
		"BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", 
		"DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FALSE", "FINAL", "FINALLY", 
		"FLOAT", "FOR", "GOTO", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
		"INTERFACE", "LONG", "NATIVE", "NEW", "NULL", "PACKAGE", "PRIVATE", "PROTECTED", 
		"PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", 
		"SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", 
		"VOID", "VOLATILE", "WHILE", "TEMPLATE", "TYPENAME", "INTEGER_LITERAL", 
		"DECIMAL_LITERAL", "HEX_LITERAL", "OCTAL_LITERAL", "BINARY_LITERAL", "FLOATING_POINT_LITERAL", 
		"DECIMAL_FLOATING_POINT_LITERAL", "DECIMAL_EXPONENT", "HEXADECIMAL_FLOATING_POINT_LITERAL", 
		"HEXADECIMAL_EXPONENT", "CHARACTER_LITERAL", "STRING_LITERAL", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMICOLON", "COMMA", 
		"DOT", "ASSIGN", "LT", "BANG", "TILDE", "HOOK", "COLON", "DOUBLECOLON", 
		"EQ", "LE", "GE", "NE", "SC_OR", "SC_AND", "INCR", "DECR", "PLUS", "MINUS", 
		"STAR", "SLASH", "BIT_AND", "BIT_OR", "XOR", "REM", "PLUSASSIGN", "MINUSASSIGN", 
		"STARASSIGN", "SLASHASSIGN", "ANDASSIGN", "ORASSIGN", "XORASSIGN", "REMASSIGN", 
		"GT", "IDENTIFIER", "LETTER", "PART_LETTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Javacc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JavaccParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaccParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaccParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RunsignedshiftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(JavaccParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(JavaccParser.GT, i);
		}
		public RunsignedshiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runsignedshift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterRunsignedshift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitRunsignedshift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRunsignedshift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RunsignedshiftContext runsignedshift() {
		RunsignedshiftContext _localctx = new RunsignedshiftContext(Context, State);
		EnterRule(_localctx, 0, RULE_runsignedshift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(GT);
			State = 283;
			Match(GT);
			State = 284;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsignedshiftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(JavaccParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(JavaccParser.GT, i);
		}
		public RsignedshiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsignedshift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterRsignedshift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitRsignedshift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsignedshift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsignedshiftContext rsignedshift() {
		RsignedshiftContext _localctx = new RsignedshiftContext(Context, State);
		EnterRule(_localctx, 2, RULE_rsignedshift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(GT);
			State = 287;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javacc_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Javacc_optionsContext javacc_options() {
			return GetRuleContext<Javacc_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_BEGIN() { return GetToken(JavaccParser.PARSER_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(JavaccParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(JavaccParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(JavaccParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(JavaccParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompilationUnitContext compilationUnit() {
			return GetRuleContext<CompilationUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_END() { return GetToken(JavaccParser.PARSER_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaccParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProductionContext[] production() {
			return GetRuleContexts<ProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProductionContext production(int i) {
			return GetRuleContext<ProductionContext>(i);
		}
		public Javacc_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javacc_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterJavacc_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitJavacc_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJavacc_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Javacc_inputContext javacc_input() {
		Javacc_inputContext _localctx = new Javacc_inputContext(Context, State);
		EnterRule(_localctx, 4, RULE_javacc_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			javacc_options();
			State = 290;
			Match(PARSER_BEGIN);
			State = 291;
			Match(LPAREN);
			State = 292;
			identifier();
			State = 293;
			Match(RPAREN);
			State = 294;
			compilationUnit();
			State = 295;
			Match(PARSER_END);
			State = 296;
			Match(LPAREN);
			State = 297;
			identifier();
			State = 298;
			Match(RPAREN);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 299;
				production();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & 36116896548388991L) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 288230380580896777L) != 0) );
			State = 304;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javacc_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaccParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_bindingContext[] option_binding() {
			return GetRuleContexts<Option_bindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_bindingContext option_binding(int i) {
			return GetRuleContext<Option_bindingContext>(i);
		}
		public Javacc_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javacc_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterJavacc_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitJavacc_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJavacc_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Javacc_optionsContext javacc_options() {
		Javacc_optionsContext _localctx = new Javacc_optionsContext(Context, State);
		EnterRule(_localctx, 6, RULE_javacc_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 306;
				Match(IDENTIFIER);
				State = 307;
				Match(LBRACE);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & 1152921504606846983L) != 0) || _la==IDENTIFIER) {
					{
					{
					State = 308;
					option_binding();
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 314;
				Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_bindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaccParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaccParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOKAHEAD() { return GetToken(JavaccParser.LOOKAHEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_CASE() { return GetToken(JavaccParser.IGNORE_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaccParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_BEGIN() { return GetToken(JavaccParser.PARSER_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringListContext stringList() {
			return GetRuleContext<StringListContext>(0);
		}
		public Option_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterOption_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitOption_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_bindingContext option_binding() {
		Option_bindingContext _localctx = new Option_bindingContext(Context, State);
		EnterRule(_localctx, 8, RULE_option_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & 1152921504606846983L) != 0) || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 318;
			Match(ASSIGN);
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				{
				State = 319;
				integerLiteral();
				}
				break;
			case FALSE:
			case TRUE:
				{
				State = 320;
				booleanLiteral();
				}
				break;
			case STRING_LITERAL:
				{
				State = 321;
				stringLiteral();
				}
				break;
			case LPAREN:
				{
				State = 322;
				stringList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 325;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringListContext stringList() {
		StringListContext _localctx = new StringListContext(Context, State);
		EnterRule(_localctx, 10, RULE_stringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(LPAREN);
			State = 328;
			stringLiteral();
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 329;
				Match(COMMA);
				State = 330;
				stringLiteral();
				}
				}
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 336;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Javacode_productionContext javacode_production() {
			return GetRuleContext<Javacode_productionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cppcode_productionContext cppcode_production() {
			return GetRuleContext<Cppcode_productionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Regular_expr_productionContext regular_expr_production() {
			return GetRuleContext<Regular_expr_productionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_manager_declsContext token_manager_decls() {
			return GetRuleContext<Token_manager_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bnf_productionContext bnf_production() {
			return GetRuleContext<Bnf_productionContext>(0);
		}
		public ProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_production; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProductionContext production() {
		ProductionContext _localctx = new ProductionContext(Context, State);
		EnterRule(_localctx, 12, RULE_production);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JAVACODE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				javacode_production();
				}
				break;
			case CPPCODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				cppcode_production();
				}
				break;
			case TOKEN:
			case SPECIAL_TOKEN:
			case MORE_:
			case SKIP_:
			case LT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 340;
				regular_expr_production();
				}
				break;
			case TOKEN_MGR_DECLS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 341;
				token_manager_decls();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CONST:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
			case TEMPLATE:
			case DOUBLECOLON:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 342;
				bnf_production();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Javacode_productionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JAVACODE() { return GetToken(JavaccParser.JAVACODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResultTypeContext resultType() {
			return GetRuleContext<ResultTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaccParser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_descriptorContext node_descriptor() {
			return GetRuleContext<Node_descriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public Javacode_productionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javacode_production; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterJavacode_production(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitJavacode_production(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJavacode_production(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Javacode_productionContext javacode_production() {
		Javacode_productionContext _localctx = new Javacode_productionContext(Context, State);
		EnterRule(_localctx, 14, RULE_javacode_production);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(JAVACODE);
			State = 346;
			resultType();
			State = 347;
			identifier();
			State = 348;
			formalParameters();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 349;
				Match(THROWS);
				State = 350;
				name();
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 351;
					Match(COMMA);
					State = 352;
					name();
					}
					}
					State = 357;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 360;
				node_descriptor();
				}
			}

			State = 363;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cppcode_productionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPPCODE() { return GetToken(JavaccParser.CPPCODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResultTypeContext resultType() {
			return GetRuleContext<ResultTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaccParser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public Cppcode_productionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cppcode_production; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterCppcode_production(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitCppcode_production(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCppcode_production(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cppcode_productionContext cppcode_production() {
		Cppcode_productionContext _localctx = new Cppcode_productionContext(Context, State);
		EnterRule(_localctx, 16, RULE_cppcode_production);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			Match(CPPCODE);
			State = 366;
			accessModifier();
			State = 367;
			resultType();
			State = 368;
			identifier();
			State = 369;
			formalParameters();
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 370;
				Match(THROWS);
				State = 371;
				name();
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 372;
					Match(COMMA);
					State = 373;
					name();
					}
					}
					State = 378;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 381;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bnf_productionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultTypeContext resultType() {
			return GetRuleContext<ResultTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expansion_choicesContext expansion_choices() {
			return GetRuleContext<Expansion_choicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaccParser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_descriptorContext node_descriptor() {
			return GetRuleContext<Node_descriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public Bnf_productionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bnf_production; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterBnf_production(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitBnf_production(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBnf_production(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bnf_productionContext bnf_production() {
		Bnf_productionContext _localctx = new Bnf_productionContext(Context, State);
		EnterRule(_localctx, 18, RULE_bnf_production);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			resultType();
			State = 384;
			identifier();
			State = 385;
			formalParameters();
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 386;
				Match(THROWS);
				State = 387;
				name();
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 388;
					Match(COMMA);
					State = 389;
					name();
					}
					}
					State = 394;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 397;
				node_descriptor();
				}
			}

			State = 400;
			Match(COLON);
			State = 401;
			block();
			State = 402;
			Match(LBRACE);
			State = 403;
			expansion_choices();
			State = 404;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(JavaccParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(JavaccParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(JavaccParser.PRIVATE, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 7L) != 0)) {
				{
				State = 406;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regular_expr_productionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Regexpr_kindContext regexpr_kind() {
			return GetRuleContext<Regexpr_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Regexpr_specContext[] regexpr_spec() {
			return GetRuleContexts<Regexpr_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Regexpr_specContext regexpr_spec(int i) {
			return GetRuleContext<Regexpr_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaccParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JavaccParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaccParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaccParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaccParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(JavaccParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_CASE() { return GetToken(JavaccParser.IGNORE_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(JavaccParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR() { return GetTokens(JavaccParser.BIT_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR(int i) {
			return GetToken(JavaccParser.BIT_OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public Regular_expr_productionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regular_expr_production; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterRegular_expr_production(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitRegular_expr_production(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegular_expr_production(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regular_expr_productionContext regular_expr_production() {
		Regular_expr_productionContext _localctx = new Regular_expr_productionContext(Context, State);
		EnterRule(_localctx, 22, RULE_regular_expr_production);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 409;
				Match(LT);
				State = 410;
				Match(STAR);
				State = 411;
				Match(GT);
				}
				break;
			case 2:
				{
				State = 412;
				Match(LT);
				State = 413;
				Match(IDENTIFIER);
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 414;
					Match(COMMA);
					State = 415;
					Match(IDENTIFIER);
					}
					}
					State = 420;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 421;
				Match(GT);
				}
				break;
			}
			State = 424;
			regexpr_kind();
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 425;
				Match(LBRACKET);
				State = 426;
				Match(IGNORE_CASE);
				State = 427;
				Match(RBRACKET);
				}
			}

			State = 430;
			Match(COLON);
			State = 431;
			Match(LBRACE);
			State = 432;
			regexpr_spec();
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BIT_OR) {
				{
				{
				State = 433;
				Match(BIT_OR);
				State = 434;
				regexpr_spec();
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 440;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_manager_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_MGR_DECLS() { return GetToken(JavaccParser.TOKEN_MGR_DECLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceBodyContext classOrInterfaceBody() {
			return GetRuleContext<ClassOrInterfaceBodyContext>(0);
		}
		public Token_manager_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_manager_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterToken_manager_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitToken_manager_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken_manager_decls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Token_manager_declsContext token_manager_decls() {
		Token_manager_declsContext _localctx = new Token_manager_declsContext(Context, State);
		EnterRule(_localctx, 24, RULE_token_manager_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(TOKEN_MGR_DECLS);
			State = 443;
			Match(COLON);
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 444;
				classOrInterfaceBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regexpr_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN() { return GetToken(JavaccParser.TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIAL_TOKEN() { return GetToken(JavaccParser.SPECIAL_TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(JavaccParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORE_() { return GetToken(JavaccParser.MORE_, 0); }
		public Regexpr_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexpr_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterRegexpr_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitRegexpr_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpr_kind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regexpr_kindContext regexpr_kind() {
		Regexpr_kindContext _localctx = new Regexpr_kindContext(Context, State);
		EnterRule(_localctx, 26, RULE_regexpr_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 245760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regexpr_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Regular_expressionContext regular_expression() {
			return GetRuleContext<Regular_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaccParser.IDENTIFIER, 0); }
		public Regexpr_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexpr_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterRegexpr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitRegexpr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpr_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regexpr_specContext regexpr_spec() {
		Regexpr_specContext _localctx = new Regexpr_specContext(Context, State);
		EnterRule(_localctx, 28, RULE_regexpr_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			regular_expression();
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 450;
				block();
				}
			}

			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 453;
				Match(COLON);
				State = 454;
				Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expansion_choicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionContext[] expansion() {
			return GetRuleContexts<ExpansionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionContext expansion(int i) {
			return GetRuleContext<ExpansionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR() { return GetTokens(JavaccParser.BIT_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR(int i) {
			return GetToken(JavaccParser.BIT_OR, i);
		}
		public Expansion_choicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expansion_choices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterExpansion_choices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitExpansion_choices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpansion_choices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expansion_choicesContext expansion_choices() {
		Expansion_choicesContext _localctx = new Expansion_choicesContext(Context, State);
		EnterRule(_localctx, 30, RULE_expansion_choices);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			expansion();
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BIT_OR) {
				{
				{
				State = 458;
				Match(BIT_OR);
				State = 459;
				expansion();
				}
				}
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpansionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOKAHEAD() { return GetToken(JavaccParser.LOOKAHEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_lookaheadContext local_lookahead() {
			return GetRuleContext<Local_lookaheadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expansion_unitContext[] expansion_unit() {
			return GetRuleContexts<Expansion_unitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expansion_unitContext expansion_unit(int i) {
			return GetRuleContext<Expansion_unitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_descriptorContext[] node_descriptor() {
			return GetRuleContexts<Node_descriptorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_descriptorContext node_descriptor(int i) {
			return GetRuleContext<Node_descriptorContext>(i);
		}
		public ExpansionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expansion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterExpansion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitExpansion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpansion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpansionContext expansion() {
		ExpansionContext _localctx = new ExpansionContext(Context, State);
		EnterRule(_localctx, 32, RULE_expansion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 465;
				Match(LOOKAHEAD);
				State = 466;
				Match(LPAREN);
				State = 467;
				local_lookahead();
				State = 468;
				Match(RPAREN);
				}
				break;
			}
			State = 476;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 472;
					expansion_unit();
					State = 474;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__0) {
						{
						State = 473;
						node_descriptor();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_lookaheadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expansion_choicesContext expansion_choices() {
			return GetRuleContext<Expansion_choicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Local_lookaheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_lookahead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterLocal_lookahead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitLocal_lookahead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_lookahead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_lookaheadContext local_lookahead() {
		Local_lookaheadContext _localctx = new Local_lookaheadContext(Context, State);
		EnterRule(_localctx, 34, RULE_local_lookahead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 480;
				integerLiteral();
				}
				break;
			}
			State = 484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 483;
				Match(COMMA);
				}
				break;
			}
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 486;
				expansion_choices();
				}
				break;
			}
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 489;
				Match(COMMA);
				}
			}

			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 492;
				Match(LBRACE);
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3819690555156193024L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 33797888870093897L) != 0) || _la==IDENTIFIER) {
					{
					State = 493;
					expression();
					}
				}

				State = 496;
				Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expansion_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOKAHEAD() { return GetToken(JavaccParser.LOOKAHEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(JavaccParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(JavaccParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_lookaheadContext local_lookahead() {
			return GetRuleContext<Local_lookaheadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(JavaccParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(JavaccParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(JavaccParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expansion_choicesContext expansion_choices() {
			return GetRuleContext<Expansion_choicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(JavaccParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(JavaccParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(JavaccParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(JavaccParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(JavaccParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaccParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaccParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Regular_expressionContext regular_expression() {
			return GetRuleContext<Regular_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaccParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaccParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(JavaccParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JavaccParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOOK() { return GetToken(JavaccParser.HOOK, 0); }
		public Expansion_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expansion_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterExpansion_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitExpansion_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpansion_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expansion_unitContext expansion_unit() {
		Expansion_unitContext _localctx = new Expansion_unitContext(Context, State);
		EnterRule(_localctx, 36, RULE_expansion_unit);
		int _la;
		try {
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 499;
				Match(LOOKAHEAD);
				State = 500;
				Match(LPAREN);
				State = 501;
				local_lookahead();
				State = 502;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 505;
				Match(LBRACKET);
				State = 506;
				expansion_choices();
				State = 507;
				Match(RBRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 509;
				Match(TRY);
				State = 510;
				Match(LBRACE);
				State = 511;
				expansion_choices();
				State = 512;
				Match(RBRACE);
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CATCH) {
					{
					{
					State = 513;
					Match(CATCH);
					State = 514;
					Match(LPAREN);
					State = 518;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67100416L) != 0) || _la==TEMPLATE || _la==IDENTIFIER) {
						{
						State = 515;
						name();
						State = 516;
						Match(IDENTIFIER);
						}
					}

					State = 520;
					Match(RPAREN);
					State = 521;
					block();
					}
					}
					State = 526;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FINALLY) {
					{
					State = 527;
					Match(FINALLY);
					State = 528;
					block();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 534;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 531;
					primaryExpression();
					State = 532;
					Match(ASSIGN);
					}
					break;
				}
				State = 547;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 536;
					identifier();
					State = 538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 537;
						typeArguments();
						}
					}

					State = 540;
					arguments();
					}
					break;
				case STRING_LITERAL:
				case LT:
					{
					State = 542;
					regular_expression();
					State = 545;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 543;
						Match(DOT);
						State = 544;
						Match(IDENTIFIER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 549;
				Match(LPAREN);
				State = 550;
				expansion_choices();
				State = 551;
				Match(RPAREN);
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 10241L) != 0)) {
					{
					State = 552;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 10241L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regular_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaccParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Complex_regular_expression_choicesContext complex_regular_expression_choices() {
			return GetRuleContext<Complex_regular_expression_choicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaccParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOF_() { return GetToken(JavaccParser.EOF_, 0); }
		public Regular_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regular_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterRegular_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitRegular_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegular_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regular_expressionContext regular_expression() {
		Regular_expressionContext _localctx = new Regular_expressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_regular_expression);
		int _la;
		try {
			State = 577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557;
				stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 558;
				Match(LT);
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0 || _la==IDENTIFIER) {
					{
					State = 560;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__0) {
						{
						State = 559;
						Match(T__0);
						}
					}

					State = 562;
					identifier();
					State = 563;
					Match(COLON);
					}
				}

				State = 567;
				complex_regular_expression_choices();
				State = 568;
				Match(GT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 570;
				Match(LT);
				State = 571;
				identifier();
				State = 572;
				Match(GT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 574;
				Match(LT);
				State = 575;
				Match(EOF_);
				State = 576;
				Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_regular_expression_choicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Complex_regular_expressionContext[] complex_regular_expression() {
			return GetRuleContexts<Complex_regular_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_regular_expressionContext complex_regular_expression(int i) {
			return GetRuleContext<Complex_regular_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR() { return GetTokens(JavaccParser.BIT_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR(int i) {
			return GetToken(JavaccParser.BIT_OR, i);
		}
		public Complex_regular_expression_choicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_regular_expression_choices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterComplex_regular_expression_choices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitComplex_regular_expression_choices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_regular_expression_choices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_regular_expression_choicesContext complex_regular_expression_choices() {
		Complex_regular_expression_choicesContext _localctx = new Complex_regular_expression_choicesContext(Context, State);
		EnterRule(_localctx, 40, RULE_complex_regular_expression_choices);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			complex_regular_expression();
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BIT_OR) {
				{
				{
				State = 580;
				Match(BIT_OR);
				State = 581;
				complex_regular_expression();
				}
				}
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_regular_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Complex_regular_expression_unitContext[] complex_regular_expression_unit() {
			return GetRuleContexts<Complex_regular_expression_unitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_regular_expression_unitContext complex_regular_expression_unit(int i) {
			return GetRuleContext<Complex_regular_expression_unitContext>(i);
		}
		public Complex_regular_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_regular_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterComplex_regular_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitComplex_regular_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_regular_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_regular_expressionContext complex_regular_expression() {
		Complex_regular_expressionContext _localctx = new Complex_regular_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_complex_regular_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 587;
				complex_regular_expression_unit();
				}
				}
				State = 590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & 10275L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_regular_expression_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaccParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaccParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Character_listContext character_list() {
			return GetRuleContext<Character_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Complex_regular_expression_choicesContext complex_regular_expression_choices() {
			return GetRuleContext<Complex_regular_expression_choicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(JavaccParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JavaccParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOOK() { return GetToken(JavaccParser.HOOK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext[] integerLiteral() {
			return GetRuleContexts<IntegerLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral(int i) {
			return GetRuleContext<IntegerLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(JavaccParser.COMMA, 0); }
		public Complex_regular_expression_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_regular_expression_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterComplex_regular_expression_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitComplex_regular_expression_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_regular_expression_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_regular_expression_unitContext complex_regular_expression_unit() {
		Complex_regular_expression_unitContext _localctx = new Complex_regular_expression_unitContext(Context, State);
		EnterRule(_localctx, 44, RULE_complex_regular_expression_unit);
		int _la;
		try {
			State = 616;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				stringLiteral();
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593;
				Match(LT);
				State = 594;
				identifier();
				State = 595;
				Match(GT);
				}
				break;
			case LBRACKET:
			case TILDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 597;
				character_list();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 598;
				Match(LPAREN);
				State = 599;
				complex_regular_expression_choices();
				State = 600;
				Match(RPAREN);
				State = 614;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
					{
					State = 601;
					Match(PLUS);
					}
					break;
				case STAR:
					{
					State = 602;
					Match(STAR);
					}
					break;
				case HOOK:
					{
					State = 603;
					Match(HOOK);
					}
					break;
				case LBRACE:
					{
					State = 604;
					Match(LBRACE);
					State = 605;
					integerLiteral();
					State = 610;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 606;
						Match(COMMA);
						State = 608;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==INTEGER_LITERAL) {
							{
							State = 607;
							integerLiteral();
							}
						}

						}
					}

					State = 612;
					Match(RBRACE);
					}
					break;
				case STRING_LITERAL:
				case LPAREN:
				case RPAREN:
				case LBRACKET:
				case LT:
				case TILDE:
				case BIT_OR:
				case GT:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(JavaccParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(JavaccParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(JavaccParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Character_descriptorContext[] character_descriptor() {
			return GetRuleContexts<Character_descriptorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Character_descriptorContext character_descriptor(int i) {
			return GetRuleContext<Character_descriptorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public Character_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterCharacter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitCharacter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_listContext character_list() {
		Character_listContext _localctx = new Character_listContext(Context, State);
		EnterRule(_localctx, 46, RULE_character_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TILDE) {
				{
				State = 618;
				Match(TILDE);
				}
			}

			State = 621;
			Match(LBRACKET);
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 622;
				character_descriptor();
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 623;
					Match(COMMA);
					State = 624;
					character_descriptor();
					}
					}
					State = 629;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 632;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_descriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(JavaccParser.MINUS, 0); }
		public Character_descriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_descriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterCharacter_descriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitCharacter_descriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_descriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_descriptorContext character_descriptor() {
		Character_descriptorContext _localctx = new Character_descriptorContext(Context, State);
		EnterRule(_localctx, 48, RULE_character_descriptor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			stringLiteral();
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 635;
				Match(MINUS);
				State = 636;
				stringLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaccParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_descriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaccParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(JavaccParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Node_descriptor_expressionContext node_descriptor_expression() {
			return GetRuleContext<Node_descriptor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaccParser.GT, 0); }
		public Node_descriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_descriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterNode_descriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitNode_descriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode_descriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Node_descriptorContext node_descriptor() {
		Node_descriptorContext _localctx = new Node_descriptorContext(Context, State);
		EnterRule(_localctx, 52, RULE_node_descriptor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			Match(T__0);
			State = 642;
			_la = TokenStream.LA(1);
			if ( !(_la==VOID || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 643;
				Match(LPAREN);
				State = 645;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 644;
					Match(GT);
					}
					break;
				}
				State = 647;
				node_descriptor_expression();
				State = 648;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_descriptor_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(JavaccParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(JavaccParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_descriptor_expressionContext node_descriptor_expression() {
			return GetRuleContext<Node_descriptor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		public Node_descriptor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_descriptor_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterNode_descriptor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitNode_descriptor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode_descriptor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Node_descriptor_expressionContext node_descriptor_expression() {
		Node_descriptor_expressionContext _localctx = new Node_descriptor_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_node_descriptor_expression);
		int _la;
		try {
			int _alt;
			State = 662;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case LOOKAHEAD:
			case IGNORE_CASE:
			case PARSER_BEGIN:
			case PARSER_END:
			case JAVACODE:
			case CPPCODE:
			case TOKEN:
			case SPECIAL_TOKEN:
			case MORE_:
			case SKIP_:
			case TOKEN_MGR_DECLS:
			case EOF_:
			case DCL_PARSER_BEGIN:
			case DCL_PARSER_END:
			case INC_PARSER_BEGIN:
			case INC_PARSER_END:
			case DEF_PARSER_BEGIN:
			case DEF_PARSER_END:
			case WS:
			case COMMENT:
			case LINE_COMMENT:
			case ABSTRACT:
			case ASSERT:
			case BOOLEAN:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DEFAULT:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EXTENDS:
			case FALSE:
			case FINAL:
			case FINALLY:
			case FLOAT:
			case FOR:
			case GOTO:
			case IF:
			case IMPLEMENTS:
			case IMPORT:
			case INSTANCEOF:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case NEW:
			case NULL:
			case PACKAGE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case RETURN:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SUPER:
			case SWITCH:
			case SYNCHRONIZED:
			case THIS:
			case THROW:
			case THROWS:
			case TRANSIENT:
			case TRUE:
			case TRY:
			case VOID:
			case VOLATILE:
			case WHILE:
			case TEMPLATE:
			case TYPENAME:
			case INTEGER_LITERAL:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case BINARY_LITERAL:
			case FLOATING_POINT_LITERAL:
			case DECIMAL_FLOATING_POINT_LITERAL:
			case DECIMAL_EXPONENT:
			case HEXADECIMAL_FLOATING_POINT_LITERAL:
			case HEXADECIMAL_EXPONENT:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case RPAREN:
			case LBRACE:
			case RBRACE:
			case LBRACKET:
			case RBRACKET:
			case SEMICOLON:
			case COMMA:
			case DOT:
			case ASSIGN:
			case LT:
			case BANG:
			case TILDE:
			case HOOK:
			case COLON:
			case DOUBLECOLON:
			case EQ:
			case LE:
			case GE:
			case NE:
			case SC_OR:
			case SC_AND:
			case INCR:
			case DECR:
			case PLUS:
			case MINUS:
			case STAR:
			case SLASH:
			case BIT_AND:
			case BIT_OR:
			case XOR:
			case REM:
			case PLUSASSIGN:
			case MINUSASSIGN:
			case STARASSIGN:
			case SLASHASSIGN:
			case ANDASSIGN:
			case ORASSIGN:
			case XORASSIGN:
			case REMASSIGN:
			case GT:
			case IDENTIFIER:
			case LETTER:
			case PART_LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 655;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 652;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (_la==LPAREN) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 657;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				}
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 658;
				Match(LPAREN);
				State = 659;
				node_descriptor_expression();
				State = 660;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JavaIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaccParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOKAHEAD() { return GetToken(JavaccParser.LOOKAHEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_CASE() { return GetToken(JavaccParser.IGNORE_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_BEGIN() { return GetToken(JavaccParser.PARSER_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_END() { return GetToken(JavaccParser.PARSER_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JAVACODE() { return GetToken(JavaccParser.JAVACODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN() { return GetToken(JavaccParser.TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIAL_TOKEN() { return GetToken(JavaccParser.SPECIAL_TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORE_() { return GetToken(JavaccParser.MORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(JavaccParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_MGR_DECLS() { return GetToken(JavaccParser.TOKEN_MGR_DECLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOF_() { return GetToken(JavaccParser.EOF_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(JavaccParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL_PARSER_BEGIN() { return GetToken(JavaccParser.DCL_PARSER_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCL_PARSER_END() { return GetToken(JavaccParser.DCL_PARSER_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_PARSER_BEGIN() { return GetToken(JavaccParser.INC_PARSER_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_PARSER_END() { return GetToken(JavaccParser.INC_PARSER_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF_PARSER_BEGIN() { return GetToken(JavaccParser.DEF_PARSER_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF_PARSER_END() { return GetToken(JavaccParser.DEF_PARSER_END, 0); }
		public JavaIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_javaIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterJavaIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitJavaIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJavaIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JavaIdentifierContext javaIdentifier() {
		JavaIdentifierContext _localctx = new JavaIdentifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_javaIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67100416L) != 0) || _la==TEMPLATE || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 58, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 666;
				packageDeclaration();
				}
				break;
			}
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 669;
				importDeclaration();
				}
				}
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8502637628825272192L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 274877976883L) != 0)) {
				{
				{
				State = 675;
				typeDeclaration();
				}
				}
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(JavaccParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_packageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			modifiers();
			State = 682;
			Match(PACKAGE);
			State = 683;
			name();
			State = 684;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(JavaccParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaccParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaccParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JavaccParser.STAR, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			Match(IMPORT);
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 687;
				Match(STATIC);
				}
			}

			State = 690;
			name();
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 691;
				Match(DOT);
				State = 692;
				Match(STAR);
				}
			}

			State = 695;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PUBLIC() { return GetTokens(JavaccParser.PUBLIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC(int i) {
			return GetToken(JavaccParser.PUBLIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATIC() { return GetTokens(JavaccParser.STATIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC(int i) {
			return GetToken(JavaccParser.STATIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROTECTED() { return GetTokens(JavaccParser.PROTECTED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED(int i) {
			return GetToken(JavaccParser.PROTECTED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PRIVATE() { return GetTokens(JavaccParser.PRIVATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE(int i) {
			return GetToken(JavaccParser.PRIVATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FINAL() { return GetTokens(JavaccParser.FINAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL(int i) {
			return GetToken(JavaccParser.FINAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ABSTRACT() { return GetTokens(JavaccParser.ABSTRACT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT(int i) {
			return GetToken(JavaccParser.ABSTRACT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SYNCHRONIZED() { return GetTokens(JavaccParser.SYNCHRONIZED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED(int i) {
			return GetToken(JavaccParser.SYNCHRONIZED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NATIVE() { return GetTokens(JavaccParser.NATIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE(int i) {
			return GetToken(JavaccParser.NATIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRANSIENT() { return GetTokens(JavaccParser.TRANSIENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSIENT(int i) {
			return GetToken(JavaccParser.TRANSIENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VOLATILE() { return GetTokens(JavaccParser.VOLATILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE(int i) {
			return GetToken(JavaccParser.VOLATILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRICTFP() { return GetTokens(JavaccParser.STRICTFP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP(int i) {
			return GetToken(JavaccParser.STRICTFP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifiersContext modifiers() {
		ModifiersContext _localctx = new ModifiersContext(Context, State);
		EnterRule(_localctx, 64, RULE_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 709;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PUBLIC:
						{
						State = 697;
						Match(PUBLIC);
						}
						break;
					case STATIC:
						{
						State = 698;
						Match(STATIC);
						}
						break;
					case PROTECTED:
						{
						State = 699;
						Match(PROTECTED);
						}
						break;
					case PRIVATE:
						{
						State = 700;
						Match(PRIVATE);
						}
						break;
					case FINAL:
						{
						State = 701;
						Match(FINAL);
						}
						break;
					case ABSTRACT:
						{
						State = 702;
						Match(ABSTRACT);
						}
						break;
					case SYNCHRONIZED:
						{
						State = 703;
						Match(SYNCHRONIZED);
						}
						break;
					case NATIVE:
						{
						State = 704;
						Match(NATIVE);
						}
						break;
					case TRANSIENT:
						{
						State = 705;
						Match(TRANSIENT);
						}
						break;
					case VOLATILE:
						{
						State = 706;
						Match(VOLATILE);
						}
						break;
					case STRICTFP:
						{
						State = 707;
						Match(STRICTFP);
						}
						break;
					case T__6:
						{
						State = 708;
						annotation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 715;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceDeclarationContext classOrInterfaceDeclaration() {
			return GetRuleContext<ClassOrInterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_typeDeclaration);
		try {
			State = 723;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 716;
				Match(SEMICOLON);
				}
				break;
			case T__6:
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case FINAL:
			case INTERFACE:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOLATILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 717;
				modifiers();
				State = 721;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
				case INTERFACE:
					{
					State = 718;
					classOrInterfaceDeclaration();
					}
					break;
				case ENUM:
					{
					State = 719;
					enumDeclaration();
					}
					break;
				case T__6:
					{
					State = 720;
					annotationTypeDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceBodyContext classOrInterfaceBody() {
			return GetRuleContext<ClassOrInterfaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(JavaccParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(JavaccParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtendsListContext extendsList() {
			return GetRuleContext<ExtendsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsListContext implementsList() {
			return GetRuleContext<ImplementsListContext>(0);
		}
		public ClassOrInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceDeclarationContext classOrInterfaceDeclaration() {
		ClassOrInterfaceDeclarationContext _localctx = new ClassOrInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_classOrInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			_la = TokenStream.LA(1);
			if ( !(_la==CLASS || _la==INTERFACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 726;
			javaIdentifier();
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 727;
				typeParameters();
				}
			}

			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 730;
				extendsList();
				}
			}

			State = 734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 733;
				implementsList();
				}
			}

			State = 736;
			classOrInterfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaccParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext[] classOrInterfaceType() {
			return GetRuleContexts<ClassOrInterfaceTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType(int i) {
			return GetRuleContext<ClassOrInterfaceTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public ExtendsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterExtendsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitExtendsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsListContext extendsList() {
		ExtendsListContext _localctx = new ExtendsListContext(Context, State);
		EnterRule(_localctx, 70, RULE_extendsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			Match(EXTENDS);
			State = 739;
			classOrInterfaceType();
			State = 744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 740;
				Match(COMMA);
				State = 741;
				classOrInterfaceType();
				}
				}
				State = 746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(JavaccParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext[] classOrInterfaceType() {
			return GetRuleContexts<ClassOrInterfaceTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType(int i) {
			return GetRuleContext<ClassOrInterfaceTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public ImplementsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterImplementsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitImplementsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsListContext implementsList() {
		ImplementsListContext _localctx = new ImplementsListContext(Context, State);
		EnterRule(_localctx, 72, RULE_implementsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			Match(IMPLEMENTS);
			State = 748;
			classOrInterfaceType();
			State = 753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 749;
				Match(COMMA);
				State = 750;
				classOrInterfaceType();
				}
				}
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(JavaccParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsListContext implementsList() {
			return GetRuleContext<ImplementsListContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			Match(ENUM);
			State = 757;
			javaIdentifier();
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 758;
				implementsList();
				}
			}

			State = 761;
			enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceBodyDeclarationContext[] classOrInterfaceBodyDeclaration() {
			return GetRuleContexts<ClassOrInterfaceBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceBodyDeclarationContext classOrInterfaceBodyDeclaration(int i) {
			return GetRuleContext<ClassOrInterfaceBodyDeclarationContext>(i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 76, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			Match(LBRACE);
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8646770546459025536L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 332083L) != 0) || _la==IDENTIFIER) {
				{
				State = 764;
				enumConstant();
				State = 769;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 765;
						Match(COMMA);
						State = 766;
						enumConstant();
						}
						} 
					}
					State = 771;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
				}
				}
			}

			State = 775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 774;
				Match(COMMA);
				}
			}

			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 777;
				Match(SEMICOLON);
				State = 781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8141781956233797760L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 145427593007419L) != 0) || _la==IDENTIFIER) {
					{
					{
					State = 778;
					classOrInterfaceBodyDeclaration();
					}
					}
					State = 783;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 786;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceBodyContext classOrInterfaceBody() {
			return GetRuleContext<ClassOrInterfaceBodyContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 78, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788;
			modifiers();
			State = 789;
			javaIdentifier();
			State = 791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 790;
				arguments();
				}
			}

			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 793;
				classOrInterfaceBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaccParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaccParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			Match(LT);
			State = 797;
			typeParameter();
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 798;
				Match(COMMA);
				State = 799;
				typeParameter();
				}
				}
				State = 804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 805;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			javaIdentifier();
			State = 809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 808;
				typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaccParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext[] classOrInterfaceType() {
			return GetRuleContexts<ClassOrInterfaceTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType(int i) {
			return GetRuleContext<ClassOrInterfaceTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_AND() { return GetTokens(JavaccParser.BIT_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND(int i) {
			return GetToken(JavaccParser.BIT_AND, i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			Match(EXTENDS);
			State = 812;
			classOrInterfaceType();
			State = 817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BIT_AND) {
				{
				{
				State = 813;
				Match(BIT_AND);
				State = 814;
				classOrInterfaceType();
				}
				}
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceBodyDeclarationContext[] classOrInterfaceBodyDeclaration() {
			return GetRuleContexts<ClassOrInterfaceBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceBodyDeclarationContext classOrInterfaceBodyDeclaration(int i) {
			return GetRuleContext<ClassOrInterfaceBodyDeclarationContext>(i);
		}
		public ClassOrInterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceBodyContext classOrInterfaceBody() {
		ClassOrInterfaceBodyContext _localctx = new ClassOrInterfaceBodyContext(Context, State);
		EnterRule(_localctx, 86, RULE_classOrInterfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(LBRACE);
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8141781956233797760L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 145427593007419L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 821;
				classOrInterfaceBodyDeclaration();
				}
				}
				State = 826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 827;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceDeclarationContext classOrInterfaceDeclaration() {
			return GetRuleContext<ClassOrInterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		public ClassOrInterfaceBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceBodyDeclarationContext classOrInterfaceBodyDeclaration() {
		ClassOrInterfaceBodyDeclarationContext _localctx = new ClassOrInterfaceBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_classOrInterfaceBodyDeclaration);
		try {
			State = 839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 829;
				initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 830;
				modifiers();
				State = 836;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
				case 1:
					{
					State = 831;
					classOrInterfaceDeclaration();
					}
					break;
				case 2:
					{
					State = 832;
					enumDeclaration();
					}
					break;
				case 3:
					{
					State = 833;
					constructorDeclaration();
					}
					break;
				case 4:
					{
					State = 834;
					fieldDeclaration();
					}
					break;
				case 5:
					{
					State = 835;
					methodDeclaration();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 838;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			type();
			State = 842;
			variableDeclarator();
			State = 847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 843;
				Match(COMMA);
				State = 844;
				variableDeclarator();
				}
				}
				State = 849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 850;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaccParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 92, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 852;
			variableDeclaratorId();
			State = 855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 853;
				Match(ASSIGN);
				State = 854;
				variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(JavaccParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(JavaccParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(JavaccParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(JavaccParser.RBRACKET, i);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 94, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			javaIdentifier();
			State = 862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACKET) {
				{
				{
				State = 858;
				Match(LBRACKET);
				State = 859;
				Match(RBRACKET);
				}
				}
				State = 864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 96, RULE_variableInitializer);
		try {
			State = 867;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 865;
				arrayInitializer();
				}
				break;
			case LOOKAHEAD:
			case IGNORE_CASE:
			case PARSER_BEGIN:
			case PARSER_END:
			case JAVACODE:
			case TOKEN:
			case SPECIAL_TOKEN:
			case MORE_:
			case SKIP_:
			case TOKEN_MGR_DECLS:
			case EOF_:
			case DCL_PARSER_BEGIN:
			case DCL_PARSER_END:
			case INC_PARSER_BEGIN:
			case INC_PARSER_END:
			case DEF_PARSER_BEGIN:
			case DEF_PARSER_END:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CONST:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case NULL:
			case SHORT:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
			case TEMPLATE:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case LPAREN:
			case BANG:
			case TILDE:
			case DOUBLECOLON:
			case INCR:
			case DECR:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 98, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			Match(LBRACE);
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3819690555156193024L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 33797891017577545L) != 0) || _la==IDENTIFIER) {
				{
				State = 870;
				variableInitializer();
				State = 875;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 871;
						Match(COMMA);
						State = 872;
						variableInitializer();
						}
						} 
					}
					State = 877;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
				}
				}
			}

			State = 881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 880;
				Match(COMMA);
				}
			}

			State = 883;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultTypeContext resultType() {
			return GetRuleContext<ResultTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclaratorContext methodDeclarator() {
			return GetRuleContext<MethodDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaccParser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameListContext nameList() {
			return GetRuleContext<NameListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 885;
				typeParameters();
				}
			}

			State = 888;
			resultType();
			State = 889;
			methodDeclarator();
			State = 892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 890;
				Match(THROWS);
				State = 891;
				nameList();
				}
			}

			State = 896;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				{
				State = 894;
				block();
				}
				break;
			case SEMICOLON:
				{
				State = 895;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(JavaccParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(JavaccParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(JavaccParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(JavaccParser.RBRACKET, i);
		}
		public MethodDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterMethodDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitMethodDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclaratorContext methodDeclarator() {
		MethodDeclaratorContext _localctx = new MethodDeclaratorContext(Context, State);
		EnterRule(_localctx, 102, RULE_methodDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			javaIdentifier();
			State = 899;
			formalParameters();
			State = 904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACKET) {
				{
				{
				State = 900;
				Match(LBRACKET);
				State = 901;
				Match(RBRACKET);
				}
				}
				State = 906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 104, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(LPAREN);
			State = 916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8285915148879658880L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 140737488687419L) != 0) || _la==IDENTIFIER) {
				{
				State = 908;
				formalParameter();
				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 909;
					Match(COMMA);
					State = 910;
					formalParameter();
					}
					}
					State = 915;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 918;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(JavaccParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JavaccParser.STAR, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 106, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			modifiers();
			State = 921;
			type();
			State = 924;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
			case BIT_AND:
				{
				State = 922;
				_la = TokenStream.LA(1);
				if ( !(_la==STAR || _la==BIT_AND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__1:
				{
				State = 923;
				Match(T__1);
				}
				break;
			case LOOKAHEAD:
			case IGNORE_CASE:
			case PARSER_BEGIN:
			case PARSER_END:
			case JAVACODE:
			case TOKEN:
			case SPECIAL_TOKEN:
			case MORE_:
			case SKIP_:
			case TOKEN_MGR_DECLS:
			case EOF_:
			case DCL_PARSER_BEGIN:
			case DCL_PARSER_END:
			case INC_PARSER_BEGIN:
			case INC_PARSER_END:
			case DEF_PARSER_BEGIN:
			case DEF_PARSER_END:
			case TEMPLATE:
			case IDENTIFIER:
				break;
			default:
				break;
			}
			State = 926;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaccParser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameListContext nameList() {
			return GetRuleContext<NameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
			return GetRuleContext<ExplicitConstructorInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 928;
				typeParameters();
				}
			}

			State = 931;
			javaIdentifier();
			State = 932;
			formalParameters();
			State = 935;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 933;
				Match(THROWS);
				State = 934;
				nameList();
				}
			}

			State = 937;
			Match(LBRACE);
			State = 939;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 938;
				explicitConstructorInvocation();
				}
				break;
			}
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4677332412173131904L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 54184232625895423L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 941;
				blockStatement();
				}
				}
				State = 946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 947;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitConstructorInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaccParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaccParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaccParser.DOT, 0); }
		public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitConstructorInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterExplicitConstructorInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitExplicitConstructorInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitConstructorInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
		ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(Context, State);
		EnterRule(_localctx, 110, RULE_explicitConstructorInvocation);
		try {
			State = 962;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 949;
				Match(THIS);
				State = 950;
				arguments();
				State = 951;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 956;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 953;
					primaryExpression();
					State = 954;
					Match(DOT);
					}
					break;
				}
				State = 958;
				Match(SUPER);
				State = 959;
				arguments();
				State = 960;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaccParser.STATIC, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 112, RULE_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 964;
				Match(STATIC);
				}
			}

			State = 967;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_type);
		try {
			State = 971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 969;
				referenceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 970;
				primitiveType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(JavaccParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(JavaccParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(JavaccParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(JavaccParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_referenceType);
		int _la;
		try {
			int _alt;
			State = 992;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 973;
				primitiveType();
				State = 976;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 974;
						Match(LBRACKET);
						State = 975;
						Match(RBRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 978;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case TEMPLATE:
			case DOUBLECOLON:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPLATE) {
					{
					State = 980;
					template();
					}
				}

				State = 983;
				classOrInterfaceType();
				}
				State = 989;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 985;
						Match(LBRACKET);
						State = 986;
						Match(RBRACKET);
						}
						} 
					}
					State = 991;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(JavaccParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaccParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBaseContext[] templateBase() {
			return GetRuleContexts<TemplateBaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBaseContext templateBase(int i) {
			return GetRuleContext<TemplateBaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaccParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 118, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 994;
			Match(TEMPLATE);
			State = 995;
			Match(LT);
			State = 996;
			templateBase();
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 997;
				Match(COMMA);
				State = 998;
				templateBase();
				}
				}
				State = 1003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1004;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplatePackContext templatePack() {
			return GetRuleContext<TemplatePackContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaccParser.IDENTIFIER, 0); }
		public TemplateBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTemplateBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTemplateBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBaseContext templateBase() {
		TemplateBaseContext _localctx = new TemplateBaseContext(Context, State);
		EnterRule(_localctx, 120, RULE_templateBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006;
			templatePack();
			State = 1008;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 1007;
				Match(T__1);
				}
			}

			State = 1010;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatePackContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(JavaccParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPENAME() { return GetToken(JavaccParser.TYPENAME, 0); }
		public TemplatePackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatePack; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTemplatePack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTemplatePack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplatePack(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplatePackContext templatePack() {
		TemplatePackContext _localctx = new TemplatePackContext(Context, State);
		EnterRule(_localctx, 122, RULE_templatePack);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012;
			_la = TokenStream.LA(1);
			if ( !(_la==CLASS || _la==TYPENAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaccParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaccParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLECOLON() { return GetTokens(JavaccParser.DOUBLECOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON(int i) {
			return GetToken(JavaccParser.DOUBLECOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaccParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaccParser.DOT, i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_classOrInterfaceType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 1014;
				Match(DOUBLECOLON);
				}
			}

			State = 1017;
			Match(IDENTIFIER);
			State = 1019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1018;
				typeArguments();
				}
				break;
			}
			State = 1028;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1021;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==DOUBLECOLON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1022;
					Match(IDENTIFIER);
					State = 1024;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
					case 1:
						{
						State = 1023;
						typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 1030;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaccParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaccParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 126, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031;
			Match(LT);
			State = 1043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & 2251868701198373L) != 0) || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 268435461L) != 0)) {
				{
				State = 1032;
				typeArgument();
				State = 1040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1033;
					Match(COMMA);
					State = 1034;
					typeArgument();
					State = 1036;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__1) {
						{
						State = 1035;
						Match(T__1);
						}
					}

					}
					}
					State = 1042;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1045;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOOK() { return GetToken(JavaccParser.HOOK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WildcardBoundsContext wildcardBounds() {
			return GetRuleContext<WildcardBoundsContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 128, RULE_typeArgument);
		int _la;
		try {
			State = 1052;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case TEMPLATE:
			case DOUBLECOLON:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1047;
				referenceType();
				}
				break;
			case HOOK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1048;
				Match(HOOK);
				State = 1050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDS || _la==SUPER) {
					{
					State = 1049;
					wildcardBounds();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardBoundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaccParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaccParser.SUPER, 0); }
		public WildcardBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardBounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterWildcardBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitWildcardBounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardBounds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardBoundsContext wildcardBounds() {
		WildcardBoundsContext _localctx = new WildcardBoundsContext(Context, State);
		EnterRule(_localctx, 130, RULE_wildcardBounds);
		try {
			State = 1058;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTENDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1054;
				Match(EXTENDS);
				State = 1055;
				referenceType();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1056;
				Match(SUPER);
				State = 1057;
				referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(JavaccParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(JavaccParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(JavaccParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(JavaccParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(JavaccParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(JavaccParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(JavaccParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(JavaccParser.DOUBLE, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 132, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & 68887513125L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(JavaccParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JavaccParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(JavaccParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(JavaccParser.BIT_AND, 0); }
		public ResultTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterResultType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitResultType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultTypeContext resultType() {
		ResultTypeContext _localctx = new ResultTypeContext(Context, State);
		EnterRule(_localctx, 134, RULE_resultType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				{
				State = 1062;
				Match(VOID);
				State = 1064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR) {
					{
					State = 1063;
					Match(STAR);
					}
				}

				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CONST:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case TEMPLATE:
			case DOUBLECOLON:
			case IDENTIFIER:
				{
				State = 1067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONST) {
					{
					State = 1066;
					Match(CONST);
					}
				}

				State = 1069;
				type();
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==BIT_AND) {
					{
					State = 1070;
					_la = TokenStream.LA(1);
					if ( !(_la==STAR || _la==BIT_AND) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext[] javaIdentifier() {
			return GetRuleContexts<JavaIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier(int i) {
			return GetRuleContext<JavaIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaccParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaccParser.DOT, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 136, RULE_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075;
			javaIdentifier();
			State = 1080;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1076;
					Match(DOT);
					State = 1077;
					javaIdentifier();
					}
					} 
				}
				State = 1082;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public NameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameListContext nameList() {
		NameListContext _localctx = new NameListContext(Context, State);
		EnterRule(_localctx, 138, RULE_nameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083;
			name();
			State = 1088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1084;
				Match(COMMA);
				State = 1085;
				name();
				}
				}
				State = 1090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 140, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			conditionalExpression();
			State = 1095;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 1092;
				assignmentOperator();
				State = 1093;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaccParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARASSIGN() { return GetToken(JavaccParser.STARASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHASSIGN() { return GetToken(JavaccParser.SLASHASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMASSIGN() { return GetToken(JavaccParser.REMASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(JavaccParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(JavaccParser.MINUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDASSIGN() { return GetToken(JavaccParser.ANDASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XORASSIGN() { return GetToken(JavaccParser.XORASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORASSIGN() { return GetToken(JavaccParser.ORASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 142, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 56L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & 2139095041L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOOK() { return GetToken(JavaccParser.HOOK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099;
			conditionalOrExpression();
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HOOK) {
				{
				State = 1100;
				Match(HOOK);
				State = 1101;
				expression();
				State = 1102;
				Match(COLON);
				State = 1103;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SC_OR() { return GetTokens(JavaccParser.SC_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SC_OR(int i) {
			return GetToken(JavaccParser.SC_OR, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1107;
			conditionalAndExpression();
			State = 1112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SC_OR) {
				{
				{
				State = 1108;
				Match(SC_OR);
				State = 1109;
				conditionalAndExpression();
				}
				}
				State = 1114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SC_AND() { return GetTokens(JavaccParser.SC_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SC_AND(int i) {
			return GetToken(JavaccParser.SC_AND, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			inclusiveOrExpression();
			State = 1120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SC_AND) {
				{
				{
				State = 1116;
				Match(SC_AND);
				State = 1117;
				inclusiveOrExpression();
				}
				}
				State = 1122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR() { return GetTokens(JavaccParser.BIT_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR(int i) {
			return GetToken(JavaccParser.BIT_OR, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123;
			exclusiveOrExpression();
			State = 1128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BIT_OR) {
				{
				{
				State = 1124;
				Match(BIT_OR);
				State = 1125;
				exclusiveOrExpression();
				}
				}
				State = 1130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XOR() { return GetTokens(JavaccParser.XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR(int i) {
			return GetToken(JavaccParser.XOR, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			andExpression();
			State = 1136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==XOR) {
				{
				{
				State = 1132;
				Match(XOR);
				State = 1133;
				andExpression();
				}
				}
				State = 1138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_AND() { return GetTokens(JavaccParser.BIT_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND(int i) {
			return GetToken(JavaccParser.BIT_AND, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 154, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			equalityExpression();
			State = 1144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BIT_AND) {
				{
				{
				State = 1140;
				Match(BIT_AND);
				State = 1141;
				equalityExpression();
				}
				}
				State = 1146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstanceOfExpressionContext[] instanceOfExpression() {
			return GetRuleContexts<InstanceOfExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceOfExpressionContext instanceOfExpression(int i) {
			return GetRuleContext<InstanceOfExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(JavaccParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(JavaccParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NE() { return GetTokens(JavaccParser.NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE(int i) {
			return GetToken(JavaccParser.NE, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 156, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147;
			instanceOfExpression();
			State = 1152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQ || _la==NE) {
				{
				{
				State = 1148;
				_la = TokenStream.LA(1);
				if ( !(_la==EQ || _la==NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1149;
				instanceOfExpression();
				}
				}
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceOfExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCEOF() { return GetToken(JavaccParser.INSTANCEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public InstanceOfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceOfExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterInstanceOfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitInstanceOfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceOfExpressionContext instanceOfExpression() {
		InstanceOfExpressionContext _localctx = new InstanceOfExpressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_instanceOfExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			relationalExpression();
			State = 1158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSTANCEOF) {
				{
				State = 1156;
				Match(INSTANCEOF);
				State = 1157;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(JavaccParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(JavaccParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(JavaccParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(JavaccParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LE() { return GetTokens(JavaccParser.LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE(int i) {
			return GetToken(JavaccParser.LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GE() { return GetTokens(JavaccParser.GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE(int i) {
			return GetToken(JavaccParser.GE, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160;
			shiftExpression();
			State = 1165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 1073742209L) != 0)) {
				{
				{
				State = 1161;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 1073742209L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1162;
				shiftExpression();
				}
				}
				State = 1167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RsignedshiftContext[] rsignedshift() {
			return GetRuleContexts<RsignedshiftContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RsignedshiftContext rsignedshift(int i) {
			return GetRuleContext<RsignedshiftContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RunsignedshiftContext[] runsignedshift() {
			return GetRuleContexts<RunsignedshiftContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RunsignedshiftContext runsignedshift(int i) {
			return GetRuleContext<RunsignedshiftContext>(i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_shiftExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1168;
			additiveExpression();
			State = 1177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1172;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
					case 1:
						{
						State = 1169;
						Match(T__5);
						}
						break;
					case 2:
						{
						State = 1170;
						rsignedshift();
						}
						break;
					case 3:
						{
						State = 1171;
						runsignedshift();
						}
						break;
					}
					State = 1174;
					additiveExpression();
					}
					} 
				}
				State = 1179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(JavaccParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(JavaccParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(JavaccParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(JavaccParser.MINUS, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			multiplicativeExpression();
			State = 1185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 1181;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1182;
				multiplicativeExpression();
				}
				}
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(JavaccParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(JavaccParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(JavaccParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(JavaccParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REM() { return GetTokens(JavaccParser.REM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM(int i) {
			return GetToken(JavaccParser.REM, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			unaryExpression();
			State = 1193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 35L) != 0)) {
				{
				{
				State = 1189;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 35L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1190;
				unaryExpression();
				}
				}
				State = 1195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(JavaccParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(JavaccParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 168, RULE_unaryExpression);
		int _la;
		try {
			State = 1201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1196;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1197;
				unaryExpression();
				}
				break;
			case INCR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1198;
				preIncrementExpression();
				}
				break;
			case DECR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1199;
				preDecrementExpression();
				}
				break;
			case LOOKAHEAD:
			case IGNORE_CASE:
			case PARSER_BEGIN:
			case PARSER_END:
			case JAVACODE:
			case TOKEN:
			case SPECIAL_TOKEN:
			case MORE_:
			case SKIP_:
			case TOKEN_MGR_DECLS:
			case EOF_:
			case DCL_PARSER_BEGIN:
			case DCL_PARSER_END:
			case INC_PARSER_BEGIN:
			case INC_PARSER_END:
			case DEF_PARSER_BEGIN:
			case DEF_PARSER_END:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CONST:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case NULL:
			case SHORT:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
			case TEMPLATE:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case LPAREN:
			case BANG:
			case TILDE:
			case DOUBLECOLON:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1200;
				unaryExpressionNotPlusMinus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(JavaccParser.INCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrementExpressionContext preIncrementExpression() {
		PreIncrementExpressionContext _localctx = new PreIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 170, RULE_preIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203;
			Match(INCR);
			State = 1204;
			primaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDecrementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(JavaccParser.DECR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDecrementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreDecrementExpressionContext preDecrementExpression() {
		PreDecrementExpressionContext _localctx = new PreDecrementExpressionContext(Context, State);
		EnterRule(_localctx, 172, RULE_preDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			Match(DECR);
			State = 1207;
			primaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(JavaccParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(JavaccParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionNotPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(Context, State);
		EnterRule(_localctx, 174, RULE_unaryExpressionNotPlusMinus);
		int _la;
		try {
			State = 1213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1209;
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==TILDE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1210;
				unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1211;
				castExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1212;
				postfixExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastLookaheadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(JavaccParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(JavaccParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(JavaccParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(JavaccParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(JavaccParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(JavaccParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaccParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaccParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(JavaccParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public CastLookaheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castLookahead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterCastLookahead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitCastLookahead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastLookahead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastLookaheadContext castLookahead() {
		CastLookaheadContext _localctx = new CastLookaheadContext(Context, State);
		EnterRule(_localctx, 176, RULE_castLookahead);
		try {
			State = 1235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1215;
				Match(LPAREN);
				State = 1216;
				primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1217;
				Match(LPAREN);
				State = 1218;
				type();
				State = 1219;
				Match(LBRACKET);
				State = 1220;
				Match(RBRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1222;
				Match(LPAREN);
				State = 1223;
				type();
				State = 1224;
				Match(RPAREN);
				State = 1233;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TILDE:
					{
					State = 1225;
					Match(TILDE);
					}
					break;
				case BANG:
					{
					State = 1226;
					Match(BANG);
					}
					break;
				case LPAREN:
					{
					State = 1227;
					Match(LPAREN);
					}
					break;
				case LOOKAHEAD:
				case IGNORE_CASE:
				case PARSER_BEGIN:
				case PARSER_END:
				case JAVACODE:
				case TOKEN:
				case SPECIAL_TOKEN:
				case MORE_:
				case SKIP_:
				case TOKEN_MGR_DECLS:
				case EOF_:
				case DCL_PARSER_BEGIN:
				case DCL_PARSER_END:
				case INC_PARSER_BEGIN:
				case INC_PARSER_END:
				case DEF_PARSER_BEGIN:
				case DEF_PARSER_END:
				case TEMPLATE:
				case IDENTIFIER:
					{
					State = 1228;
					javaIdentifier();
					}
					break;
				case THIS:
					{
					State = 1229;
					Match(THIS);
					}
					break;
				case SUPER:
					{
					State = 1230;
					Match(SUPER);
					}
					break;
				case NEW:
					{
					State = 1231;
					Match(NEW);
					}
					break;
				case FALSE:
				case NULL:
				case TRUE:
				case INTEGER_LITERAL:
				case FLOATING_POINT_LITERAL:
				case CHARACTER_LITERAL:
				case STRING_LITERAL:
					{
					State = 1232;
					literal();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(JavaccParser.INCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(JavaccParser.DECR, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 178, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			primaryExpression();
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INCR || _la==DECR) {
				{
				State = 1238;
				_la = TokenStream.LA(1);
				if ( !(_la==INCR || _la==DECR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 180, RULE_castExpression);
		try {
			State = 1251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1241;
				Match(LPAREN);
				State = 1242;
				type();
				State = 1243;
				Match(RPAREN);
				State = 1244;
				unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1246;
				Match(LPAREN);
				State = 1247;
				type();
				State = 1248;
				Match(RPAREN);
				State = 1249;
				unaryExpressionNotPlusMinus();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryPrefixContext primaryPrefix() {
			return GetRuleContext<PrimaryPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimarySuffixContext[] primarySuffix() {
			return GetRuleContexts<PrimarySuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimarySuffixContext primarySuffix(int i) {
			return GetRuleContext<PrimarySuffixContext>(i);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 182, RULE_primaryExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			primaryPrefix();
			State = 1257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1254;
					primarySuffix();
					}
					} 
				}
				State = 1259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaccParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		public MemberSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterMemberSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitMemberSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberSelectorContext memberSelector() {
		MemberSelectorContext _localctx = new MemberSelectorContext(Context, State);
		EnterRule(_localctx, 184, RULE_memberSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			Match(DOT);
			State = 1261;
			typeArguments();
			State = 1262;
			javaIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaccParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaccParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaccParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllocationExpressionContext allocationExpression() {
			return GetRuleContext<AllocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResultTypeContext resultType() {
			return GetRuleContext<ResultTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(JavaccParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public PrimaryPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterPrimaryPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitPrimaryPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryPrefixContext primaryPrefix() {
		PrimaryPrefixContext _localctx = new PrimaryPrefixContext(Context, State);
		EnterRule(_localctx, 186, RULE_primaryPrefix);
		try {
			State = 1279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1264;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1265;
				Match(THIS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1266;
				Match(SUPER);
				State = 1267;
				Match(DOT);
				State = 1268;
				javaIdentifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1269;
				Match(LPAREN);
				State = 1270;
				expression();
				State = 1271;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1273;
				allocationExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1274;
				resultType();
				State = 1275;
				Match(DOT);
				State = 1276;
				Match(CLASS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1278;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimarySuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaccParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaccParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllocationExpressionContext allocationExpression() {
			return GetRuleContext<AllocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSelectorContext memberSelector() {
			return GetRuleContext<MemberSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(JavaccParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(JavaccParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimarySuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primarySuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterPrimarySuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitPrimarySuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimarySuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimarySuffixContext primarySuffix() {
		PrimarySuffixContext _localctx = new PrimarySuffixContext(Context, State);
		EnterRule(_localctx, 188, RULE_primarySuffix);
		try {
			State = 1293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1281;
				Match(DOT);
				State = 1282;
				Match(THIS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1283;
				Match(DOT);
				State = 1284;
				allocationExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1285;
				memberSelector();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1286;
				Match(LBRACKET);
				State = 1287;
				expression();
				State = 1288;
				Match(RBRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1290;
				Match(DOT);
				State = 1291;
				javaIdentifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1292;
				arguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(JavaccParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(JavaccParser.FLOATING_POINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(JavaccParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(JavaccParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 190, RULE_literal);
		try {
			State = 1301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1295;
				Match(INTEGER_LITERAL);
				}
				break;
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1296;
				Match(FLOATING_POINT_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1297;
				Match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1298;
				Match(STRING_LITERAL);
				}
				break;
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1299;
				booleanLiteral();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1300;
				nullLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(JavaccParser.INTEGER_LITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 192, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(JavaccParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(JavaccParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(JavaccParser.STRING_LITERAL, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 196, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(JavaccParser.NULL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_nullLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 200, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1311;
			Match(LPAREN);
			State = 1313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3819690555156193024L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 33797888870093897L) != 0) || _la==IDENTIFIER) {
				{
				State = 1312;
				argumentList();
				}
			}

			State = 1315;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 202, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317;
			expression();
			State = 1322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1318;
				Match(COMMA);
				State = 1319;
				expression();
				}
				}
				State = 1324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(JavaccParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDimsAndInitsContext arrayDimsAndInits() {
			return GetRuleContext<ArrayDimsAndInitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceBodyContext classOrInterfaceBody() {
			return GetRuleContext<ClassOrInterfaceBodyContext>(0);
		}
		public AllocationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAllocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAllocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocationExpressionContext allocationExpression() {
		AllocationExpressionContext _localctx = new AllocationExpressionContext(Context, State);
		EnterRule(_localctx, 204, RULE_allocationExpression);
		int _la;
		try {
			State = 1341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1325;
				Match(NEW);
				State = 1326;
				primitiveType();
				State = 1327;
				arrayDimsAndInits();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1329;
				Match(NEW);
				State = 1330;
				classOrInterfaceType();
				State = 1332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1331;
					typeArguments();
					}
				}

				State = 1339;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACKET:
					{
					State = 1334;
					arrayDimsAndInits();
					}
					break;
				case LPAREN:
					{
					State = 1335;
					arguments();
					State = 1337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LBRACE) {
						{
						State = 1336;
						classOrInterfaceBody();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDimsAndInitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(JavaccParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(JavaccParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(JavaccParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(JavaccParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ArrayDimsAndInitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDimsAndInits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterArrayDimsAndInits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitArrayDimsAndInits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDimsAndInits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDimsAndInitsContext arrayDimsAndInits() {
		ArrayDimsAndInitsContext _localctx = new ArrayDimsAndInitsContext(Context, State);
		EnterRule(_localctx, 206, RULE_arrayDimsAndInits);
		int _la;
		try {
			int _alt;
			State = 1365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1347;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1343;
						Match(LBRACKET);
						State = 1344;
						expression();
						State = 1345;
						Match(RBRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1349;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 1355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1351;
						Match(LBRACKET);
						State = 1352;
						Match(RBRACKET);
						}
						} 
					}
					State = 1357;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1358;
					Match(LBRACKET);
					State = 1359;
					Match(RBRACKET);
					}
					}
					State = 1362;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LBRACKET );
				State = 1364;
				arrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SynchronizedStatementContext synchronizedStatement() {
			return GetRuleContext<SynchronizedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 208, RULE_statement);
		try {
			State = 1385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1367;
				labeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1368;
				assertStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1369;
				block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1370;
				emptyStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1371;
				statementExpression();
				State = 1372;
				Match(SEMICOLON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1374;
				switchStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1375;
				ifStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1376;
				whileStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1377;
				doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1378;
				forStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1379;
				breakStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1380;
				continueStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1381;
				returnStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1382;
				throwStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1383;
				synchronizedStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1384;
				tryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(JavaccParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_assertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1387;
			Match(ASSERT);
			State = 1388;
			expression();
			State = 1391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1389;
				Match(COLON);
				State = 1390;
				expression();
				}
			}

			State = 1393;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395;
			javaIdentifier();
			State = 1396;
			Match(COLON);
			State = 1397;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 214, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399;
			Match(LBRACE);
			State = 1403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4677332412173131904L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 54184232625895423L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 1400;
				blockStatement();
				}
				}
				State = 1405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1406;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceDeclarationContext classOrInterfaceDeclaration() {
			return GetRuleContext<ClassOrInterfaceDeclarationContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_blockStatement);
		try {
			State = 1413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1408;
				localVariableDeclaration();
				State = 1409;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1411;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1412;
				classOrInterfaceDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 218, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415;
			modifiers();
			State = 1416;
			type();
			State = 1417;
			variableDeclarator();
			State = 1422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1418;
				Match(COMMA);
				State = 1419;
				variableDeclarator();
				}
				}
				State = 1424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 220, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCR() { return GetToken(JavaccParser.INCR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECR() { return GetToken(JavaccParser.DECR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 222, RULE_statementExpression);
		try {
			State = 1437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1427;
				preIncrementExpression();
				}
				break;
			case DECR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1428;
				preDecrementExpression();
				}
				break;
			case LOOKAHEAD:
			case IGNORE_CASE:
			case PARSER_BEGIN:
			case PARSER_END:
			case JAVACODE:
			case TOKEN:
			case SPECIAL_TOKEN:
			case MORE_:
			case SKIP_:
			case TOKEN_MGR_DECLS:
			case EOF_:
			case DCL_PARSER_BEGIN:
			case DCL_PARSER_END:
			case INC_PARSER_BEGIN:
			case INC_PARSER_END:
			case DEF_PARSER_BEGIN:
			case DEF_PARSER_END:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CONST:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case NULL:
			case SHORT:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
			case TEMPLATE:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case LPAREN:
			case DOUBLECOLON:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1429;
				primaryExpression();
				State = 1435;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INCR:
					{
					State = 1430;
					Match(INCR);
					}
					break;
				case DECR:
					{
					State = 1431;
					Match(DECR);
					}
					break;
				case T__2:
				case T__3:
				case T__4:
				case ASSIGN:
				case PLUSASSIGN:
				case MINUSASSIGN:
				case STARASSIGN:
				case SLASHASSIGN:
				case ANDASSIGN:
				case ORASSIGN:
				case XORASSIGN:
				case REMASSIGN:
					{
					State = 1432;
					assignmentOperator();
					State = 1433;
					expression();
					}
					break;
				case RPAREN:
				case SEMICOLON:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(JavaccParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 224, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439;
			Match(SWITCH);
			State = 1440;
			Match(LPAREN);
			State = 1441;
			expression();
			State = 1442;
			Match(RPAREN);
			State = 1443;
			Match(LBRACE);
			State = 1453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1444;
				switchLabel();
				State = 1448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4677332412173131904L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 54184232625895423L) != 0) || _la==IDENTIFIER) {
					{
					{
					State = 1445;
					blockStatement();
					}
					}
					State = 1450;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 1455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1456;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(JavaccParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JavaccParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 226, RULE_switchLabel);
		try {
			State = 1464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1458;
				Match(CASE);
				State = 1459;
				expression();
				State = 1460;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1462;
				Match(DEFAULT);
				State = 1463;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(JavaccParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(JavaccParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 228, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466;
			Match(IF);
			State = 1467;
			Match(LPAREN);
			State = 1468;
			expression();
			State = 1469;
			Match(RPAREN);
			State = 1470;
			statement();
			State = 1473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				State = 1471;
				Match(ELSE);
				State = 1472;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(JavaccParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 230, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475;
			Match(WHILE);
			State = 1476;
			Match(LPAREN);
			State = 1477;
			expression();
			State = 1478;
			Match(RPAREN);
			State = 1479;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(JavaccParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(JavaccParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481;
			Match(DO);
			State = 1482;
			statement();
			State = 1483;
			Match(WHILE);
			State = 1484;
			Match(LPAREN);
			State = 1485;
			expression();
			State = 1486;
			Match(RPAREN);
			State = 1487;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(JavaccParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaccParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(JavaccParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(JavaccParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 234, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489;
			Match(FOR);
			State = 1490;
			Match(LPAREN);
			State = 1508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1491;
				modifiers();
				State = 1492;
				type();
				State = 1493;
				javaIdentifier();
				State = 1494;
				Match(COLON);
				State = 1495;
				expression();
				}
				break;
			case 2:
				{
				State = 1498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4827079991369932928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 54183940567970683L) != 0) || _la==IDENTIFIER) {
					{
					State = 1497;
					forInit();
					}
				}

				State = 1500;
				Match(SEMICOLON);
				State = 1502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3819690555156193024L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 33797888870093897L) != 0) || _la==IDENTIFIER) {
					{
					State = 1501;
					expression();
					}
				}

				State = 1504;
				Match(SEMICOLON);
				State = 1506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3819690555156193024L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 6772992570987593L) != 0) || _la==IDENTIFIER) {
					{
					State = 1505;
					forUpdate();
					}
				}

				}
				break;
			}
			State = 1510;
			Match(RPAREN);
			State = 1511;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 236, RULE_forInit);
		try {
			State = 1515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1513;
				localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1514;
				statementExpressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext[] statementExpression() {
			return GetRuleContexts<StatementExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionContext statementExpression(int i) {
			return GetRuleContext<StatementExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public StatementExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterStatementExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitStatementExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionListContext statementExpressionList() {
		StatementExpressionListContext _localctx = new StatementExpressionListContext(Context, State);
		EnterRule(_localctx, 238, RULE_statementExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517;
			statementExpression();
			State = 1522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1518;
				Match(COMMA);
				State = 1519;
				statementExpression();
				}
				}
				State = 1524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(Context, State);
		EnterRule(_localctx, 240, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525;
			statementExpressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(JavaccParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 242, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527;
			Match(BREAK);
			State = 1529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67100416L) != 0) || _la==TEMPLATE || _la==IDENTIFIER) {
				{
				State = 1528;
				javaIdentifier();
				}
			}

			State = 1531;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(JavaccParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 244, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533;
			Match(CONTINUE);
			State = 1535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67100416L) != 0) || _la==TEMPLATE || _la==IDENTIFIER) {
				{
				State = 1534;
				javaIdentifier();
				}
			}

			State = 1537;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(JavaccParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 246, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1539;
			Match(RETURN);
			State = 1541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3819690555156193024L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 33797888870093897L) != 0) || _la==IDENTIFIER) {
				{
				State = 1540;
				expression();
				}
			}

			State = 1543;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(JavaccParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 248, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545;
			Match(THROW);
			State = 1546;
			expression();
			State = 1547;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynchronizedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED() { return GetToken(JavaccParser.SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SynchronizedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synchronizedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterSynchronizedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitSynchronizedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynchronizedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SynchronizedStatementContext synchronizedStatement() {
		SynchronizedStatementContext _localctx = new SynchronizedStatementContext(Context, State);
		EnterRule(_localctx, 250, RULE_synchronizedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549;
			Match(SYNCHRONIZED);
			State = 1550;
			Match(LPAREN);
			State = 1551;
			expression();
			State = 1552;
			Match(RPAREN);
			State = 1553;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaccParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResourceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterResourceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitResourceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceDeclarationContext resourceDeclaration() {
		ResourceDeclarationContext _localctx = new ResourceDeclarationContext(Context, State);
		EnterRule(_localctx, 252, RULE_resourceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555;
			type();
			State = 1556;
			variableDeclaratorId();
			State = 1557;
			Match(ASSIGN);
			State = 1558;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR() { return GetTokens(JavaccParser.BIT_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR(int i) {
			return GetToken(JavaccParser.BIT_OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(JavaccParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(JavaccParser.STAR, 0); }
		public CatchParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterCatchParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitCatchParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchParameterContext catchParameter() {
		CatchParameterContext _localctx = new CatchParameterContext(Context, State);
		EnterRule(_localctx, 254, RULE_catchParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560;
			modifiers();
			State = 1561;
			type();
			State = 1564;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
			case BIT_AND:
				{
				State = 1562;
				_la = TokenStream.LA(1);
				if ( !(_la==STAR || _la==BIT_AND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__1:
				{
				State = 1563;
				Match(T__1);
				}
				break;
			case LOOKAHEAD:
			case IGNORE_CASE:
			case PARSER_BEGIN:
			case PARSER_END:
			case JAVACODE:
			case TOKEN:
			case SPECIAL_TOKEN:
			case MORE_:
			case SKIP_:
			case TOKEN_MGR_DECLS:
			case EOF_:
			case DCL_PARSER_BEGIN:
			case DCL_PARSER_END:
			case INC_PARSER_BEGIN:
			case INC_PARSER_END:
			case DEF_PARSER_BEGIN:
			case DEF_PARSER_END:
			case TEMPLATE:
			case BIT_OR:
			case IDENTIFIER:
				break;
			default:
				break;
			}
			State = 1570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BIT_OR) {
				{
				{
				State = 1566;
				Match(BIT_OR);
				State = 1567;
				type();
				}
				}
				State = 1572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1573;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(JavaccParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(JavaccParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(JavaccParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceDeclarationContext[] resourceDeclaration() {
			return GetRuleContexts<ResourceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceDeclarationContext resourceDeclaration(int i) {
			return GetRuleContext<ResourceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(JavaccParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(JavaccParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(JavaccParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(JavaccParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchParameterContext[] catchParameter() {
			return GetRuleContexts<CatchParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchParameterContext catchParameter(int i) {
			return GetRuleContext<CatchParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(JavaccParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(JavaccParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(JavaccParser.SEMICOLON, i);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 256, RULE_tryStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1575;
			Match(TRY);
			State = 1590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1576;
				Match(LPAREN);
				State = 1577;
				resourceDeclaration();
				State = 1582;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1578;
						Match(SEMICOLON);
						State = 1579;
						resourceDeclaration();
						}
						} 
					}
					State = 1584;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				}
				State = 1586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 1585;
					Match(SEMICOLON);
					}
				}

				State = 1588;
				Match(RPAREN);
				}
			}

			State = 1592;
			block();
			State = 1601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 1593;
				Match(CATCH);
				State = 1594;
				Match(LPAREN);
				State = 1595;
				catchParameter();
				State = 1596;
				Match(RPAREN);
				State = 1597;
				block();
				}
				}
				State = 1603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 1604;
				Match(FINALLY);
				State = 1605;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalAnnotationContext normalAnnotation() {
			return GetRuleContext<NormalAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleMemberAnnotationContext singleMemberAnnotation() {
			return GetRuleContext<SingleMemberAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MarkerAnnotationContext markerAnnotation() {
			return GetRuleContext<MarkerAnnotationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 258, RULE_annotation);
		try {
			State = 1611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1608;
				normalAnnotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1609;
				singleMemberAnnotation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1610;
				markerAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberValuePairsContext memberValuePairs() {
			return GetRuleContext<MemberValuePairsContext>(0);
		}
		public NormalAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterNormalAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitNormalAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalAnnotationContext normalAnnotation() {
		NormalAnnotationContext _localctx = new NormalAnnotationContext(Context, State);
		EnterRule(_localctx, 260, RULE_normalAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1613;
			Match(T__6);
			State = 1614;
			name();
			State = 1615;
			Match(LPAREN);
			State = 1617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67100416L) != 0) || _la==TEMPLATE || _la==IDENTIFIER) {
				{
				State = 1616;
				memberValuePairs();
				}
			}

			State = 1619;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public MarkerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterMarkerAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitMarkerAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerAnnotationContext markerAnnotation() {
		MarkerAnnotationContext _localctx = new MarkerAnnotationContext(Context, State);
		EnterRule(_localctx, 262, RULE_markerAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1621;
			Match(T__6);
			State = 1622;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleMemberAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		public SingleMemberAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleMemberAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterSingleMemberAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitSingleMemberAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleMemberAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleMemberAnnotationContext singleMemberAnnotation() {
		SingleMemberAnnotationContext _localctx = new SingleMemberAnnotationContext(Context, State);
		EnterRule(_localctx, 264, RULE_singleMemberAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			Match(T__6);
			State = 1625;
			name();
			State = 1626;
			Match(LPAREN);
			State = 1627;
			memberValue();
			State = 1628;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValuePairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberValuePairContext[] memberValuePair() {
			return GetRuleContexts<MemberValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberValuePairContext memberValuePair(int i) {
			return GetRuleContext<MemberValuePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public MemberValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValuePairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterMemberValuePairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitMemberValuePairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValuePairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValuePairsContext memberValuePairs() {
		MemberValuePairsContext _localctx = new MemberValuePairsContext(Context, State);
		EnterRule(_localctx, 266, RULE_memberValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630;
			memberValuePair();
			State = 1635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1631;
				Match(COMMA);
				State = 1632;
				memberValuePair();
				}
				}
				State = 1637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaccParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		public MemberValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterMemberValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitMemberValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValuePairContext memberValuePair() {
		MemberValuePairContext _localctx = new MemberValuePairContext(Context, State);
		EnterRule(_localctx, 268, RULE_memberValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638;
			javaIdentifier();
			State = 1639;
			Match(ASSIGN);
			State = 1640;
			memberValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueArrayInitializerContext memberValueArrayInitializer() {
			return GetRuleContext<MemberValueArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public MemberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterMemberValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitMemberValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValueContext memberValue() {
		MemberValueContext _localctx = new MemberValueContext(Context, State);
		EnterRule(_localctx, 270, RULE_memberValue);
		try {
			State = 1645;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1642;
				annotation();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1643;
				memberValueArrayInitializer();
				}
				break;
			case LOOKAHEAD:
			case IGNORE_CASE:
			case PARSER_BEGIN:
			case PARSER_END:
			case JAVACODE:
			case TOKEN:
			case SPECIAL_TOKEN:
			case MORE_:
			case SKIP_:
			case TOKEN_MGR_DECLS:
			case EOF_:
			case DCL_PARSER_BEGIN:
			case DCL_PARSER_END:
			case INC_PARSER_BEGIN:
			case INC_PARSER_END:
			case DEF_PARSER_BEGIN:
			case DEF_PARSER_END:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CONST:
			case DOUBLE:
			case FALSE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case NULL:
			case SHORT:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
			case TEMPLATE:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case LPAREN:
			case BANG:
			case TILDE:
			case DOUBLECOLON:
			case INCR:
			case DECR:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1644;
				conditionalExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValueArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext[] memberValue() {
			return GetRuleContexts<MemberValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext memberValue(int i) {
			return GetRuleContext<MemberValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaccParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaccParser.COMMA, i);
		}
		public MemberValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValueArrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterMemberValueArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitMemberValueArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValueArrayInitializerContext memberValueArrayInitializer() {
		MemberValueArrayInitializerContext _localctx = new MemberValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 272, RULE_memberValueArrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1647;
			Match(LBRACE);
			State = 1648;
			memberValue();
			State = 1653;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1649;
					Match(COMMA);
					State = 1650;
					memberValue();
					}
					} 
				}
				State = 1655;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			}
			State = 1657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1656;
				Match(COMMA);
				}
			}

			State = 1659;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(JavaccParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 274, RULE_annotationTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661;
			Match(T__6);
			State = 1662;
			Match(INTERFACE);
			State = 1663;
			javaIdentifier();
			State = 1664;
			annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaccParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaccParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeMemberDeclarationContext[] annotationTypeMemberDeclaration() {
			return GetRuleContexts<AnnotationTypeMemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration(int i) {
			return GetRuleContext<AnnotationTypeMemberDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(Context, State);
		EnterRule(_localctx, 276, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1666;
			Match(LBRACE);
			State = 1670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8141782231178805120L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 141012366594363L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 1667;
				annotationTypeMemberDeclaration();
				}
				}
				State = 1672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1673;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JavaIdentifierContext javaIdentifier() {
			return GetRuleContext<JavaIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaccParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaccParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(JavaccParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceDeclarationContext classOrInterfaceDeclaration() {
			return GetRuleContext<ClassOrInterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationTypeMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration() {
		AnnotationTypeMemberDeclarationContext _localctx = new AnnotationTypeMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 278, RULE_annotationTypeMemberDeclaration);
		int _la;
		try {
			State = 1692;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOLATILE:
			case TEMPLATE:
			case DOUBLECOLON:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1675;
				modifiers();
				State = 1689;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
				case 1:
					{
					State = 1676;
					type();
					State = 1677;
					javaIdentifier();
					State = 1678;
					Match(LPAREN);
					State = 1679;
					Match(RPAREN);
					State = 1681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DEFAULT) {
						{
						State = 1680;
						defaultValue();
						}
					}

					State = 1683;
					Match(SEMICOLON);
					}
					break;
				case 2:
					{
					State = 1685;
					classOrInterfaceDeclaration();
					}
					break;
				case 3:
					{
					State = 1686;
					enumDeclaration();
					}
					break;
				case 4:
					{
					State = 1687;
					annotationTypeDeclaration();
					}
					break;
				case 5:
					{
					State = 1688;
					fieldDeclaration();
					}
					break;
				}
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1691;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JavaccParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaccListener typedListener = listener as IJavaccListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaccVisitor<TResult> typedVisitor = visitor as IJavaccVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 280, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694;
			Match(DEFAULT);
			State = 1695;
			memberValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,139,1698,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,4,2,301,8,2,11,2,12,2,302,1,2,1,2,1,3,1,3,1,3,5,3,310,8,3,10,3,12,3,
		313,9,3,1,3,3,3,316,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,324,8,4,1,4,1,4,1,
		5,1,5,1,5,1,5,5,5,332,8,5,10,5,12,5,335,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		6,3,6,344,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,354,8,7,10,7,12,7,357,
		9,7,3,7,359,8,7,1,7,3,7,362,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,5,8,375,8,8,10,8,12,8,378,9,8,3,8,380,8,8,1,8,1,8,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,5,9,391,8,9,10,9,12,9,394,9,9,3,9,396,8,9,1,9,3,9,399,8,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,3,10,408,8,10,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,5,11,417,8,11,10,11,12,11,420,9,11,1,11,3,11,423,8,11,1,11,1,
		11,1,11,1,11,3,11,429,8,11,1,11,1,11,1,11,1,11,1,11,5,11,436,8,11,10,11,
		12,11,439,9,11,1,11,1,11,1,12,1,12,1,12,3,12,446,8,12,1,13,1,13,1,14,1,
		14,3,14,452,8,14,1,14,1,14,3,14,456,8,14,1,15,1,15,1,15,5,15,461,8,15,
		10,15,12,15,464,9,15,1,16,1,16,1,16,1,16,1,16,3,16,471,8,16,1,16,1,16,
		3,16,475,8,16,4,16,477,8,16,11,16,12,16,478,1,17,3,17,482,8,17,1,17,3,
		17,485,8,17,1,17,3,17,488,8,17,1,17,3,17,491,8,17,1,17,1,17,3,17,495,8,
		17,1,17,3,17,498,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,519,8,18,1,18,1,18,5,
		18,523,8,18,10,18,12,18,526,9,18,1,18,1,18,3,18,530,8,18,1,18,1,18,1,18,
		3,18,535,8,18,1,18,1,18,3,18,539,8,18,1,18,1,18,1,18,1,18,1,18,3,18,546,
		8,18,3,18,548,8,18,1,18,1,18,1,18,1,18,3,18,554,8,18,3,18,556,8,18,1,19,
		1,19,1,19,3,19,561,8,19,1,19,1,19,1,19,3,19,566,8,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,578,8,19,1,20,1,20,1,20,5,20,583,
		8,20,10,20,12,20,586,9,20,1,21,4,21,589,8,21,11,21,12,21,590,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		3,22,609,8,22,3,22,611,8,22,1,22,1,22,3,22,615,8,22,3,22,617,8,22,1,23,
		3,23,620,8,23,1,23,1,23,1,23,1,23,5,23,626,8,23,10,23,12,23,629,9,23,3,
		23,631,8,23,1,23,1,23,1,24,1,24,1,24,3,24,638,8,24,1,25,1,25,1,26,1,26,
		1,26,1,26,3,26,646,8,26,1,26,1,26,1,26,3,26,651,8,26,1,27,5,27,654,8,27,
		10,27,12,27,657,9,27,1,27,1,27,1,27,1,27,3,27,663,8,27,1,28,1,28,1,29,
		3,29,668,8,29,1,29,5,29,671,8,29,10,29,12,29,674,9,29,1,29,5,29,677,8,
		29,10,29,12,29,680,9,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,3,31,689,8,
		31,1,31,1,31,1,31,3,31,694,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,3,32,710,8,32,5,32,712,8,32,10,32,12,32,
		715,9,32,1,33,1,33,1,33,1,33,1,33,3,33,722,8,33,3,33,724,8,33,1,34,1,34,
		1,34,3,34,729,8,34,1,34,3,34,732,8,34,1,34,3,34,735,8,34,1,34,1,34,1,35,
		1,35,1,35,1,35,5,35,743,8,35,10,35,12,35,746,9,35,1,36,1,36,1,36,1,36,
		5,36,752,8,36,10,36,12,36,755,9,36,1,37,1,37,1,37,3,37,760,8,37,1,37,1,
		37,1,38,1,38,1,38,1,38,5,38,768,8,38,10,38,12,38,771,9,38,3,38,773,8,38,
		1,38,3,38,776,8,38,1,38,1,38,5,38,780,8,38,10,38,12,38,783,9,38,3,38,785,
		8,38,1,38,1,38,1,39,1,39,1,39,3,39,792,8,39,1,39,3,39,795,8,39,1,40,1,
		40,1,40,1,40,5,40,801,8,40,10,40,12,40,804,9,40,1,40,1,40,1,41,1,41,3,
		41,810,8,41,1,42,1,42,1,42,1,42,5,42,816,8,42,10,42,12,42,819,9,42,1,43,
		1,43,5,43,823,8,43,10,43,12,43,826,9,43,1,43,1,43,1,44,1,44,1,44,1,44,
		1,44,1,44,1,44,3,44,837,8,44,1,44,3,44,840,8,44,1,45,1,45,1,45,1,45,5,
		45,846,8,45,10,45,12,45,849,9,45,1,45,1,45,1,46,1,46,1,46,3,46,856,8,46,
		1,47,1,47,1,47,5,47,861,8,47,10,47,12,47,864,9,47,1,48,1,48,3,48,868,8,
		48,1,49,1,49,1,49,1,49,5,49,874,8,49,10,49,12,49,877,9,49,3,49,879,8,49,
		1,49,3,49,882,8,49,1,49,1,49,1,50,3,50,887,8,50,1,50,1,50,1,50,1,50,3,
		50,893,8,50,1,50,1,50,3,50,897,8,50,1,51,1,51,1,51,1,51,5,51,903,8,51,
		10,51,12,51,906,9,51,1,52,1,52,1,52,1,52,5,52,912,8,52,10,52,12,52,915,
		9,52,3,52,917,8,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,925,8,53,1,53,1,
		53,1,54,3,54,930,8,54,1,54,1,54,1,54,1,54,3,54,936,8,54,1,54,1,54,3,54,
		940,8,54,1,54,5,54,943,8,54,10,54,12,54,946,9,54,1,54,1,54,1,55,1,55,1,
		55,1,55,1,55,1,55,1,55,3,55,957,8,55,1,55,1,55,1,55,1,55,3,55,963,8,55,
		1,56,3,56,966,8,56,1,56,1,56,1,57,1,57,3,57,972,8,57,1,58,1,58,1,58,4,
		58,977,8,58,11,58,12,58,978,1,58,3,58,982,8,58,1,58,1,58,1,58,1,58,5,58,
		988,8,58,10,58,12,58,991,9,58,3,58,993,8,58,1,59,1,59,1,59,1,59,1,59,5,
		59,1000,8,59,10,59,12,59,1003,9,59,1,59,1,59,1,60,1,60,3,60,1009,8,60,
		1,60,1,60,1,61,1,61,1,62,3,62,1016,8,62,1,62,1,62,3,62,1020,8,62,1,62,
		1,62,1,62,3,62,1025,8,62,5,62,1027,8,62,10,62,12,62,1030,9,62,1,63,1,63,
		1,63,1,63,1,63,3,63,1037,8,63,5,63,1039,8,63,10,63,12,63,1042,9,63,3,63,
		1044,8,63,1,63,1,63,1,64,1,64,1,64,3,64,1051,8,64,3,64,1053,8,64,1,65,
		1,65,1,65,1,65,3,65,1059,8,65,1,66,1,66,1,67,1,67,3,67,1065,8,67,1,67,
		3,67,1068,8,67,1,67,1,67,3,67,1072,8,67,3,67,1074,8,67,1,68,1,68,1,68,
		5,68,1079,8,68,10,68,12,68,1082,9,68,1,69,1,69,1,69,5,69,1087,8,69,10,
		69,12,69,1090,9,69,1,70,1,70,1,70,1,70,3,70,1096,8,70,1,71,1,71,1,72,1,
		72,1,72,1,72,1,72,1,72,3,72,1106,8,72,1,73,1,73,1,73,5,73,1111,8,73,10,
		73,12,73,1114,9,73,1,74,1,74,1,74,5,74,1119,8,74,10,74,12,74,1122,9,74,
		1,75,1,75,1,75,5,75,1127,8,75,10,75,12,75,1130,9,75,1,76,1,76,1,76,5,76,
		1135,8,76,10,76,12,76,1138,9,76,1,77,1,77,1,77,5,77,1143,8,77,10,77,12,
		77,1146,9,77,1,78,1,78,1,78,5,78,1151,8,78,10,78,12,78,1154,9,78,1,79,
		1,79,1,79,3,79,1159,8,79,1,80,1,80,1,80,5,80,1164,8,80,10,80,12,80,1167,
		9,80,1,81,1,81,1,81,1,81,3,81,1173,8,81,1,81,5,81,1176,8,81,10,81,12,81,
		1179,9,81,1,82,1,82,1,82,5,82,1184,8,82,10,82,12,82,1187,9,82,1,83,1,83,
		1,83,5,83,1192,8,83,10,83,12,83,1195,9,83,1,84,1,84,1,84,1,84,1,84,3,84,
		1202,8,84,1,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,1,87,3,87,1214,
		8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
		1,88,1,88,1,88,1,88,1,88,3,88,1234,8,88,3,88,1236,8,88,1,89,1,89,3,89,
		1240,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1252,
		8,90,1,91,1,91,5,91,1256,8,91,10,91,12,91,1259,9,91,1,92,1,92,1,92,1,92,
		1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
		1,93,3,93,1280,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
		1,94,1,94,3,94,1294,8,94,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1302,8,95,
		1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,3,100,1314,8,100,1,
		100,1,100,1,101,1,101,1,101,5,101,1321,8,101,10,101,12,101,1324,9,101,
		1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1333,8,102,1,102,1,102,
		1,102,3,102,1338,8,102,3,102,1340,8,102,3,102,1342,8,102,1,103,1,103,1,
		103,1,103,4,103,1348,8,103,11,103,12,103,1349,1,103,1,103,5,103,1354,8,
		103,10,103,12,103,1357,9,103,1,103,1,103,4,103,1361,8,103,11,103,12,103,
		1362,1,103,3,103,1366,8,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
		1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,
		1386,8,104,1,105,1,105,1,105,1,105,3,105,1392,8,105,1,105,1,105,1,106,
		1,106,1,106,1,106,1,107,1,107,5,107,1402,8,107,10,107,12,107,1405,9,107,
		1,107,1,107,1,108,1,108,1,108,1,108,1,108,3,108,1414,8,108,1,109,1,109,
		1,109,1,109,1,109,5,109,1421,8,109,10,109,12,109,1424,9,109,1,110,1,110,
		1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,1436,8,111,3,111,
		1438,8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,5,112,1447,8,112,
		10,112,12,112,1450,9,112,5,112,1452,8,112,10,112,12,112,1455,9,112,1,112,
		1,112,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1465,8,113,1,114,1,114,
		1,114,1,114,1,114,1,114,1,114,3,114,1474,8,114,1,115,1,115,1,115,1,115,
		1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,117,1,117,
		1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1499,8,117,1,117,1,117,
		3,117,1503,8,117,1,117,1,117,3,117,1507,8,117,3,117,1509,8,117,1,117,1,
		117,1,117,1,118,1,118,3,118,1516,8,118,1,119,1,119,1,119,5,119,1521,8,
		119,10,119,12,119,1524,9,119,1,120,1,120,1,121,1,121,3,121,1530,8,121,
		1,121,1,121,1,122,1,122,3,122,1536,8,122,1,122,1,122,1,123,1,123,3,123,
		1542,8,123,1,123,1,123,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,
		1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,1,127,3,127,
		1565,8,127,1,127,1,127,5,127,1569,8,127,10,127,12,127,1572,9,127,1,127,
		1,127,1,128,1,128,1,128,1,128,1,128,5,128,1581,8,128,10,128,12,128,1584,
		9,128,1,128,3,128,1587,8,128,1,128,1,128,3,128,1591,8,128,1,128,1,128,
		1,128,1,128,1,128,1,128,1,128,5,128,1600,8,128,10,128,12,128,1603,9,128,
		1,128,1,128,3,128,1607,8,128,1,129,1,129,1,129,3,129,1612,8,129,1,130,
		1,130,1,130,1,130,3,130,1618,8,130,1,130,1,130,1,131,1,131,1,131,1,132,
		1,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,5,133,1634,8,133,10,133,
		12,133,1637,9,133,1,134,1,134,1,134,1,134,1,135,1,135,1,135,3,135,1646,
		8,135,1,136,1,136,1,136,1,136,5,136,1652,8,136,10,136,12,136,1655,9,136,
		1,136,3,136,1658,8,136,1,136,1,136,1,137,1,137,1,137,1,137,1,137,1,138,
		1,138,5,138,1669,8,138,10,138,12,138,1672,9,138,1,138,1,138,1,139,1,139,
		1,139,1,139,1,139,1,139,3,139,1682,8,139,1,139,1,139,1,139,1,139,1,139,
		1,139,3,139,1690,8,139,1,139,3,139,1693,8,139,1,140,1,140,1,140,1,140,
		0,0,141,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
		204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
		240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
		276,278,280,0,20,3,0,8,10,68,68,137,137,1,0,63,65,1,0,14,17,3,0,109,109,
		120,120,122,122,2,0,79,79,137,137,1,0,96,96,4,0,8,12,14,25,82,82,137,137,
		2,0,37,37,57,57,2,0,122,122,124,124,2,0,37,37,83,83,2,0,104,104,111,111,
		8,0,31,31,33,33,36,36,42,42,49,49,56,56,58,58,67,67,3,0,3,5,105,105,128,
		135,2,0,112,112,115,115,3,0,106,106,113,114,136,136,1,0,120,121,2,0,122,
		123,127,127,1,0,107,108,1,0,118,119,2,0,46,46,77,77,1838,0,282,1,0,0,0,
		2,286,1,0,0,0,4,289,1,0,0,0,6,315,1,0,0,0,8,317,1,0,0,0,10,327,1,0,0,0,
		12,343,1,0,0,0,14,345,1,0,0,0,16,365,1,0,0,0,18,383,1,0,0,0,20,407,1,0,
		0,0,22,422,1,0,0,0,24,442,1,0,0,0,26,447,1,0,0,0,28,449,1,0,0,0,30,457,
		1,0,0,0,32,470,1,0,0,0,34,481,1,0,0,0,36,555,1,0,0,0,38,577,1,0,0,0,40,
		579,1,0,0,0,42,588,1,0,0,0,44,616,1,0,0,0,46,619,1,0,0,0,48,634,1,0,0,
		0,50,639,1,0,0,0,52,641,1,0,0,0,54,662,1,0,0,0,56,664,1,0,0,0,58,667,1,
		0,0,0,60,681,1,0,0,0,62,686,1,0,0,0,64,713,1,0,0,0,66,723,1,0,0,0,68,725,
		1,0,0,0,70,738,1,0,0,0,72,747,1,0,0,0,74,756,1,0,0,0,76,763,1,0,0,0,78,
		788,1,0,0,0,80,796,1,0,0,0,82,807,1,0,0,0,84,811,1,0,0,0,86,820,1,0,0,
		0,88,839,1,0,0,0,90,841,1,0,0,0,92,852,1,0,0,0,94,857,1,0,0,0,96,867,1,
		0,0,0,98,869,1,0,0,0,100,886,1,0,0,0,102,898,1,0,0,0,104,907,1,0,0,0,106,
		920,1,0,0,0,108,929,1,0,0,0,110,962,1,0,0,0,112,965,1,0,0,0,114,971,1,
		0,0,0,116,992,1,0,0,0,118,994,1,0,0,0,120,1006,1,0,0,0,122,1012,1,0,0,
		0,124,1015,1,0,0,0,126,1031,1,0,0,0,128,1052,1,0,0,0,130,1058,1,0,0,0,
		132,1060,1,0,0,0,134,1073,1,0,0,0,136,1075,1,0,0,0,138,1083,1,0,0,0,140,
		1091,1,0,0,0,142,1097,1,0,0,0,144,1099,1,0,0,0,146,1107,1,0,0,0,148,1115,
		1,0,0,0,150,1123,1,0,0,0,152,1131,1,0,0,0,154,1139,1,0,0,0,156,1147,1,
		0,0,0,158,1155,1,0,0,0,160,1160,1,0,0,0,162,1168,1,0,0,0,164,1180,1,0,
		0,0,166,1188,1,0,0,0,168,1201,1,0,0,0,170,1203,1,0,0,0,172,1206,1,0,0,
		0,174,1213,1,0,0,0,176,1235,1,0,0,0,178,1237,1,0,0,0,180,1251,1,0,0,0,
		182,1253,1,0,0,0,184,1260,1,0,0,0,186,1279,1,0,0,0,188,1293,1,0,0,0,190,
		1301,1,0,0,0,192,1303,1,0,0,0,194,1305,1,0,0,0,196,1307,1,0,0,0,198,1309,
		1,0,0,0,200,1311,1,0,0,0,202,1317,1,0,0,0,204,1341,1,0,0,0,206,1365,1,
		0,0,0,208,1385,1,0,0,0,210,1387,1,0,0,0,212,1395,1,0,0,0,214,1399,1,0,
		0,0,216,1413,1,0,0,0,218,1415,1,0,0,0,220,1425,1,0,0,0,222,1437,1,0,0,
		0,224,1439,1,0,0,0,226,1464,1,0,0,0,228,1466,1,0,0,0,230,1475,1,0,0,0,
		232,1481,1,0,0,0,234,1489,1,0,0,0,236,1515,1,0,0,0,238,1517,1,0,0,0,240,
		1525,1,0,0,0,242,1527,1,0,0,0,244,1533,1,0,0,0,246,1539,1,0,0,0,248,1545,
		1,0,0,0,250,1549,1,0,0,0,252,1555,1,0,0,0,254,1560,1,0,0,0,256,1575,1,
		0,0,0,258,1611,1,0,0,0,260,1613,1,0,0,0,262,1621,1,0,0,0,264,1624,1,0,
		0,0,266,1630,1,0,0,0,268,1638,1,0,0,0,270,1645,1,0,0,0,272,1647,1,0,0,
		0,274,1661,1,0,0,0,276,1666,1,0,0,0,278,1692,1,0,0,0,280,1694,1,0,0,0,
		282,283,5,136,0,0,283,284,5,136,0,0,284,285,5,136,0,0,285,1,1,0,0,0,286,
		287,5,136,0,0,287,288,5,136,0,0,288,3,1,0,0,0,289,290,3,6,3,0,290,291,
		5,10,0,0,291,292,5,96,0,0,292,293,3,50,25,0,293,294,5,97,0,0,294,295,3,
		58,29,0,295,296,5,11,0,0,296,297,5,96,0,0,297,298,3,50,25,0,298,300,5,
		97,0,0,299,301,3,12,6,0,300,299,1,0,0,0,301,302,1,0,0,0,302,300,1,0,0,
		0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,5,0,0,1,305,5,1,0,0,0,306,307,
		5,137,0,0,307,311,5,98,0,0,308,310,3,8,4,0,309,308,1,0,0,0,310,313,1,0,
		0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,
		316,5,99,0,0,315,306,1,0,0,0,315,316,1,0,0,0,316,7,1,0,0,0,317,318,7,0,
		0,0,318,323,5,105,0,0,319,324,3,192,96,0,320,324,3,194,97,0,321,324,3,
		196,98,0,322,324,3,10,5,0,323,319,1,0,0,0,323,320,1,0,0,0,323,321,1,0,
		0,0,323,322,1,0,0,0,324,325,1,0,0,0,325,326,5,102,0,0,326,9,1,0,0,0,327,
		328,5,96,0,0,328,333,3,196,98,0,329,330,5,103,0,0,330,332,3,196,98,0,331,
		329,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,
		0,0,0,335,333,1,0,0,0,336,337,5,97,0,0,337,11,1,0,0,0,338,344,3,14,7,0,
		339,344,3,16,8,0,340,344,3,22,11,0,341,344,3,24,12,0,342,344,3,18,9,0,
		343,338,1,0,0,0,343,339,1,0,0,0,343,340,1,0,0,0,343,341,1,0,0,0,343,342,
		1,0,0,0,344,13,1,0,0,0,345,346,5,12,0,0,346,347,3,134,67,0,347,348,3,50,
		25,0,348,358,3,104,52,0,349,350,5,75,0,0,350,355,3,136,68,0,351,352,5,
		103,0,0,352,354,3,136,68,0,353,351,1,0,0,0,354,357,1,0,0,0,355,353,1,0,
		0,0,355,356,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,358,349,1,0,0,0,358,
		359,1,0,0,0,359,361,1,0,0,0,360,362,3,52,26,0,361,360,1,0,0,0,361,362,
		1,0,0,0,362,363,1,0,0,0,363,364,3,214,107,0,364,15,1,0,0,0,365,366,5,13,
		0,0,366,367,3,20,10,0,367,368,3,134,67,0,368,369,3,50,25,0,369,379,3,104,
		52,0,370,371,5,75,0,0,371,376,3,136,68,0,372,373,5,103,0,0,373,375,3,136,
		68,0,374,372,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,
		380,1,0,0,0,378,376,1,0,0,0,379,370,1,0,0,0,379,380,1,0,0,0,380,381,1,
		0,0,0,381,382,3,214,107,0,382,17,1,0,0,0,383,384,3,134,67,0,384,385,3,
		50,25,0,385,395,3,104,52,0,386,387,5,75,0,0,387,392,3,136,68,0,388,389,
		5,103,0,0,389,391,3,136,68,0,390,388,1,0,0,0,391,394,1,0,0,0,392,390,1,
		0,0,0,392,393,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,395,386,1,0,0,0,
		395,396,1,0,0,0,396,398,1,0,0,0,397,399,3,52,26,0,398,397,1,0,0,0,398,
		399,1,0,0,0,399,400,1,0,0,0,400,401,5,110,0,0,401,402,3,214,107,0,402,
		403,5,98,0,0,403,404,3,30,15,0,404,405,5,99,0,0,405,19,1,0,0,0,406,408,
		7,1,0,0,407,406,1,0,0,0,407,408,1,0,0,0,408,21,1,0,0,0,409,410,5,106,0,
		0,410,411,5,122,0,0,411,423,5,136,0,0,412,413,5,106,0,0,413,418,5,137,
		0,0,414,415,5,103,0,0,415,417,5,137,0,0,416,414,1,0,0,0,417,420,1,0,0,
		0,418,416,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,
		423,5,136,0,0,422,409,1,0,0,0,422,412,1,0,0,0,422,423,1,0,0,0,423,424,
		1,0,0,0,424,428,3,26,13,0,425,426,5,100,0,0,426,427,5,9,0,0,427,429,5,
		101,0,0,428,425,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,431,5,110,
		0,0,431,432,5,98,0,0,432,437,3,28,14,0,433,434,5,125,0,0,434,436,3,28,
		14,0,435,433,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,
		440,1,0,0,0,439,437,1,0,0,0,440,441,5,99,0,0,441,23,1,0,0,0,442,443,5,
		18,0,0,443,445,5,110,0,0,444,446,3,86,43,0,445,444,1,0,0,0,445,446,1,0,
		0,0,446,25,1,0,0,0,447,448,7,2,0,0,448,27,1,0,0,0,449,451,3,38,19,0,450,
		452,3,214,107,0,451,450,1,0,0,0,451,452,1,0,0,0,452,455,1,0,0,0,453,454,
		5,110,0,0,454,456,5,137,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,29,1,0,
		0,0,457,462,3,32,16,0,458,459,5,125,0,0,459,461,3,32,16,0,460,458,1,0,
		0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,31,1,0,0,0,464,
		462,1,0,0,0,465,466,5,8,0,0,466,467,5,96,0,0,467,468,3,34,17,0,468,469,
		5,97,0,0,469,471,1,0,0,0,470,465,1,0,0,0,470,471,1,0,0,0,471,476,1,0,0,
		0,472,474,3,36,18,0,473,475,3,52,26,0,474,473,1,0,0,0,474,475,1,0,0,0,
		475,477,1,0,0,0,476,472,1,0,0,0,477,478,1,0,0,0,478,476,1,0,0,0,478,479,
		1,0,0,0,479,33,1,0,0,0,480,482,3,192,96,0,481,480,1,0,0,0,481,482,1,0,
		0,0,482,484,1,0,0,0,483,485,5,103,0,0,484,483,1,0,0,0,484,485,1,0,0,0,
		485,487,1,0,0,0,486,488,3,30,15,0,487,486,1,0,0,0,487,488,1,0,0,0,488,
		490,1,0,0,0,489,491,5,103,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,497,
		1,0,0,0,492,494,5,98,0,0,493,495,3,140,70,0,494,493,1,0,0,0,494,495,1,
		0,0,0,495,496,1,0,0,0,496,498,5,99,0,0,497,492,1,0,0,0,497,498,1,0,0,0,
		498,35,1,0,0,0,499,500,5,8,0,0,500,501,5,96,0,0,501,502,3,34,17,0,502,
		503,5,97,0,0,503,556,1,0,0,0,504,556,3,214,107,0,505,506,5,100,0,0,506,
		507,3,30,15,0,507,508,5,101,0,0,508,556,1,0,0,0,509,510,5,78,0,0,510,511,
		5,98,0,0,511,512,3,30,15,0,512,524,5,99,0,0,513,514,5,35,0,0,514,518,5,
		96,0,0,515,516,3,136,68,0,516,517,5,137,0,0,517,519,1,0,0,0,518,515,1,
		0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,521,5,97,0,0,521,523,3,214,107,
		0,522,513,1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,
		529,1,0,0,0,526,524,1,0,0,0,527,528,5,48,0,0,528,530,3,214,107,0,529,527,
		1,0,0,0,529,530,1,0,0,0,530,556,1,0,0,0,531,532,3,182,91,0,532,533,5,105,
		0,0,533,535,1,0,0,0,534,531,1,0,0,0,534,535,1,0,0,0,535,547,1,0,0,0,536,
		538,3,50,25,0,537,539,3,126,63,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,
		1,0,0,0,540,541,3,200,100,0,541,548,1,0,0,0,542,545,3,38,19,0,543,544,
		5,104,0,0,544,546,5,137,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,548,1,
		0,0,0,547,536,1,0,0,0,547,542,1,0,0,0,548,556,1,0,0,0,549,550,5,96,0,0,
		550,551,3,30,15,0,551,553,5,97,0,0,552,554,7,3,0,0,553,552,1,0,0,0,553,
		554,1,0,0,0,554,556,1,0,0,0,555,499,1,0,0,0,555,504,1,0,0,0,555,505,1,
		0,0,0,555,509,1,0,0,0,555,534,1,0,0,0,555,549,1,0,0,0,556,37,1,0,0,0,557,
		578,3,196,98,0,558,565,5,106,0,0,559,561,5,1,0,0,560,559,1,0,0,0,560,561,
		1,0,0,0,561,562,1,0,0,0,562,563,3,50,25,0,563,564,5,110,0,0,564,566,1,
		0,0,0,565,560,1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,568,3,40,20,
		0,568,569,5,136,0,0,569,578,1,0,0,0,570,571,5,106,0,0,571,572,3,50,25,
		0,572,573,5,136,0,0,573,578,1,0,0,0,574,575,5,106,0,0,575,576,5,19,0,0,
		576,578,5,136,0,0,577,557,1,0,0,0,577,558,1,0,0,0,577,570,1,0,0,0,577,
		574,1,0,0,0,578,39,1,0,0,0,579,584,3,42,21,0,580,581,5,125,0,0,581,583,
		3,42,21,0,582,580,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,0,
		0,0,585,41,1,0,0,0,586,584,1,0,0,0,587,589,3,44,22,0,588,587,1,0,0,0,589,
		590,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,43,1,0,0,0,592,617,3,196,
		98,0,593,594,5,106,0,0,594,595,3,50,25,0,595,596,5,136,0,0,596,617,1,0,
		0,0,597,617,3,46,23,0,598,599,5,96,0,0,599,600,3,40,20,0,600,614,5,97,
		0,0,601,615,5,120,0,0,602,615,5,122,0,0,603,615,5,109,0,0,604,605,5,98,
		0,0,605,610,3,192,96,0,606,608,5,103,0,0,607,609,3,192,96,0,608,607,1,
		0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,606,1,0,0,0,610,611,1,0,0,0,
		611,612,1,0,0,0,612,613,5,99,0,0,613,615,1,0,0,0,614,601,1,0,0,0,614,602,
		1,0,0,0,614,603,1,0,0,0,614,604,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,
		0,616,592,1,0,0,0,616,593,1,0,0,0,616,597,1,0,0,0,616,598,1,0,0,0,617,
		45,1,0,0,0,618,620,5,108,0,0,619,618,1,0,0,0,619,620,1,0,0,0,620,621,1,
		0,0,0,621,630,5,100,0,0,622,627,3,48,24,0,623,624,5,103,0,0,624,626,3,
		48,24,0,625,623,1,0,0,0,626,629,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,
		0,628,631,1,0,0,0,629,627,1,0,0,0,630,622,1,0,0,0,630,631,1,0,0,0,631,
		632,1,0,0,0,632,633,5,101,0,0,633,47,1,0,0,0,634,637,3,196,98,0,635,636,
		5,121,0,0,636,638,3,196,98,0,637,635,1,0,0,0,637,638,1,0,0,0,638,49,1,
		0,0,0,639,640,5,137,0,0,640,51,1,0,0,0,641,642,5,1,0,0,642,650,7,4,0,0,
		643,645,5,96,0,0,644,646,5,136,0,0,645,644,1,0,0,0,645,646,1,0,0,0,646,
		647,1,0,0,0,647,648,3,54,27,0,648,649,5,97,0,0,649,651,1,0,0,0,650,643,
		1,0,0,0,650,651,1,0,0,0,651,53,1,0,0,0,652,654,8,5,0,0,653,652,1,0,0,0,
		654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,663,1,0,0,0,657,655,
		1,0,0,0,658,659,5,96,0,0,659,660,3,54,27,0,660,661,5,97,0,0,661,663,1,
		0,0,0,662,655,1,0,0,0,662,658,1,0,0,0,663,55,1,0,0,0,664,665,7,6,0,0,665,
		57,1,0,0,0,666,668,3,60,30,0,667,666,1,0,0,0,667,668,1,0,0,0,668,672,1,
		0,0,0,669,671,3,62,31,0,670,669,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,
		0,672,673,1,0,0,0,673,678,1,0,0,0,674,672,1,0,0,0,675,677,3,66,33,0,676,
		675,1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,59,1,0,
		0,0,680,678,1,0,0,0,681,682,3,64,32,0,682,683,5,62,0,0,683,684,3,136,68,
		0,684,685,5,102,0,0,685,61,1,0,0,0,686,688,5,54,0,0,687,689,5,68,0,0,688,
		687,1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,693,3,136,68,0,691,692,
		5,104,0,0,692,694,5,122,0,0,693,691,1,0,0,0,693,694,1,0,0,0,694,695,1,
		0,0,0,695,696,5,102,0,0,696,63,1,0,0,0,697,710,5,65,0,0,698,710,5,68,0,
		0,699,710,5,64,0,0,700,710,5,63,0,0,701,710,5,47,0,0,702,710,5,29,0,0,
		703,710,5,72,0,0,704,710,5,59,0,0,705,710,5,76,0,0,706,710,5,80,0,0,707,
		710,5,69,0,0,708,710,3,258,129,0,709,697,1,0,0,0,709,698,1,0,0,0,709,699,
		1,0,0,0,709,700,1,0,0,0,709,701,1,0,0,0,709,702,1,0,0,0,709,703,1,0,0,
		0,709,704,1,0,0,0,709,705,1,0,0,0,709,706,1,0,0,0,709,707,1,0,0,0,709,
		708,1,0,0,0,710,712,1,0,0,0,711,709,1,0,0,0,712,715,1,0,0,0,713,711,1,
		0,0,0,713,714,1,0,0,0,714,65,1,0,0,0,715,713,1,0,0,0,716,724,5,102,0,0,
		717,721,3,64,32,0,718,722,3,68,34,0,719,722,3,74,37,0,720,722,3,274,137,
		0,721,718,1,0,0,0,721,719,1,0,0,0,721,720,1,0,0,0,722,724,1,0,0,0,723,
		716,1,0,0,0,723,717,1,0,0,0,724,67,1,0,0,0,725,726,7,7,0,0,726,728,3,56,
		28,0,727,729,3,80,40,0,728,727,1,0,0,0,728,729,1,0,0,0,729,731,1,0,0,0,
		730,732,3,70,35,0,731,730,1,0,0,0,731,732,1,0,0,0,732,734,1,0,0,0,733,
		735,3,72,36,0,734,733,1,0,0,0,734,735,1,0,0,0,735,736,1,0,0,0,736,737,
		3,86,43,0,737,69,1,0,0,0,738,739,5,45,0,0,739,744,3,124,62,0,740,741,5,
		103,0,0,741,743,3,124,62,0,742,740,1,0,0,0,743,746,1,0,0,0,744,742,1,0,
		0,0,744,745,1,0,0,0,745,71,1,0,0,0,746,744,1,0,0,0,747,748,5,53,0,0,748,
		753,3,124,62,0,749,750,5,103,0,0,750,752,3,124,62,0,751,749,1,0,0,0,752,
		755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,73,1,0,0,0,755,753,1,0,
		0,0,756,757,5,44,0,0,757,759,3,56,28,0,758,760,3,72,36,0,759,758,1,0,0,
		0,759,760,1,0,0,0,760,761,1,0,0,0,761,762,3,76,38,0,762,75,1,0,0,0,763,
		772,5,98,0,0,764,769,3,78,39,0,765,766,5,103,0,0,766,768,3,78,39,0,767,
		765,1,0,0,0,768,771,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,773,1,
		0,0,0,771,769,1,0,0,0,772,764,1,0,0,0,772,773,1,0,0,0,773,775,1,0,0,0,
		774,776,5,103,0,0,775,774,1,0,0,0,775,776,1,0,0,0,776,784,1,0,0,0,777,
		781,5,102,0,0,778,780,3,88,44,0,779,778,1,0,0,0,780,783,1,0,0,0,781,779,
		1,0,0,0,781,782,1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,784,777,1,0,0,
		0,784,785,1,0,0,0,785,786,1,0,0,0,786,787,5,99,0,0,787,77,1,0,0,0,788,
		789,3,64,32,0,789,791,3,56,28,0,790,792,3,200,100,0,791,790,1,0,0,0,791,
		792,1,0,0,0,792,794,1,0,0,0,793,795,3,86,43,0,794,793,1,0,0,0,794,795,
		1,0,0,0,795,79,1,0,0,0,796,797,5,106,0,0,797,802,3,82,41,0,798,799,5,103,
		0,0,799,801,3,82,41,0,800,798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,
		802,803,1,0,0,0,803,805,1,0,0,0,804,802,1,0,0,0,805,806,5,136,0,0,806,
		81,1,0,0,0,807,809,3,56,28,0,808,810,3,84,42,0,809,808,1,0,0,0,809,810,
		1,0,0,0,810,83,1,0,0,0,811,812,5,45,0,0,812,817,3,124,62,0,813,814,5,124,
		0,0,814,816,3,124,62,0,815,813,1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,
		817,818,1,0,0,0,818,85,1,0,0,0,819,817,1,0,0,0,820,824,5,98,0,0,821,823,
		3,88,44,0,822,821,1,0,0,0,823,826,1,0,0,0,824,822,1,0,0,0,824,825,1,0,
		0,0,825,827,1,0,0,0,826,824,1,0,0,0,827,828,5,99,0,0,828,87,1,0,0,0,829,
		840,3,112,56,0,830,836,3,64,32,0,831,837,3,68,34,0,832,837,3,74,37,0,833,
		837,3,108,54,0,834,837,3,90,45,0,835,837,3,100,50,0,836,831,1,0,0,0,836,
		832,1,0,0,0,836,833,1,0,0,0,836,834,1,0,0,0,836,835,1,0,0,0,837,840,1,
		0,0,0,838,840,5,102,0,0,839,829,1,0,0,0,839,830,1,0,0,0,839,838,1,0,0,
		0,840,89,1,0,0,0,841,842,3,114,57,0,842,847,3,92,46,0,843,844,5,103,0,
		0,844,846,3,92,46,0,845,843,1,0,0,0,846,849,1,0,0,0,847,845,1,0,0,0,847,
		848,1,0,0,0,848,850,1,0,0,0,849,847,1,0,0,0,850,851,5,102,0,0,851,91,1,
		0,0,0,852,855,3,94,47,0,853,854,5,105,0,0,854,856,3,96,48,0,855,853,1,
		0,0,0,855,856,1,0,0,0,856,93,1,0,0,0,857,862,3,56,28,0,858,859,5,100,0,
		0,859,861,5,101,0,0,860,858,1,0,0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,
		863,1,0,0,0,863,95,1,0,0,0,864,862,1,0,0,0,865,868,3,98,49,0,866,868,3,
		140,70,0,867,865,1,0,0,0,867,866,1,0,0,0,868,97,1,0,0,0,869,878,5,98,0,
		0,870,875,3,96,48,0,871,872,5,103,0,0,872,874,3,96,48,0,873,871,1,0,0,
		0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,879,1,0,0,0,877,
		875,1,0,0,0,878,870,1,0,0,0,878,879,1,0,0,0,879,881,1,0,0,0,880,882,5,
		103,0,0,881,880,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,884,5,99,0,
		0,884,99,1,0,0,0,885,887,3,80,40,0,886,885,1,0,0,0,886,887,1,0,0,0,887,
		888,1,0,0,0,888,889,3,134,67,0,889,892,3,102,51,0,890,891,5,75,0,0,891,
		893,3,138,69,0,892,890,1,0,0,0,892,893,1,0,0,0,893,896,1,0,0,0,894,897,
		3,214,107,0,895,897,5,102,0,0,896,894,1,0,0,0,896,895,1,0,0,0,897,101,
		1,0,0,0,898,899,3,56,28,0,899,904,3,104,52,0,900,901,5,100,0,0,901,903,
		5,101,0,0,902,900,1,0,0,0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,
		0,0,905,103,1,0,0,0,906,904,1,0,0,0,907,916,5,96,0,0,908,913,3,106,53,
		0,909,910,5,103,0,0,910,912,3,106,53,0,911,909,1,0,0,0,912,915,1,0,0,0,
		913,911,1,0,0,0,913,914,1,0,0,0,914,917,1,0,0,0,915,913,1,0,0,0,916,908,
		1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,919,5,97,0,0,919,105,1,0,0,
		0,920,921,3,64,32,0,921,924,3,114,57,0,922,925,7,8,0,0,923,925,5,2,0,0,
		924,922,1,0,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,926,1,0,0,0,926,927,
		3,94,47,0,927,107,1,0,0,0,928,930,3,80,40,0,929,928,1,0,0,0,929,930,1,
		0,0,0,930,931,1,0,0,0,931,932,3,56,28,0,932,935,3,104,52,0,933,934,5,75,
		0,0,934,936,3,138,69,0,935,933,1,0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,
		937,939,5,98,0,0,938,940,3,110,55,0,939,938,1,0,0,0,939,940,1,0,0,0,940,
		944,1,0,0,0,941,943,3,216,108,0,942,941,1,0,0,0,943,946,1,0,0,0,944,942,
		1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,944,1,0,0,0,947,948,5,99,0,
		0,948,109,1,0,0,0,949,950,5,73,0,0,950,951,3,200,100,0,951,952,5,102,0,
		0,952,963,1,0,0,0,953,954,3,182,91,0,954,955,5,104,0,0,955,957,1,0,0,0,
		956,953,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,959,5,70,0,0,959,960,
		3,200,100,0,960,961,5,102,0,0,961,963,1,0,0,0,962,949,1,0,0,0,962,956,
		1,0,0,0,963,111,1,0,0,0,964,966,5,68,0,0,965,964,1,0,0,0,965,966,1,0,0,
		0,966,967,1,0,0,0,967,968,3,214,107,0,968,113,1,0,0,0,969,972,3,116,58,
		0,970,972,3,132,66,0,971,969,1,0,0,0,971,970,1,0,0,0,972,115,1,0,0,0,973,
		976,3,132,66,0,974,975,5,100,0,0,975,977,5,101,0,0,976,974,1,0,0,0,977,
		978,1,0,0,0,978,976,1,0,0,0,978,979,1,0,0,0,979,993,1,0,0,0,980,982,3,
		118,59,0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,984,3,124,
		62,0,984,989,1,0,0,0,985,986,5,100,0,0,986,988,5,101,0,0,987,985,1,0,0,
		0,988,991,1,0,0,0,989,987,1,0,0,0,989,990,1,0,0,0,990,993,1,0,0,0,991,
		989,1,0,0,0,992,973,1,0,0,0,992,981,1,0,0,0,993,117,1,0,0,0,994,995,5,
		82,0,0,995,996,5,106,0,0,996,1001,3,120,60,0,997,998,5,103,0,0,998,1000,
		3,120,60,0,999,997,1,0,0,0,1000,1003,1,0,0,0,1001,999,1,0,0,0,1001,1002,
		1,0,0,0,1002,1004,1,0,0,0,1003,1001,1,0,0,0,1004,1005,5,136,0,0,1005,119,
		1,0,0,0,1006,1008,3,122,61,0,1007,1009,5,2,0,0,1008,1007,1,0,0,0,1008,
		1009,1,0,0,0,1009,1010,1,0,0,0,1010,1011,5,137,0,0,1011,121,1,0,0,0,1012,
		1013,7,9,0,0,1013,123,1,0,0,0,1014,1016,5,111,0,0,1015,1014,1,0,0,0,1015,
		1016,1,0,0,0,1016,1017,1,0,0,0,1017,1019,5,137,0,0,1018,1020,3,126,63,
		0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,1028,1,0,0,0,1021,1022,7,10,
		0,0,1022,1024,5,137,0,0,1023,1025,3,126,63,0,1024,1023,1,0,0,0,1024,1025,
		1,0,0,0,1025,1027,1,0,0,0,1026,1021,1,0,0,0,1027,1030,1,0,0,0,1028,1026,
		1,0,0,0,1028,1029,1,0,0,0,1029,125,1,0,0,0,1030,1028,1,0,0,0,1031,1043,
		5,106,0,0,1032,1040,3,128,64,0,1033,1034,5,103,0,0,1034,1036,3,128,64,
		0,1035,1037,5,2,0,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1039,1,0,
		0,0,1038,1033,1,0,0,0,1039,1042,1,0,0,0,1040,1038,1,0,0,0,1040,1041,1,
		0,0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1043,1032,1,0,0,0,1043,1044,
		1,0,0,0,1044,1045,1,0,0,0,1045,1046,5,136,0,0,1046,127,1,0,0,0,1047,1053,
		3,116,58,0,1048,1050,5,109,0,0,1049,1051,3,130,65,0,1050,1049,1,0,0,0,
		1050,1051,1,0,0,0,1051,1053,1,0,0,0,1052,1047,1,0,0,0,1052,1048,1,0,0,
		0,1053,129,1,0,0,0,1054,1055,5,45,0,0,1055,1059,3,116,58,0,1056,1057,5,
		70,0,0,1057,1059,3,116,58,0,1058,1054,1,0,0,0,1058,1056,1,0,0,0,1059,131,
		1,0,0,0,1060,1061,7,11,0,0,1061,133,1,0,0,0,1062,1064,5,79,0,0,1063,1065,
		5,122,0,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1074,1,0,0,0,1066,1068,
		5,38,0,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1071,
		3,114,57,0,1070,1072,7,8,0,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,
		1074,1,0,0,0,1073,1062,1,0,0,0,1073,1067,1,0,0,0,1074,135,1,0,0,0,1075,
		1080,3,56,28,0,1076,1077,5,104,0,0,1077,1079,3,56,28,0,1078,1076,1,0,0,
		0,1079,1082,1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,137,1,0,0,
		0,1082,1080,1,0,0,0,1083,1088,3,136,68,0,1084,1085,5,103,0,0,1085,1087,
		3,136,68,0,1086,1084,1,0,0,0,1087,1090,1,0,0,0,1088,1086,1,0,0,0,1088,
		1089,1,0,0,0,1089,139,1,0,0,0,1090,1088,1,0,0,0,1091,1095,3,144,72,0,1092,
		1093,3,142,71,0,1093,1094,3,140,70,0,1094,1096,1,0,0,0,1095,1092,1,0,0,
		0,1095,1096,1,0,0,0,1096,141,1,0,0,0,1097,1098,7,12,0,0,1098,143,1,0,0,
		0,1099,1105,3,146,73,0,1100,1101,5,109,0,0,1101,1102,3,140,70,0,1102,1103,
		5,110,0,0,1103,1104,3,140,70,0,1104,1106,1,0,0,0,1105,1100,1,0,0,0,1105,
		1106,1,0,0,0,1106,145,1,0,0,0,1107,1112,3,148,74,0,1108,1109,5,116,0,0,
		1109,1111,3,148,74,0,1110,1108,1,0,0,0,1111,1114,1,0,0,0,1112,1110,1,0,
		0,0,1112,1113,1,0,0,0,1113,147,1,0,0,0,1114,1112,1,0,0,0,1115,1120,3,150,
		75,0,1116,1117,5,117,0,0,1117,1119,3,150,75,0,1118,1116,1,0,0,0,1119,1122,
		1,0,0,0,1120,1118,1,0,0,0,1120,1121,1,0,0,0,1121,149,1,0,0,0,1122,1120,
		1,0,0,0,1123,1128,3,152,76,0,1124,1125,5,125,0,0,1125,1127,3,152,76,0,
		1126,1124,1,0,0,0,1127,1130,1,0,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,
		0,1129,151,1,0,0,0,1130,1128,1,0,0,0,1131,1136,3,154,77,0,1132,1133,5,
		126,0,0,1133,1135,3,154,77,0,1134,1132,1,0,0,0,1135,1138,1,0,0,0,1136,
		1134,1,0,0,0,1136,1137,1,0,0,0,1137,153,1,0,0,0,1138,1136,1,0,0,0,1139,
		1144,3,156,78,0,1140,1141,5,124,0,0,1141,1143,3,156,78,0,1142,1140,1,0,
		0,0,1143,1146,1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,155,1,0,
		0,0,1146,1144,1,0,0,0,1147,1152,3,158,79,0,1148,1149,7,13,0,0,1149,1151,
		3,158,79,0,1150,1148,1,0,0,0,1151,1154,1,0,0,0,1152,1150,1,0,0,0,1152,
		1153,1,0,0,0,1153,157,1,0,0,0,1154,1152,1,0,0,0,1155,1158,3,160,80,0,1156,
		1157,5,55,0,0,1157,1159,3,114,57,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,
		1159,159,1,0,0,0,1160,1165,3,162,81,0,1161,1162,7,14,0,0,1162,1164,3,162,
		81,0,1163,1161,1,0,0,0,1164,1167,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,
		0,0,0,1166,161,1,0,0,0,1167,1165,1,0,0,0,1168,1177,3,164,82,0,1169,1173,
		5,6,0,0,1170,1173,3,2,1,0,1171,1173,3,0,0,0,1172,1169,1,0,0,0,1172,1170,
		1,0,0,0,1172,1171,1,0,0,0,1173,1174,1,0,0,0,1174,1176,3,164,82,0,1175,
		1172,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,
		163,1,0,0,0,1179,1177,1,0,0,0,1180,1185,3,166,83,0,1181,1182,7,15,0,0,
		1182,1184,3,166,83,0,1183,1181,1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,
		0,0,1185,1186,1,0,0,0,1186,165,1,0,0,0,1187,1185,1,0,0,0,1188,1193,3,168,
		84,0,1189,1190,7,16,0,0,1190,1192,3,168,84,0,1191,1189,1,0,0,0,1192,1195,
		1,0,0,0,1193,1191,1,0,0,0,1193,1194,1,0,0,0,1194,167,1,0,0,0,1195,1193,
		1,0,0,0,1196,1197,7,15,0,0,1197,1202,3,168,84,0,1198,1202,3,170,85,0,1199,
		1202,3,172,86,0,1200,1202,3,174,87,0,1201,1196,1,0,0,0,1201,1198,1,0,0,
		0,1201,1199,1,0,0,0,1201,1200,1,0,0,0,1202,169,1,0,0,0,1203,1204,5,118,
		0,0,1204,1205,3,182,91,0,1205,171,1,0,0,0,1206,1207,5,119,0,0,1207,1208,
		3,182,91,0,1208,173,1,0,0,0,1209,1210,7,17,0,0,1210,1214,3,168,84,0,1211,
		1214,3,180,90,0,1212,1214,3,178,89,0,1213,1209,1,0,0,0,1213,1211,1,0,0,
		0,1213,1212,1,0,0,0,1214,175,1,0,0,0,1215,1216,5,96,0,0,1216,1236,3,132,
		66,0,1217,1218,5,96,0,0,1218,1219,3,114,57,0,1219,1220,5,100,0,0,1220,
		1221,5,101,0,0,1221,1236,1,0,0,0,1222,1223,5,96,0,0,1223,1224,3,114,57,
		0,1224,1233,5,97,0,0,1225,1234,5,108,0,0,1226,1234,5,107,0,0,1227,1234,
		5,96,0,0,1228,1234,3,56,28,0,1229,1234,5,73,0,0,1230,1234,5,70,0,0,1231,
		1234,5,60,0,0,1232,1234,3,190,95,0,1233,1225,1,0,0,0,1233,1226,1,0,0,0,
		1233,1227,1,0,0,0,1233,1228,1,0,0,0,1233,1229,1,0,0,0,1233,1230,1,0,0,
		0,1233,1231,1,0,0,0,1233,1232,1,0,0,0,1234,1236,1,0,0,0,1235,1215,1,0,
		0,0,1235,1217,1,0,0,0,1235,1222,1,0,0,0,1236,177,1,0,0,0,1237,1239,3,182,
		91,0,1238,1240,7,18,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,179,1,
		0,0,0,1241,1242,5,96,0,0,1242,1243,3,114,57,0,1243,1244,5,97,0,0,1244,
		1245,3,168,84,0,1245,1252,1,0,0,0,1246,1247,5,96,0,0,1247,1248,3,114,57,
		0,1248,1249,5,97,0,0,1249,1250,3,174,87,0,1250,1252,1,0,0,0,1251,1241,
		1,0,0,0,1251,1246,1,0,0,0,1252,181,1,0,0,0,1253,1257,3,186,93,0,1254,1256,
		3,188,94,0,1255,1254,1,0,0,0,1256,1259,1,0,0,0,1257,1255,1,0,0,0,1257,
		1258,1,0,0,0,1258,183,1,0,0,0,1259,1257,1,0,0,0,1260,1261,5,104,0,0,1261,
		1262,3,126,63,0,1262,1263,3,56,28,0,1263,185,1,0,0,0,1264,1280,3,190,95,
		0,1265,1280,5,73,0,0,1266,1267,5,70,0,0,1267,1268,5,104,0,0,1268,1280,
		3,56,28,0,1269,1270,5,96,0,0,1270,1271,3,140,70,0,1271,1272,5,97,0,0,1272,
		1280,1,0,0,0,1273,1280,3,204,102,0,1274,1275,3,134,67,0,1275,1276,5,104,
		0,0,1276,1277,5,37,0,0,1277,1280,1,0,0,0,1278,1280,3,136,68,0,1279,1264,
		1,0,0,0,1279,1265,1,0,0,0,1279,1266,1,0,0,0,1279,1269,1,0,0,0,1279,1273,
		1,0,0,0,1279,1274,1,0,0,0,1279,1278,1,0,0,0,1280,187,1,0,0,0,1281,1282,
		5,104,0,0,1282,1294,5,73,0,0,1283,1284,5,104,0,0,1284,1294,3,204,102,0,
		1285,1294,3,184,92,0,1286,1287,5,100,0,0,1287,1288,3,140,70,0,1288,1289,
		5,101,0,0,1289,1294,1,0,0,0,1290,1291,5,104,0,0,1291,1294,3,56,28,0,1292,
		1294,3,200,100,0,1293,1281,1,0,0,0,1293,1283,1,0,0,0,1293,1285,1,0,0,0,
		1293,1286,1,0,0,0,1293,1290,1,0,0,0,1293,1292,1,0,0,0,1294,189,1,0,0,0,
		1295,1302,5,84,0,0,1296,1302,5,89,0,0,1297,1302,5,94,0,0,1298,1302,5,95,
		0,0,1299,1302,3,194,97,0,1300,1302,3,198,99,0,1301,1295,1,0,0,0,1301,1296,
		1,0,0,0,1301,1297,1,0,0,0,1301,1298,1,0,0,0,1301,1299,1,0,0,0,1301,1300,
		1,0,0,0,1302,191,1,0,0,0,1303,1304,5,84,0,0,1304,193,1,0,0,0,1305,1306,
		7,19,0,0,1306,195,1,0,0,0,1307,1308,5,95,0,0,1308,197,1,0,0,0,1309,1310,
		5,61,0,0,1310,199,1,0,0,0,1311,1313,5,96,0,0,1312,1314,3,202,101,0,1313,
		1312,1,0,0,0,1313,1314,1,0,0,0,1314,1315,1,0,0,0,1315,1316,5,97,0,0,1316,
		201,1,0,0,0,1317,1322,3,140,70,0,1318,1319,5,103,0,0,1319,1321,3,140,70,
		0,1320,1318,1,0,0,0,1321,1324,1,0,0,0,1322,1320,1,0,0,0,1322,1323,1,0,
		0,0,1323,203,1,0,0,0,1324,1322,1,0,0,0,1325,1326,5,60,0,0,1326,1327,3,
		132,66,0,1327,1328,3,206,103,0,1328,1342,1,0,0,0,1329,1330,5,60,0,0,1330,
		1332,3,124,62,0,1331,1333,3,126,63,0,1332,1331,1,0,0,0,1332,1333,1,0,0,
		0,1333,1339,1,0,0,0,1334,1340,3,206,103,0,1335,1337,3,200,100,0,1336,1338,
		3,86,43,0,1337,1336,1,0,0,0,1337,1338,1,0,0,0,1338,1340,1,0,0,0,1339,1334,
		1,0,0,0,1339,1335,1,0,0,0,1340,1342,1,0,0,0,1341,1325,1,0,0,0,1341,1329,
		1,0,0,0,1342,205,1,0,0,0,1343,1344,5,100,0,0,1344,1345,3,140,70,0,1345,
		1346,5,101,0,0,1346,1348,1,0,0,0,1347,1343,1,0,0,0,1348,1349,1,0,0,0,1349,
		1347,1,0,0,0,1349,1350,1,0,0,0,1350,1355,1,0,0,0,1351,1352,5,100,0,0,1352,
		1354,5,101,0,0,1353,1351,1,0,0,0,1354,1357,1,0,0,0,1355,1353,1,0,0,0,1355,
		1356,1,0,0,0,1356,1366,1,0,0,0,1357,1355,1,0,0,0,1358,1359,5,100,0,0,1359,
		1361,5,101,0,0,1360,1358,1,0,0,0,1361,1362,1,0,0,0,1362,1360,1,0,0,0,1362,
		1363,1,0,0,0,1363,1364,1,0,0,0,1364,1366,3,98,49,0,1365,1347,1,0,0,0,1365,
		1360,1,0,0,0,1366,207,1,0,0,0,1367,1386,3,212,106,0,1368,1386,3,210,105,
		0,1369,1386,3,214,107,0,1370,1386,3,220,110,0,1371,1372,3,222,111,0,1372,
		1373,5,102,0,0,1373,1386,1,0,0,0,1374,1386,3,224,112,0,1375,1386,3,228,
		114,0,1376,1386,3,230,115,0,1377,1386,3,232,116,0,1378,1386,3,234,117,
		0,1379,1386,3,242,121,0,1380,1386,3,244,122,0,1381,1386,3,246,123,0,1382,
		1386,3,248,124,0,1383,1386,3,250,125,0,1384,1386,3,256,128,0,1385,1367,
		1,0,0,0,1385,1368,1,0,0,0,1385,1369,1,0,0,0,1385,1370,1,0,0,0,1385,1371,
		1,0,0,0,1385,1374,1,0,0,0,1385,1375,1,0,0,0,1385,1376,1,0,0,0,1385,1377,
		1,0,0,0,1385,1378,1,0,0,0,1385,1379,1,0,0,0,1385,1380,1,0,0,0,1385,1381,
		1,0,0,0,1385,1382,1,0,0,0,1385,1383,1,0,0,0,1385,1384,1,0,0,0,1386,209,
		1,0,0,0,1387,1388,5,30,0,0,1388,1391,3,140,70,0,1389,1390,5,110,0,0,1390,
		1392,3,140,70,0,1391,1389,1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,
		1393,1394,5,102,0,0,1394,211,1,0,0,0,1395,1396,3,56,28,0,1396,1397,5,110,
		0,0,1397,1398,3,208,104,0,1398,213,1,0,0,0,1399,1403,5,98,0,0,1400,1402,
		3,216,108,0,1401,1400,1,0,0,0,1402,1405,1,0,0,0,1403,1401,1,0,0,0,1403,
		1404,1,0,0,0,1404,1406,1,0,0,0,1405,1403,1,0,0,0,1406,1407,5,99,0,0,1407,
		215,1,0,0,0,1408,1409,3,218,109,0,1409,1410,5,102,0,0,1410,1414,1,0,0,
		0,1411,1414,3,208,104,0,1412,1414,3,68,34,0,1413,1408,1,0,0,0,1413,1411,
		1,0,0,0,1413,1412,1,0,0,0,1414,217,1,0,0,0,1415,1416,3,64,32,0,1416,1417,
		3,114,57,0,1417,1422,3,92,46,0,1418,1419,5,103,0,0,1419,1421,3,92,46,0,
		1420,1418,1,0,0,0,1421,1424,1,0,0,0,1422,1420,1,0,0,0,1422,1423,1,0,0,
		0,1423,219,1,0,0,0,1424,1422,1,0,0,0,1425,1426,5,102,0,0,1426,221,1,0,
		0,0,1427,1438,3,170,85,0,1428,1438,3,172,86,0,1429,1435,3,182,91,0,1430,
		1436,5,118,0,0,1431,1436,5,119,0,0,1432,1433,3,142,71,0,1433,1434,3,140,
		70,0,1434,1436,1,0,0,0,1435,1430,1,0,0,0,1435,1431,1,0,0,0,1435,1432,1,
		0,0,0,1435,1436,1,0,0,0,1436,1438,1,0,0,0,1437,1427,1,0,0,0,1437,1428,
		1,0,0,0,1437,1429,1,0,0,0,1438,223,1,0,0,0,1439,1440,5,71,0,0,1440,1441,
		5,96,0,0,1441,1442,3,140,70,0,1442,1443,5,97,0,0,1443,1453,5,98,0,0,1444,
		1448,3,226,113,0,1445,1447,3,216,108,0,1446,1445,1,0,0,0,1447,1450,1,0,
		0,0,1448,1446,1,0,0,0,1448,1449,1,0,0,0,1449,1452,1,0,0,0,1450,1448,1,
		0,0,0,1451,1444,1,0,0,0,1452,1455,1,0,0,0,1453,1451,1,0,0,0,1453,1454,
		1,0,0,0,1454,1456,1,0,0,0,1455,1453,1,0,0,0,1456,1457,5,99,0,0,1457,225,
		1,0,0,0,1458,1459,5,34,0,0,1459,1460,3,140,70,0,1460,1461,5,110,0,0,1461,
		1465,1,0,0,0,1462,1463,5,40,0,0,1463,1465,5,110,0,0,1464,1458,1,0,0,0,
		1464,1462,1,0,0,0,1465,227,1,0,0,0,1466,1467,5,52,0,0,1467,1468,5,96,0,
		0,1468,1469,3,140,70,0,1469,1470,5,97,0,0,1470,1473,3,208,104,0,1471,1472,
		5,43,0,0,1472,1474,3,208,104,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,
		229,1,0,0,0,1475,1476,5,81,0,0,1476,1477,5,96,0,0,1477,1478,3,140,70,0,
		1478,1479,5,97,0,0,1479,1480,3,208,104,0,1480,231,1,0,0,0,1481,1482,5,
		41,0,0,1482,1483,3,208,104,0,1483,1484,5,81,0,0,1484,1485,5,96,0,0,1485,
		1486,3,140,70,0,1486,1487,5,97,0,0,1487,1488,5,102,0,0,1488,233,1,0,0,
		0,1489,1490,5,50,0,0,1490,1508,5,96,0,0,1491,1492,3,64,32,0,1492,1493,
		3,114,57,0,1493,1494,3,56,28,0,1494,1495,5,110,0,0,1495,1496,3,140,70,
		0,1496,1509,1,0,0,0,1497,1499,3,236,118,0,1498,1497,1,0,0,0,1498,1499,
		1,0,0,0,1499,1500,1,0,0,0,1500,1502,5,102,0,0,1501,1503,3,140,70,0,1502,
		1501,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1506,5,102,0,0,1505,
		1507,3,240,120,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1509,1,0,0,0,
		1508,1491,1,0,0,0,1508,1498,1,0,0,0,1509,1510,1,0,0,0,1510,1511,5,97,0,
		0,1511,1512,3,208,104,0,1512,235,1,0,0,0,1513,1516,3,218,109,0,1514,1516,
		3,238,119,0,1515,1513,1,0,0,0,1515,1514,1,0,0,0,1516,237,1,0,0,0,1517,
		1522,3,222,111,0,1518,1519,5,103,0,0,1519,1521,3,222,111,0,1520,1518,1,
		0,0,0,1521,1524,1,0,0,0,1522,1520,1,0,0,0,1522,1523,1,0,0,0,1523,239,1,
		0,0,0,1524,1522,1,0,0,0,1525,1526,3,238,119,0,1526,241,1,0,0,0,1527,1529,
		5,32,0,0,1528,1530,3,56,28,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,1530,
		1531,1,0,0,0,1531,1532,5,102,0,0,1532,243,1,0,0,0,1533,1535,5,39,0,0,1534,
		1536,3,56,28,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,0,0,0,1537,
		1538,5,102,0,0,1538,245,1,0,0,0,1539,1541,5,66,0,0,1540,1542,3,140,70,
		0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,1544,5,102,
		0,0,1544,247,1,0,0,0,1545,1546,5,74,0,0,1546,1547,3,140,70,0,1547,1548,
		5,102,0,0,1548,249,1,0,0,0,1549,1550,5,72,0,0,1550,1551,5,96,0,0,1551,
		1552,3,140,70,0,1552,1553,5,97,0,0,1553,1554,3,214,107,0,1554,251,1,0,
		0,0,1555,1556,3,114,57,0,1556,1557,3,94,47,0,1557,1558,5,105,0,0,1558,
		1559,3,140,70,0,1559,253,1,0,0,0,1560,1561,3,64,32,0,1561,1564,3,114,57,
		0,1562,1565,7,8,0,0,1563,1565,5,2,0,0,1564,1562,1,0,0,0,1564,1563,1,0,
		0,0,1564,1565,1,0,0,0,1565,1570,1,0,0,0,1566,1567,5,125,0,0,1567,1569,
		3,114,57,0,1568,1566,1,0,0,0,1569,1572,1,0,0,0,1570,1568,1,0,0,0,1570,
		1571,1,0,0,0,1571,1573,1,0,0,0,1572,1570,1,0,0,0,1573,1574,3,94,47,0,1574,
		255,1,0,0,0,1575,1590,5,78,0,0,1576,1577,5,96,0,0,1577,1582,3,252,126,
		0,1578,1579,5,102,0,0,1579,1581,3,252,126,0,1580,1578,1,0,0,0,1581,1584,
		1,0,0,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,1586,1,0,0,0,1584,1582,
		1,0,0,0,1585,1587,5,102,0,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,
		1,0,0,0,1588,1589,5,97,0,0,1589,1591,1,0,0,0,1590,1576,1,0,0,0,1590,1591,
		1,0,0,0,1591,1592,1,0,0,0,1592,1601,3,214,107,0,1593,1594,5,35,0,0,1594,
		1595,5,96,0,0,1595,1596,3,254,127,0,1596,1597,5,97,0,0,1597,1598,3,214,
		107,0,1598,1600,1,0,0,0,1599,1593,1,0,0,0,1600,1603,1,0,0,0,1601,1599,
		1,0,0,0,1601,1602,1,0,0,0,1602,1606,1,0,0,0,1603,1601,1,0,0,0,1604,1605,
		5,48,0,0,1605,1607,3,214,107,0,1606,1604,1,0,0,0,1606,1607,1,0,0,0,1607,
		257,1,0,0,0,1608,1612,3,260,130,0,1609,1612,3,264,132,0,1610,1612,3,262,
		131,0,1611,1608,1,0,0,0,1611,1609,1,0,0,0,1611,1610,1,0,0,0,1612,259,1,
		0,0,0,1613,1614,5,7,0,0,1614,1615,3,136,68,0,1615,1617,5,96,0,0,1616,1618,
		3,266,133,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,1619,1,0,0,0,1619,
		1620,5,97,0,0,1620,261,1,0,0,0,1621,1622,5,7,0,0,1622,1623,3,136,68,0,
		1623,263,1,0,0,0,1624,1625,5,7,0,0,1625,1626,3,136,68,0,1626,1627,5,96,
		0,0,1627,1628,3,270,135,0,1628,1629,5,97,0,0,1629,265,1,0,0,0,1630,1635,
		3,268,134,0,1631,1632,5,103,0,0,1632,1634,3,268,134,0,1633,1631,1,0,0,
		0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1635,1636,1,0,0,0,1636,267,1,0,0,
		0,1637,1635,1,0,0,0,1638,1639,3,56,28,0,1639,1640,5,105,0,0,1640,1641,
		3,270,135,0,1641,269,1,0,0,0,1642,1646,3,258,129,0,1643,1646,3,272,136,
		0,1644,1646,3,144,72,0,1645,1642,1,0,0,0,1645,1643,1,0,0,0,1645,1644,1,
		0,0,0,1646,271,1,0,0,0,1647,1648,5,98,0,0,1648,1653,3,270,135,0,1649,1650,
		5,103,0,0,1650,1652,3,270,135,0,1651,1649,1,0,0,0,1652,1655,1,0,0,0,1653,
		1651,1,0,0,0,1653,1654,1,0,0,0,1654,1657,1,0,0,0,1655,1653,1,0,0,0,1656,
		1658,5,103,0,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,
		1660,5,99,0,0,1660,273,1,0,0,0,1661,1662,5,7,0,0,1662,1663,5,57,0,0,1663,
		1664,3,56,28,0,1664,1665,3,276,138,0,1665,275,1,0,0,0,1666,1670,5,98,0,
		0,1667,1669,3,278,139,0,1668,1667,1,0,0,0,1669,1672,1,0,0,0,1670,1668,
		1,0,0,0,1670,1671,1,0,0,0,1671,1673,1,0,0,0,1672,1670,1,0,0,0,1673,1674,
		5,99,0,0,1674,277,1,0,0,0,1675,1689,3,64,32,0,1676,1677,3,114,57,0,1677,
		1678,3,56,28,0,1678,1679,5,96,0,0,1679,1681,5,97,0,0,1680,1682,3,280,140,
		0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1684,5,102,
		0,0,1684,1690,1,0,0,0,1685,1690,3,68,34,0,1686,1690,3,74,37,0,1687,1690,
		3,274,137,0,1688,1690,3,90,45,0,1689,1676,1,0,0,0,1689,1685,1,0,0,0,1689,
		1686,1,0,0,0,1689,1687,1,0,0,0,1689,1688,1,0,0,0,1690,1693,1,0,0,0,1691,
		1693,5,102,0,0,1692,1675,1,0,0,0,1692,1691,1,0,0,0,1693,279,1,0,0,0,1694,
		1695,5,40,0,0,1695,1696,3,270,135,0,1696,281,1,0,0,0,201,302,311,315,323,
		333,343,355,358,361,376,379,392,395,398,407,418,422,428,437,445,451,455,
		462,470,474,478,481,484,487,490,494,497,518,524,529,534,538,545,547,553,
		555,560,565,577,584,590,608,610,614,616,619,627,630,637,645,650,655,662,
		667,672,678,688,693,709,713,721,723,728,731,734,744,753,759,769,772,775,
		781,784,791,794,802,809,817,824,836,839,847,855,862,867,875,878,881,886,
		892,896,904,913,916,924,929,935,939,944,956,962,965,971,978,981,989,992,
		1001,1008,1015,1019,1024,1028,1036,1040,1043,1050,1052,1058,1064,1067,
		1071,1073,1080,1088,1095,1105,1112,1120,1128,1136,1144,1152,1158,1165,
		1172,1177,1185,1193,1201,1213,1233,1235,1239,1251,1257,1279,1293,1301,
		1313,1322,1332,1337,1339,1341,1349,1355,1362,1365,1385,1391,1403,1413,
		1422,1435,1437,1448,1453,1464,1473,1498,1502,1506,1508,1515,1522,1529,
		1535,1541,1564,1570,1582,1586,1590,1601,1606,1611,1617,1635,1645,1653,
		1657,1670,1681,1689,1692
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
