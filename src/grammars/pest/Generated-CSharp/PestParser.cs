//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PestParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PestParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		UNDERSCORE=1, AT=2, DOLLAR=3, NOT=4, AMP=5, TILDE=6, VBAR=7, QUESTION=8, 
		STAR=9, PLUS=10, ASSIGNMENT_OPERATOR=11, OPENING_BRACE=12, CLOSING_BRACE=13, 
		OPENING_PAREN=14, CLOSING_PAREN=15, OPENING_BRACK=16, CLOSING_BRACK=17, 
		PUSH=18, PEEK=19, NUMBER=20, INTEGER=21, COMMA=22, IDENTIFIER=23, STRING=24, 
		INSENSITIVE_STRING=25, RANGE=26, CHARACTER=27, ESCAPE=28, CODE=29, UNICODE=30, 
		HEX_DIGIT=31, QUOTE=32, SINGLE_QUOTE=33, RANGE_OPERATOR=34, WHITESPACE=35, 
		BLOCK_COMMENT=36, COMMENT=37;
	public const int
		RULE_grammar_rules = 0, RULE_grammar_rule = 1, RULE_modifier = 2, RULE_silent_modifier = 3, 
		RULE_atomic_modifier = 4, RULE_compound_atomic_modifier = 5, RULE_non_atomic_modifier = 6, 
		RULE_expression = 7, RULE_term = 8, RULE_node = 9, RULE_terminal = 10, 
		RULE_prefix_operator = 11, RULE_infix_operator = 12, RULE_postfix_operator = 13, 
		RULE_positive_predicate_operator = 14, RULE_negative_predicate_operator = 15, 
		RULE_sequence_operator = 16, RULE_choice_operator = 17, RULE_optional_operator = 18, 
		RULE_repeat_operator = 19, RULE_repeat_once_operator = 20, RULE_repeat_exact = 21, 
		RULE_repeat_min = 22, RULE_repeat_max = 23, RULE_repeat_min_max = 24, 
		RULE_push = 25, RULE_peek_slice = 26;
	public static readonly string[] ruleNames = {
		"grammar_rules", "grammar_rule", "modifier", "silent_modifier", "atomic_modifier", 
		"compound_atomic_modifier", "non_atomic_modifier", "expression", "term", 
		"node", "terminal", "prefix_operator", "infix_operator", "postfix_operator", 
		"positive_predicate_operator", "negative_predicate_operator", "sequence_operator", 
		"choice_operator", "optional_operator", "repeat_operator", "repeat_once_operator", 
		"repeat_exact", "repeat_min", "repeat_max", "repeat_min_max", "push", 
		"peek_slice"
	};

	private static readonly string[] _LiteralNames = {
		null, "'_'", "'@'", "'$'", "'!'", "'&'", "'~'", "'|'", "'?'", "'*'", "'+'", 
		"'='", "'{'", "'}'", "'('", "')'", "'['", "']'", "'PUSH'", "'PEEK'", null, 
		null, "','", null, null, null, null, null, null, null, null, null, "'\"'", 
		"'''", "'..'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "UNDERSCORE", "AT", "DOLLAR", "NOT", "AMP", "TILDE", "VBAR", "QUESTION", 
		"STAR", "PLUS", "ASSIGNMENT_OPERATOR", "OPENING_BRACE", "CLOSING_BRACE", 
		"OPENING_PAREN", "CLOSING_PAREN", "OPENING_BRACK", "CLOSING_BRACK", "PUSH", 
		"PEEK", "NUMBER", "INTEGER", "COMMA", "IDENTIFIER", "STRING", "INSENSITIVE_STRING", 
		"RANGE", "CHARACTER", "ESCAPE", "CODE", "UNICODE", "HEX_DIGIT", "QUOTE", 
		"SINGLE_QUOTE", "RANGE_OPERATOR", "WHITESPACE", "BLOCK_COMMENT", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PestParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PestParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PestParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PestParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Grammar_rulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PestParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_ruleContext[] grammar_rule() {
			return GetRuleContexts<Grammar_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_ruleContext grammar_rule(int i) {
			return GetRuleContext<Grammar_ruleContext>(i);
		}
		public Grammar_rulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterGrammar_rules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitGrammar_rules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_rules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_rulesContext grammar_rules() {
		Grammar_rulesContext _localctx = new Grammar_rulesContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammar_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 54;
				grammar_rule();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 59;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PestParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT_OPERATOR() { return GetToken(PestParser.ASSIGNMENT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public Grammar_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterGrammar_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitGrammar_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_ruleContext grammar_rule() {
		Grammar_ruleContext _localctx = new Grammar_ruleContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammar_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(IDENTIFIER);
			State = 62;
			Match(ASSIGNMENT_OPERATOR);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30L) != 0)) {
				{
				State = 63;
				modifier();
				}
			}

			State = 66;
			Match(OPENING_BRACE);
			State = 67;
			expression();
			State = 68;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Silent_modifierContext silent_modifier() {
			return GetRuleContext<Silent_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Atomic_modifierContext atomic_modifier() {
			return GetRuleContext<Atomic_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_atomic_modifierContext compound_atomic_modifier() {
			return GetRuleContext<Compound_atomic_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_atomic_modifierContext non_atomic_modifier() {
			return GetRuleContext<Non_atomic_modifierContext>(0);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_modifier);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNDERSCORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				silent_modifier();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				atomic_modifier();
				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72;
				compound_atomic_modifier();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73;
				non_atomic_modifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Silent_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(PestParser.UNDERSCORE, 0); }
		public Silent_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_silent_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterSilent_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitSilent_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSilent_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Silent_modifierContext silent_modifier() {
		Silent_modifierContext _localctx = new Silent_modifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_silent_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(UNDERSCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atomic_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PestParser.AT, 0); }
		public Atomic_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterAtomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitAtomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_modifierContext atomic_modifier() {
		Atomic_modifierContext _localctx = new Atomic_modifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_atomic_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(AT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_atomic_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(PestParser.DOLLAR, 0); }
		public Compound_atomic_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_atomic_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterCompound_atomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitCompound_atomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_atomic_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_atomic_modifierContext compound_atomic_modifier() {
		Compound_atomic_modifierContext _localctx = new Compound_atomic_modifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_compound_atomic_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(DOLLAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_atomic_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PestParser.NOT, 0); }
		public Non_atomic_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_atomic_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterNon_atomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitNon_atomic_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_atomic_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_atomic_modifierContext non_atomic_modifier() {
		Non_atomic_modifierContext _localctx = new Non_atomic_modifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_non_atomic_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Infix_operatorContext[] infix_operator() {
			return GetRuleContexts<Infix_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Infix_operatorContext infix_operator(int i) {
			return GetRuleContext<Infix_operatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			term();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TILDE || _la==VBAR) {
				{
				{
				State = 85;
				infix_operator();
				State = 86;
				term();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node() {
			return GetRuleContext<NodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_operatorContext[] prefix_operator() {
			return GetRuleContexts<Prefix_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_operatorContext prefix_operator(int i) {
			return GetRuleContext<Prefix_operatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_operatorContext[] postfix_operator() {
			return GetRuleContexts<Postfix_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_operatorContext postfix_operator(int i) {
			return GetRuleContext<Postfix_operatorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 16, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NOT || _la==AMP) {
				{
				{
				State = 93;
				prefix_operator();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			node();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5888L) != 0)) {
				{
				{
				State = 100;
				postfix_operator();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_PAREN() { return GetToken(PestParser.OPENING_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_PAREN() { return GetToken(PestParser.CLOSING_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 18, RULE_node);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENING_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				Match(OPENING_PAREN);
				State = 107;
				expression();
				State = 108;
				Match(CLOSING_PAREN);
				}
				break;
			case PUSH:
			case PEEK:
			case IDENTIFIER:
			case STRING:
			case INSENSITIVE_STRING:
			case RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				terminal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PushContext push() {
			return GetRuleContext<PushContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Peek_sliceContext peek_slice() {
			return GetRuleContext<Peek_sliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PestParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PestParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE_STRING() { return GetToken(PestParser.INSENSITIVE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PestParser.RANGE, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 20, RULE_terminal);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PUSH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				push();
				}
				break;
			case PEEK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				peek_slice();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				Match(IDENTIFIER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 116;
				Match(STRING);
				}
				break;
			case INSENSITIVE_STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 117;
				Match(INSENSITIVE_STRING);
				}
				break;
			case RANGE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 118;
				Match(RANGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Positive_predicate_operatorContext positive_predicate_operator() {
			return GetRuleContext<Positive_predicate_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Negative_predicate_operatorContext negative_predicate_operator() {
			return GetRuleContext<Negative_predicate_operatorContext>(0);
		}
		public Prefix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPrefix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPrefix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_operatorContext prefix_operator() {
		Prefix_operatorContext _localctx = new Prefix_operatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_prefix_operator);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AMP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				positive_predicate_operator();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				negative_predicate_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Infix_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_operatorContext sequence_operator() {
			return GetRuleContext<Sequence_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Choice_operatorContext choice_operator() {
			return GetRuleContext<Choice_operatorContext>(0);
		}
		public Infix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infix_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterInfix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitInfix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfix_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Infix_operatorContext infix_operator() {
		Infix_operatorContext _localctx = new Infix_operatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_infix_operator);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				sequence_operator();
				}
				break;
			case VBAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				choice_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Optional_operatorContext optional_operator() {
			return GetRuleContext<Optional_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_operatorContext repeat_operator() {
			return GetRuleContext<Repeat_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_once_operatorContext repeat_once_operator() {
			return GetRuleContext<Repeat_once_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_exactContext repeat_exact() {
			return GetRuleContext<Repeat_exactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_minContext repeat_min() {
			return GetRuleContext<Repeat_minContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_maxContext repeat_max() {
			return GetRuleContext<Repeat_maxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_min_maxContext repeat_min_max() {
			return GetRuleContext<Repeat_min_maxContext>(0);
		}
		public Postfix_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPostfix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPostfix_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_operatorContext postfix_operator() {
		Postfix_operatorContext _localctx = new Postfix_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_postfix_operator);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				optional_operator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				repeat_operator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 131;
				repeat_once_operator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 132;
				repeat_exact();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 133;
				repeat_min();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 134;
				repeat_max();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 135;
				repeat_min_max();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positive_predicate_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(PestParser.AMP, 0); }
		public Positive_predicate_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positive_predicate_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPositive_predicate_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPositive_predicate_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositive_predicate_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Positive_predicate_operatorContext positive_predicate_operator() {
		Positive_predicate_operatorContext _localctx = new Positive_predicate_operatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_positive_predicate_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(AMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Negative_predicate_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PestParser.NOT, 0); }
		public Negative_predicate_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negative_predicate_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterNegative_predicate_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitNegative_predicate_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative_predicate_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Negative_predicate_operatorContext negative_predicate_operator() {
		Negative_predicate_operatorContext _localctx = new Negative_predicate_operatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_negative_predicate_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(PestParser.TILDE, 0); }
		public Sequence_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterSequence_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitSequence_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_operatorContext sequence_operator() {
		Sequence_operatorContext _localctx = new Sequence_operatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_sequence_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR() { return GetToken(PestParser.VBAR, 0); }
		public Choice_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterChoice_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitChoice_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_operatorContext choice_operator() {
		Choice_operatorContext _localctx = new Choice_operatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_choice_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(VBAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(PestParser.QUESTION, 0); }
		public Optional_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterOptional_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitOptional_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptional_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optional_operatorContext optional_operator() {
		Optional_operatorContext _localctx = new Optional_operatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_optional_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(QUESTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PestParser.STAR, 0); }
		public Repeat_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_operatorContext repeat_operator() {
		Repeat_operatorContext _localctx = new Repeat_operatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_repeat_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_once_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PestParser.PLUS, 0); }
		public Repeat_once_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_once_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_once_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_once_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_once_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_once_operatorContext repeat_once_operator() {
		Repeat_once_operatorContext _localctx = new Repeat_once_operatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_repeat_once_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_exactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PestParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		public Repeat_exactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_exact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_exact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_exact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_exact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_exactContext repeat_exact() {
		Repeat_exactContext _localctx = new Repeat_exactContext(Context, State);
		EnterRule(_localctx, 42, RULE_repeat_exact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(OPENING_BRACE);
			State = 153;
			Match(NUMBER);
			State = 154;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_minContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PestParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PestParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		public Repeat_minContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_min; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_min(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_min(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_min(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_minContext repeat_min() {
		Repeat_minContext _localctx = new Repeat_minContext(Context, State);
		EnterRule(_localctx, 44, RULE_repeat_min);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(OPENING_BRACE);
			State = 157;
			Match(NUMBER);
			State = 158;
			Match(COMMA);
			State = 159;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_maxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PestParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PestParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		public Repeat_maxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_max; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_max(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_maxContext repeat_max() {
		Repeat_maxContext _localctx = new Repeat_maxContext(Context, State);
		EnterRule(_localctx, 46, RULE_repeat_max);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(OPENING_BRACE);
			State = 162;
			Match(COMMA);
			State = 163;
			Match(NUMBER);
			State = 164;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_min_maxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACE() { return GetToken(PestParser.OPENING_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(PestParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(PestParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PestParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACE() { return GetToken(PestParser.CLOSING_BRACE, 0); }
		public Repeat_min_maxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_min_max; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterRepeat_min_max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitRepeat_min_max(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_min_max(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_min_maxContext repeat_min_max() {
		Repeat_min_maxContext _localctx = new Repeat_min_maxContext(Context, State);
		EnterRule(_localctx, 48, RULE_repeat_min_max);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(OPENING_BRACE);
			State = 167;
			Match(NUMBER);
			State = 168;
			Match(COMMA);
			State = 169;
			Match(NUMBER);
			State = 170;
			Match(CLOSING_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PushContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUSH() { return GetToken(PestParser.PUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_PAREN() { return GetToken(PestParser.OPENING_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_PAREN() { return GetToken(PestParser.CLOSING_PAREN, 0); }
		public PushContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_push; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPush(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPush(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPush(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PushContext push() {
		PushContext _localctx = new PushContext(Context, State);
		EnterRule(_localctx, 50, RULE_push);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(PUSH);
			State = 173;
			Match(OPENING_PAREN);
			State = 174;
			expression();
			State = 175;
			Match(CLOSING_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Peek_sliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEEK() { return GetToken(PestParser.PEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACK() { return GetToken(PestParser.OPENING_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_OPERATOR() { return GetToken(PestParser.RANGE_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACK() { return GetToken(PestParser.CLOSING_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(PestParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(PestParser.INTEGER, i);
		}
		public Peek_sliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peek_slice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.EnterPeek_slice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPestParserListener typedListener = listener as IPestParserListener;
			if (typedListener != null) typedListener.ExitPeek_slice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPestParserVisitor<TResult> typedVisitor = visitor as IPestParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeek_slice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Peek_sliceContext peek_slice() {
		Peek_sliceContext _localctx = new Peek_sliceContext(Context, State);
		EnterRule(_localctx, 52, RULE_peek_slice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(PEEK);
			State = 178;
			Match(OPENING_BRACK);
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 179;
				Match(INTEGER);
				}
			}

			State = 182;
			Match(RANGE_OPERATOR);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 183;
				Match(INTEGER);
				}
			}

			State = 186;
			Match(CLOSING_BRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,37,189,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,4,0,56,8,0,11,0,
		12,0,57,1,0,1,0,1,1,1,1,1,1,3,1,65,8,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		3,2,75,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,5,7,89,8,7,
		10,7,12,7,92,9,7,1,8,5,8,95,8,8,10,8,12,8,98,9,8,1,8,1,8,5,8,102,8,8,10,
		8,12,8,105,9,8,1,9,1,9,1,9,1,9,1,9,3,9,112,8,9,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,120,8,10,1,11,1,11,3,11,124,8,11,1,12,1,12,3,12,128,8,12,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,3,13,137,8,13,1,14,1,14,1,15,1,15,1,16,1,
		16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,
		22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
		24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,3,26,181,8,26,1,26,1,26,3,26,
		185,8,26,1,26,1,26,1,26,0,0,27,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,0,0,185,0,55,1,0,0,0,2,61,1,0,0,0,
		4,74,1,0,0,0,6,76,1,0,0,0,8,78,1,0,0,0,10,80,1,0,0,0,12,82,1,0,0,0,14,
		84,1,0,0,0,16,96,1,0,0,0,18,111,1,0,0,0,20,119,1,0,0,0,22,123,1,0,0,0,
		24,127,1,0,0,0,26,136,1,0,0,0,28,138,1,0,0,0,30,140,1,0,0,0,32,142,1,0,
		0,0,34,144,1,0,0,0,36,146,1,0,0,0,38,148,1,0,0,0,40,150,1,0,0,0,42,152,
		1,0,0,0,44,156,1,0,0,0,46,161,1,0,0,0,48,166,1,0,0,0,50,172,1,0,0,0,52,
		177,1,0,0,0,54,56,3,2,1,0,55,54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,
		58,1,0,0,0,58,59,1,0,0,0,59,60,5,0,0,1,60,1,1,0,0,0,61,62,5,23,0,0,62,
		64,5,11,0,0,63,65,3,4,2,0,64,63,1,0,0,0,64,65,1,0,0,0,65,66,1,0,0,0,66,
		67,5,12,0,0,67,68,3,14,7,0,68,69,5,13,0,0,69,3,1,0,0,0,70,75,3,6,3,0,71,
		75,3,8,4,0,72,75,3,10,5,0,73,75,3,12,6,0,74,70,1,0,0,0,74,71,1,0,0,0,74,
		72,1,0,0,0,74,73,1,0,0,0,75,5,1,0,0,0,76,77,5,1,0,0,77,7,1,0,0,0,78,79,
		5,2,0,0,79,9,1,0,0,0,80,81,5,3,0,0,81,11,1,0,0,0,82,83,5,4,0,0,83,13,1,
		0,0,0,84,90,3,16,8,0,85,86,3,24,12,0,86,87,3,16,8,0,87,89,1,0,0,0,88,85,
		1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,15,1,0,0,0,92,90,
		1,0,0,0,93,95,3,22,11,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,
		1,0,0,0,97,99,1,0,0,0,98,96,1,0,0,0,99,103,3,18,9,0,100,102,3,26,13,0,
		101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,17,
		1,0,0,0,105,103,1,0,0,0,106,107,5,14,0,0,107,108,3,14,7,0,108,109,5,15,
		0,0,109,112,1,0,0,0,110,112,3,20,10,0,111,106,1,0,0,0,111,110,1,0,0,0,
		112,19,1,0,0,0,113,120,3,50,25,0,114,120,3,52,26,0,115,120,5,23,0,0,116,
		120,5,24,0,0,117,120,5,25,0,0,118,120,5,26,0,0,119,113,1,0,0,0,119,114,
		1,0,0,0,119,115,1,0,0,0,119,116,1,0,0,0,119,117,1,0,0,0,119,118,1,0,0,
		0,120,21,1,0,0,0,121,124,3,28,14,0,122,124,3,30,15,0,123,121,1,0,0,0,123,
		122,1,0,0,0,124,23,1,0,0,0,125,128,3,32,16,0,126,128,3,34,17,0,127,125,
		1,0,0,0,127,126,1,0,0,0,128,25,1,0,0,0,129,137,3,36,18,0,130,137,3,38,
		19,0,131,137,3,40,20,0,132,137,3,42,21,0,133,137,3,44,22,0,134,137,3,46,
		23,0,135,137,3,48,24,0,136,129,1,0,0,0,136,130,1,0,0,0,136,131,1,0,0,0,
		136,132,1,0,0,0,136,133,1,0,0,0,136,134,1,0,0,0,136,135,1,0,0,0,137,27,
		1,0,0,0,138,139,5,5,0,0,139,29,1,0,0,0,140,141,5,4,0,0,141,31,1,0,0,0,
		142,143,5,6,0,0,143,33,1,0,0,0,144,145,5,7,0,0,145,35,1,0,0,0,146,147,
		5,8,0,0,147,37,1,0,0,0,148,149,5,9,0,0,149,39,1,0,0,0,150,151,5,10,0,0,
		151,41,1,0,0,0,152,153,5,12,0,0,153,154,5,20,0,0,154,155,5,13,0,0,155,
		43,1,0,0,0,156,157,5,12,0,0,157,158,5,20,0,0,158,159,5,22,0,0,159,160,
		5,13,0,0,160,45,1,0,0,0,161,162,5,12,0,0,162,163,5,22,0,0,163,164,5,20,
		0,0,164,165,5,13,0,0,165,47,1,0,0,0,166,167,5,12,0,0,167,168,5,20,0,0,
		168,169,5,22,0,0,169,170,5,20,0,0,170,171,5,13,0,0,171,49,1,0,0,0,172,
		173,5,18,0,0,173,174,5,14,0,0,174,175,3,14,7,0,175,176,5,15,0,0,176,51,
		1,0,0,0,177,178,5,19,0,0,178,180,5,16,0,0,179,181,5,21,0,0,180,179,1,0,
		0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,184,5,34,0,0,183,185,5,21,0,0,
		184,183,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,187,5,17,0,0,187,53,
		1,0,0,0,13,57,64,74,90,96,103,111,119,123,127,136,180,184
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
