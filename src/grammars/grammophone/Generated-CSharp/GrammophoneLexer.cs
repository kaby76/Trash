//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammophone.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GrammophoneLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SymSep=1, RuleSep=2, OP=3, CP=4, COMMENT=5, String=6, Symbol=7, WS=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SymSep", "RuleSep", "OP", "CP", "COMMENT", "String", "Symbol", "WS", 
		"FSymbol", "FWs"
	};


	public GrammophoneLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrammophoneLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'->'", "'.'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SymSep", "RuleSep", "OP", "CP", "COMMENT", "String", "Symbol", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammophone.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammophoneLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,8,75,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,5,
		4,33,8,4,10,4,12,4,36,9,4,1,4,1,4,1,5,1,5,5,5,42,8,5,10,5,12,5,45,9,5,
		1,5,1,5,1,5,5,5,50,8,5,10,5,12,5,53,9,5,1,5,3,5,56,8,5,1,6,1,6,1,7,1,7,
		1,7,1,7,1,8,1,8,5,8,66,8,8,10,8,12,8,69,9,8,1,9,4,9,72,8,9,11,9,12,9,73,
		3,34,43,51,0,10,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,0,19,0,1,0,3,2,0,
		10,10,13,13,5,0,45,46,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,78,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,1,21,1,0,0,0,3,24,1,0,0,0,5,26,1,0,0,0,7,28,
		1,0,0,0,9,30,1,0,0,0,11,55,1,0,0,0,13,57,1,0,0,0,15,59,1,0,0,0,17,63,1,
		0,0,0,19,71,1,0,0,0,21,22,5,45,0,0,22,23,5,62,0,0,23,2,1,0,0,0,24,25,5,
		46,0,0,25,4,1,0,0,0,26,27,5,40,0,0,27,6,1,0,0,0,28,29,5,41,0,0,29,8,1,
		0,0,0,30,34,5,35,0,0,31,33,8,0,0,0,32,31,1,0,0,0,33,36,1,0,0,0,34,35,1,
		0,0,0,34,32,1,0,0,0,35,37,1,0,0,0,36,34,1,0,0,0,37,38,6,4,0,0,38,10,1,
		0,0,0,39,43,5,34,0,0,40,42,9,0,0,0,41,40,1,0,0,0,42,45,1,0,0,0,43,44,1,
		0,0,0,43,41,1,0,0,0,44,46,1,0,0,0,45,43,1,0,0,0,46,56,5,34,0,0,47,51,5,
		39,0,0,48,50,9,0,0,0,49,48,1,0,0,0,50,53,1,0,0,0,51,52,1,0,0,0,51,49,1,
		0,0,0,52,54,1,0,0,0,53,51,1,0,0,0,54,56,5,39,0,0,55,39,1,0,0,0,55,47,1,
		0,0,0,56,12,1,0,0,0,57,58,3,17,8,0,58,14,1,0,0,0,59,60,3,19,9,0,60,61,
		1,0,0,0,61,62,6,7,0,0,62,16,1,0,0,0,63,67,7,1,0,0,64,66,7,1,0,0,65,64,
		1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,18,1,0,0,0,69,67,
		1,0,0,0,70,72,7,2,0,0,71,70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,
		1,0,0,0,74,20,1,0,0,0,7,0,34,43,51,55,67,73,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
