//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammophone.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GrammophoneParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SymSep=1, RuleSep=2, OP=3, CP=4, COMMENT=5, String=6, Symbol=7, WS=8;
	public const int
		RULE_prods = 0, RULE_prod = 1, RULE_lhs = 2, RULE_rhs = 3, RULE_atom = 4, 
		RULE_symbol = 5;
	public static readonly string[] ruleNames = {
		"prods", "prod", "lhs", "rhs", "atom", "symbol"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "'.'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SymSep", "RuleSep", "OP", "CP", "COMMENT", "String", "Symbol", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammophone.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammophoneParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammophoneParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammophoneParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GrammophoneParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProdContext[] prod() {
			return GetRuleContexts<ProdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProdContext prod(int i) {
			return GetRuleContext<ProdContext>(i);
		}
		public ProdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.EnterProds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.ExitProds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammophoneVisitor<TResult> typedVisitor = visitor as IGrammophoneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProdsContext prods() {
		ProdsContext _localctx = new ProdsContext(Context, State);
		EnterRule(_localctx, 0, RULE_prods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 12;
				prod();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Symbol );
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LhsContext lhs() {
			return GetRuleContext<LhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SymSep() { return GetToken(GrammophoneParser.SymSep, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext rhs() {
			return GetRuleContext<RhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RuleSep() { return GetToken(GrammophoneParser.RuleSep, 0); }
		public ProdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.EnterProd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.ExitProd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammophoneVisitor<TResult> typedVisitor = visitor as IGrammophoneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProdContext prod() {
		ProdContext _localctx = new ProdContext(Context, State);
		EnterRule(_localctx, 2, RULE_prod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			lhs();
			State = 20;
			Match(SymSep);
			State = 21;
			rhs();
			State = 22;
			Match(RuleSep);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LhsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public LhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.EnterLhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.ExitLhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammophoneVisitor<TResult> typedVisitor = visitor as IGrammophoneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LhsContext lhs() {
		LhsContext _localctx = new LhsContext(Context, State);
		EnterRule(_localctx, 4, RULE_lhs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RhsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public RhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.EnterRhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.ExitRhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammophoneVisitor<TResult> typedVisitor = visitor as IGrammophoneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RhsContext rhs() {
		RhsContext _localctx = new RhsContext(Context, State);
		EnterRule(_localctx, 6, RULE_rhs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 200L) != 0)) {
				{
				{
				State = 26;
				atom();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(GrammophoneParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(GrammophoneParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(GrammophoneParser.CP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammophoneVisitor<TResult> typedVisitor = visitor as IGrammophoneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 8, RULE_atom);
		int _la;
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Symbol:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				symbol();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33;
				Match(String);
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34;
				Match(OP);
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 200L) != 0)) {
					{
					{
					State = 35;
					atom();
					}
					}
					State = 40;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 41;
				Match(CP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Symbol() { return GetToken(GrammophoneParser.Symbol, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammophoneListener typedListener = listener as IGrammophoneListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammophoneVisitor<TResult> typedVisitor = visitor as IGrammophoneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 10, RULE_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(Symbol);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,8,47,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,4,0,14,8,
		0,11,0,12,0,15,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,5,3,28,8,3,10,3,
		12,3,31,9,3,1,4,1,4,1,4,1,4,5,4,37,8,4,10,4,12,4,40,9,4,1,4,3,4,43,8,4,
		1,5,1,5,1,5,0,0,6,0,2,4,6,8,10,0,0,45,0,13,1,0,0,0,2,19,1,0,0,0,4,24,1,
		0,0,0,6,29,1,0,0,0,8,42,1,0,0,0,10,44,1,0,0,0,12,14,3,2,1,0,13,12,1,0,
		0,0,14,15,1,0,0,0,15,13,1,0,0,0,15,16,1,0,0,0,16,17,1,0,0,0,17,18,5,0,
		0,1,18,1,1,0,0,0,19,20,3,4,2,0,20,21,5,1,0,0,21,22,3,6,3,0,22,23,5,2,0,
		0,23,3,1,0,0,0,24,25,3,10,5,0,25,5,1,0,0,0,26,28,3,8,4,0,27,26,1,0,0,0,
		28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,7,1,0,0,0,31,29,1,0,0,0,32,
		43,3,10,5,0,33,43,5,6,0,0,34,38,5,3,0,0,35,37,3,8,4,0,36,35,1,0,0,0,37,
		40,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,0,41,
		43,5,4,0,0,42,32,1,0,0,0,42,33,1,0,0,0,42,34,1,0,0,0,43,9,1,0,0,0,44,45,
		5,7,0,0,45,11,1,0,0,0,4,15,29,38,42
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
