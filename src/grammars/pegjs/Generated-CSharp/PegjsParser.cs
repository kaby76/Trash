//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Pegjs.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PegjsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, Identifier=15, WhiteSpace=16, 
		Comment=17, CharacterClassMatcher=18, DecimalDigit=19, HexDigit=20, AnyMatcher=21, 
		CodeBlock=22, StringLiteral=23;
	public const int
		RULE_grammar_ = 0, RULE_initializer = 1, RULE_eos = 2, RULE_rule = 3, 
		RULE_expression = 4, RULE_choiceexpression = 5, RULE_actionexpression = 6, 
		RULE_sequenceexpression = 7, RULE_labeledexpression = 8, RULE_labelidentifier = 9, 
		RULE_prefixedexpression = 10, RULE_prefixedoperator = 11, RULE_suffixedexpression = 12, 
		RULE_suffixedoperator = 13, RULE_primaryexpression = 14, RULE_rulereferenceexpression = 15, 
		RULE_semanticpredicateexpression = 16, RULE_semanticpredicateoperator = 17, 
		RULE_identifier = 18, RULE_literalMatcher = 19;
	public static readonly string[] ruleNames = {
		"grammar_", "initializer", "eos", "rule", "expression", "choiceexpression", 
		"actionexpression", "sequenceexpression", "labeledexpression", "labelidentifier", 
		"prefixedexpression", "prefixedoperator", "suffixedexpression", "suffixedoperator", 
		"primaryexpression", "rulereferenceexpression", "semanticpredicateexpression", 
		"semanticpredicateoperator", "identifier", "literalMatcher"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'/'", "'@'", "':'", "'$'", "'&'", "'!'", "'?'", "'*'", 
		"'+'", "'('", "')'", "'i'", null, null, null, null, null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "Identifier", "WhiteSpace", "Comment", "CharacterClassMatcher", 
		"DecimalDigit", "HexDigit", "AnyMatcher", "CodeBlock", "StringLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pegjs.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PegjsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PegjsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PegjsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Grammar_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PegjsParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public Grammar_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_Context grammar_() {
		Grammar_Context _localctx = new Grammar_Context(Context, State);
		EnterRule(_localctx, 0, RULE_grammar_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CodeBlock) {
				{
				State = 40;
				initializer();
				}
			}

			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 43;
				rule();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 48;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CodeBlock() { return GetToken(PegjsParser.CodeBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 2, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(CodeBlock);
			State = 51;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 4, RULE_eos);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				Match(T__0);
				}
				break;
			case Eof:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(PegjsParser.StringLiteral, 0); }
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 6, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			identifier();
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringLiteral) {
				{
				State = 58;
				Match(StringLiteral);
				}
			}

			State = 61;
			Match(T__1);
			State = 62;
			expression();
			State = 63;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceexpressionContext choiceexpression() {
			return GetRuleContext<ChoiceexpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			choiceexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionexpressionContext[] actionexpression() {
			return GetRuleContexts<ActionexpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionexpressionContext actionexpression(int i) {
			return GetRuleContext<ActionexpressionContext>(i);
		}
		public ChoiceexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choiceexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterChoiceexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitChoiceexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoiceexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceexpressionContext choiceexpression() {
		ChoiceexpressionContext _localctx = new ChoiceexpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_choiceexpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			actionexpression();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 68;
				Match(T__2);
				State = 69;
				actionexpression();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SequenceexpressionContext sequenceexpression() {
			return GetRuleContext<SequenceexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CodeBlock() { return GetToken(PegjsParser.CodeBlock, 0); }
		public ActionexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterActionexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitActionexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionexpressionContext actionexpression() {
		ActionexpressionContext _localctx = new ActionexpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_actionexpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			sequenceexpression();
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CodeBlock) {
				{
				State = 76;
				Match(CodeBlock);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledexpressionContext[] labeledexpression() {
			return GetRuleContexts<LabeledexpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledexpressionContext labeledexpression(int i) {
			return GetRuleContext<LabeledexpressionContext>(i);
		}
		public SequenceexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterSequenceexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitSequenceexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequenceexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceexpressionContext sequenceexpression() {
		SequenceexpressionContext _localctx = new SequenceexpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_sequenceexpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			labeledexpression();
			State = 83;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 80;
					labeledexpression();
					}
					} 
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixedexpressionContext prefixedexpression() {
			return GetRuleContext<PrefixedexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelidentifierContext labelidentifier() {
			return GetRuleContext<LabelidentifierContext>(0);
		}
		public LabeledexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterLabeledexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitLabeledexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledexpressionContext labeledexpression() {
		LabeledexpressionContext _localctx = new LabeledexpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_labeledexpression);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				Match(T__3);
				State = 88;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 87;
					labelidentifier();
					}
					break;
				}
				State = 90;
				prefixedexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				labelidentifier();
				State = 92;
				prefixedexpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				prefixedexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelidentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelidentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelidentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterLabelidentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitLabelidentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelidentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelidentifierContext labelidentifier() {
		LabelidentifierContext _localctx = new LabelidentifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_labelidentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			identifier();
			State = 98;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixedexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixedoperatorContext prefixedoperator() {
			return GetRuleContext<PrefixedoperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixedexpressionContext suffixedexpression() {
			return GetRuleContext<SuffixedexpressionContext>(0);
		}
		public PrefixedexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixedexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterPrefixedexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitPrefixedexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixedexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixedexpressionContext prefixedexpression() {
		PrefixedexpressionContext _localctx = new PrefixedexpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_prefixedexpression);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				prefixedoperator();
				State = 101;
				suffixedexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				suffixedexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixedoperatorContext : ParserRuleContext {
		public PrefixedoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixedoperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterPrefixedoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitPrefixedoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixedoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixedoperatorContext prefixedoperator() {
		PrefixedoperatorContext _localctx = new PrefixedoperatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_prefixedoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuffixedexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryexpressionContext primaryexpression() {
			return GetRuleContext<PrimaryexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixedoperatorContext suffixedoperator() {
			return GetRuleContext<SuffixedoperatorContext>(0);
		}
		public SuffixedexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suffixedexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterSuffixedexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitSuffixedexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuffixedexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuffixedexpressionContext suffixedexpression() {
		SuffixedexpressionContext _localctx = new SuffixedexpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_suffixedexpression);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				primaryexpression();
				State = 109;
				suffixedoperator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111;
				primaryexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuffixedoperatorContext : ParserRuleContext {
		public SuffixedoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suffixedoperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterSuffixedoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitSuffixedoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuffixedoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuffixedoperatorContext suffixedoperator() {
		SuffixedoperatorContext _localctx = new SuffixedoperatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_suffixedoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralMatcherContext literalMatcher() {
			return GetRuleContext<LiteralMatcherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterClassMatcher() { return GetToken(PegjsParser.CharacterClassMatcher, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnyMatcher() { return GetToken(PegjsParser.AnyMatcher, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RulereferenceexpressionContext rulereferenceexpression() {
			return GetRuleContext<RulereferenceexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemanticpredicateexpressionContext semanticpredicateexpression() {
			return GetRuleContext<SemanticpredicateexpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterPrimaryexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitPrimaryexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryexpressionContext primaryexpression() {
		PrimaryexpressionContext _localctx = new PrimaryexpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_primaryexpression);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				literalMatcher();
				}
				break;
			case CharacterClassMatcher:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				Match(CharacterClassMatcher);
				}
				break;
			case AnyMatcher:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118;
				Match(AnyMatcher);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 119;
				rulereferenceexpression();
				}
				break;
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 120;
				semanticpredicateexpression();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 6);
				{
				State = 121;
				Match(T__11);
				State = 122;
				expression();
				State = 123;
				Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulereferenceexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RulereferenceexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulereferenceexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterRulereferenceexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitRulereferenceexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulereferenceexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulereferenceexpressionContext rulereferenceexpression() {
		RulereferenceexpressionContext _localctx = new RulereferenceexpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_rulereferenceexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemanticpredicateexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SemanticpredicateoperatorContext semanticpredicateoperator() {
			return GetRuleContext<SemanticpredicateoperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CodeBlock() { return GetToken(PegjsParser.CodeBlock, 0); }
		public SemanticpredicateexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semanticpredicateexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterSemanticpredicateexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitSemanticpredicateexpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemanticpredicateexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemanticpredicateexpressionContext semanticpredicateexpression() {
		SemanticpredicateexpressionContext _localctx = new SemanticpredicateexpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_semanticpredicateexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			semanticpredicateoperator();
			State = 130;
			Match(CodeBlock);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemanticpredicateoperatorContext : ParserRuleContext {
		public SemanticpredicateoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semanticpredicateoperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterSemanticpredicateoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitSemanticpredicateoperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemanticpredicateoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemanticpredicateoperatorContext semanticpredicateoperator() {
		SemanticpredicateoperatorContext _localctx = new SemanticpredicateoperatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_semanticpredicateoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PegjsParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralMatcherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(PegjsParser.StringLiteral, 0); }
		public LiteralMatcherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalMatcher; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.EnterLiteralMatcher(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPegjsListener typedListener = listener as IPegjsListener;
			if (typedListener != null) typedListener.ExitLiteralMatcher(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPegjsVisitor<TResult> typedVisitor = visitor as IPegjsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralMatcher(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralMatcherContext literalMatcher() {
		LiteralMatcherContext _localctx = new LiteralMatcherContext(Context, State);
		EnterRule(_localctx, 38, RULE_literalMatcher);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(StringLiteral);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 137;
				Match(T__13);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,23,141,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,3,0,42,8,0,1,0,4,
		0,45,8,0,11,0,12,0,46,1,0,1,0,1,1,1,1,1,1,1,2,1,2,3,2,56,8,2,1,3,1,3,3,
		3,60,8,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,5,5,71,8,5,10,5,12,5,74,9,
		5,1,6,1,6,3,6,78,8,6,1,7,1,7,5,7,82,8,7,10,7,12,7,85,9,7,1,8,1,8,3,8,89,
		8,8,1,8,1,8,1,8,1,8,1,8,3,8,96,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,
		105,8,10,1,11,1,11,1,12,1,12,1,12,1,12,3,12,113,8,12,1,13,1,13,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,126,8,14,1,15,1,15,1,16,1,16,
		1,16,1,17,1,17,1,18,1,18,1,19,1,19,3,19,139,8,19,1,19,0,0,20,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,3,1,0,6,8,1,0,9,11,1,0,
		7,8,138,0,41,1,0,0,0,2,50,1,0,0,0,4,55,1,0,0,0,6,57,1,0,0,0,8,65,1,0,0,
		0,10,67,1,0,0,0,12,75,1,0,0,0,14,79,1,0,0,0,16,95,1,0,0,0,18,97,1,0,0,
		0,20,104,1,0,0,0,22,106,1,0,0,0,24,112,1,0,0,0,26,114,1,0,0,0,28,125,1,
		0,0,0,30,127,1,0,0,0,32,129,1,0,0,0,34,132,1,0,0,0,36,134,1,0,0,0,38,136,
		1,0,0,0,40,42,3,2,1,0,41,40,1,0,0,0,41,42,1,0,0,0,42,44,1,0,0,0,43,45,
		3,6,3,0,44,43,1,0,0,0,45,46,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,48,
		1,0,0,0,48,49,5,0,0,1,49,1,1,0,0,0,50,51,5,22,0,0,51,52,3,4,2,0,52,3,1,
		0,0,0,53,56,5,1,0,0,54,56,1,0,0,0,55,53,1,0,0,0,55,54,1,0,0,0,56,5,1,0,
		0,0,57,59,3,36,18,0,58,60,5,23,0,0,59,58,1,0,0,0,59,60,1,0,0,0,60,61,1,
		0,0,0,61,62,5,2,0,0,62,63,3,8,4,0,63,64,3,4,2,0,64,7,1,0,0,0,65,66,3,10,
		5,0,66,9,1,0,0,0,67,72,3,12,6,0,68,69,5,3,0,0,69,71,3,12,6,0,70,68,1,0,
		0,0,71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,11,1,0,0,0,74,72,1,0,
		0,0,75,77,3,14,7,0,76,78,5,22,0,0,77,76,1,0,0,0,77,78,1,0,0,0,78,13,1,
		0,0,0,79,83,3,16,8,0,80,82,3,16,8,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,
		1,0,0,0,83,84,1,0,0,0,84,15,1,0,0,0,85,83,1,0,0,0,86,88,5,4,0,0,87,89,
		3,18,9,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,96,3,20,10,0,91,
		92,3,18,9,0,92,93,3,20,10,0,93,96,1,0,0,0,94,96,3,20,10,0,95,86,1,0,0,
		0,95,91,1,0,0,0,95,94,1,0,0,0,96,17,1,0,0,0,97,98,3,36,18,0,98,99,5,5,
		0,0,99,19,1,0,0,0,100,101,3,22,11,0,101,102,3,24,12,0,102,105,1,0,0,0,
		103,105,3,24,12,0,104,100,1,0,0,0,104,103,1,0,0,0,105,21,1,0,0,0,106,107,
		7,0,0,0,107,23,1,0,0,0,108,109,3,28,14,0,109,110,3,26,13,0,110,113,1,0,
		0,0,111,113,3,28,14,0,112,108,1,0,0,0,112,111,1,0,0,0,113,25,1,0,0,0,114,
		115,7,1,0,0,115,27,1,0,0,0,116,126,3,38,19,0,117,126,5,18,0,0,118,126,
		5,21,0,0,119,126,3,30,15,0,120,126,3,32,16,0,121,122,5,12,0,0,122,123,
		3,8,4,0,123,124,5,13,0,0,124,126,1,0,0,0,125,116,1,0,0,0,125,117,1,0,0,
		0,125,118,1,0,0,0,125,119,1,0,0,0,125,120,1,0,0,0,125,121,1,0,0,0,126,
		29,1,0,0,0,127,128,3,36,18,0,128,31,1,0,0,0,129,130,3,34,17,0,130,131,
		5,22,0,0,131,33,1,0,0,0,132,133,7,2,0,0,133,35,1,0,0,0,134,135,5,15,0,
		0,135,37,1,0,0,0,136,138,5,23,0,0,137,139,5,14,0,0,138,137,1,0,0,0,138,
		139,1,0,0,0,139,39,1,0,0,0,13,41,46,55,59,72,77,83,88,95,104,112,125,138
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
