//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AntlrPrimeParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AntlrPrimeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, DOC_COMMENT=4, BLOCK_COMMENT=5, 
		LINE_COMMENT=6, INT=7, STRING_LITERAL=8, UNTERMINATED_STRING_LITERAL=9, 
		BEGIN_ARGUMENT=10, BEGIN_ACTION=11, OPTIONS=12, TOKENS=13, CHANNELS=14, 
		IMPORT=15, FRAGMENT=16, LEXER=17, PARSER=18, GRAMMAR=19, PROTECTED=20, 
		PUBLIC=21, PRIVATE=22, RETURNS=23, LOCALS=24, THROWS=25, CATCH=26, FINALLY=27, 
		MODE=28, COLON=29, COLONCOLON=30, COMMA=31, SEMI=32, LPAREN=33, RPAREN=34, 
		LBRACE=35, RBRACE=36, RARROW=37, LT=38, GT=39, ASSIGN=40, QUESTION=41, 
		STAR=42, PLUS_ASSIGN=43, PLUS=44, BANG=45, ROOT=46, OR=47, DOLLAR=48, 
		RANGE=49, DOT=50, AT=51, POUND=52, NOT=53, ID=54, WS=55, ERRCHAR=56, END_ARGUMENT=57, 
		UNTERMINATED_ARGUMENT=58, ARGUMENT_CONTENT=59, END_ACTION=60, UNTERMINATED_ACTION=61, 
		ACTION_CONTENT=62, UNTERMINATED_CHAR_SET=63;
	public const int
		RULE_grammarSpec = 0, RULE_grammarDecl = 1, RULE_grammarType = 2, RULE_prequelConstruct = 3, 
		RULE_optionsSpec = 4, RULE_option = 5, RULE_optionValue = 6, RULE_delegateGrammars = 7, 
		RULE_delegateGrammar = 8, RULE_tokensSpec = 9, RULE_channelsSpec = 10, 
		RULE_idList = 11, RULE_action_ = 12, RULE_actionScopeName = 13, RULE_actionBlock = 14, 
		RULE_argActionBlock = 15, RULE_modeSpec = 16, RULE_rules = 17, RULE_ruleSpec = 18, 
		RULE_parserRuleSpec = 19, RULE_exceptionGroup = 20, RULE_exceptionHandler = 21, 
		RULE_finallyClause = 22, RULE_rulePrequel = 23, RULE_ruleReturns = 24, 
		RULE_throwsSpec = 25, RULE_localsSpec = 26, RULE_ruleAction = 27, RULE_ruleModifiers = 28, 
		RULE_ruleModifier = 29, RULE_ruleBlock = 30, RULE_ruleAltList = 31, RULE_labeledAlt = 32, 
		RULE_lexerRuleSpec = 33, RULE_lexerRuleBlock = 34, RULE_lexerAltList = 35, 
		RULE_lexerAlt = 36, RULE_lexerElements = 37, RULE_lexerElement = 38, RULE_labeledLexerElement = 39, 
		RULE_lexerBlock = 40, RULE_lexerCommands = 41, RULE_lexerCommand = 42, 
		RULE_lexerCommandName = 43, RULE_lexerCommandExpr = 44, RULE_altList = 45, 
		RULE_alternative = 46, RULE_element = 47, RULE_labeledElement = 48, RULE_ebnf = 49, 
		RULE_blockSuffix = 50, RULE_ebnfSuffix = 51, RULE_lexerAtom = 52, RULE_atom = 53, 
		RULE_notSet = 54, RULE_blockSet = 55, RULE_setElement = 56, RULE_block = 57, 
		RULE_ruleref = 58, RULE_characterRange = 59, RULE_terminal = 60, RULE_elementOptions = 61, 
		RULE_elementOption = 62, RULE_identifier = 63;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarDecl", "grammarType", "prequelConstruct", "optionsSpec", 
		"option", "optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", 
		"channelsSpec", "idList", "action_", "actionScopeName", "actionBlock", 
		"argActionBlock", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", "exceptionGroup", 
		"exceptionHandler", "finallyClause", "rulePrequel", "ruleReturns", "throwsSpec", 
		"localsSpec", "ruleAction", "ruleModifiers", "ruleModifier", "ruleBlock", 
		"ruleAltList", "labeledAlt", "lexerRuleSpec", "lexerRuleBlock", "lexerAltList", 
		"lexerAlt", "lexerElements", "lexerElement", "labeledLexerElement", "lexerBlock", 
		"lexerCommands", "lexerCommand", "lexerCommandName", "lexerCommandExpr", 
		"altList", "alternative", "element", "labeledElement", "ebnf", "blockSuffix", 
		"ebnfSuffix", "lexerAtom", "atom", "notSet", "blockSet", "setElement", 
		"block", "ruleref", "characterRange", "terminal", "elementOptions", "elementOption", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "'import'", "'fragment'", "'lexer'", "'parser'", "'grammar'", 
		"'protected'", "'public'", "'private'", "'returns'", "'locals'", "'throws'", 
		"'catch'", "'finally'", "'mode'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "DOC_COMMENT", "BLOCK_COMMENT", 
		"LINE_COMMENT", "INT", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", 
		"BEGIN_ARGUMENT", "BEGIN_ACTION", "OPTIONS", "TOKENS", "CHANNELS", "IMPORT", 
		"FRAGMENT", "LEXER", "PARSER", "GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE", 
		"RETURNS", "LOCALS", "THROWS", "CATCH", "FINALLY", "MODE", "COLON", "COLONCOLON", 
		"COMMA", "SEMI", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RARROW", "LT", 
		"GT", "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", "PLUS", "BANG", "ROOT", 
		"OR", "DOLLAR", "RANGE", "DOT", "AT", "POUND", "NOT", "ID", "WS", "ERRCHAR", 
		"END_ARGUMENT", "UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", 
		"UNTERMINATED_ACTION", "ACTION_CONTENT", "UNTERMINATED_CHAR_SET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AntlrPrimeParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AntlrPrimeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AntlrPrimeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AntlrPrimeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GrammarSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GrammarDeclContext grammarDecl() {
			return GetRuleContext<GrammarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AntlrPrimeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			grammarDecl();
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251799813746688L) != 0)) {
				{
				{
				State = 129;
				prequelConstruct();
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 135;
			rules();
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODE) {
				{
				{
				State = 136;
				modeSpec();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrPrimeParser.SEMI, 0); }
		public GrammarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterGrammarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitGrammarDecl(this);
		}
	}

	[RuleVersion(0)]
	public GrammarDeclContext grammarDecl() {
		GrammarDeclContext _localctx = new GrammarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			grammarType();
			State = 145;
			identifier();
			State = 146;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(AntlrPrimeParser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMMAR() { return GetToken(AntlrPrimeParser.GRAMMAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(AntlrPrimeParser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_grammarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEXER:
				{
				State = 148;
				Match(LEXER);
				State = 149;
				Match(GRAMMAR);
				}
				break;
			case PARSER:
				{
				State = 150;
				Match(PARSER);
				State = 151;
				Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				{
				State = 152;
				Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelsSpecContext channelsSpec() {
			return GetRuleContext<ChannelsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Action_Context action_() {
			return GetRuleContext<Action_Context>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 6, RULE_prequelConstruct);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 157;
				tokensSpec();
				}
				break;
			case CHANNELS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 158;
				channelsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 159;
				action_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(AntlrPrimeParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AntlrPrimeParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(AntlrPrimeParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(AntlrPrimeParser.SEMI, i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 8, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(OPTIONS);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 163;
				option();
				State = 164;
				Match(SEMI);
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AntlrPrimeParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 10, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			identifier();
			State = 174;
			Match(ASSIGN);
			State = 175;
			optionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(AntlrPrimeParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(AntlrPrimeParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(AntlrPrimeParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AntlrPrimeParser.INT, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionValue);
		int _la;
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				identifier();
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 178;
					Match(DOT);
					State = 179;
					identifier();
					}
					}
					State = 184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(STRING_LITERAL);
				}
				break;
			case BEGIN_ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				actionBlock();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 187;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(AntlrPrimeParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrPrimeParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AntlrPrimeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AntlrPrimeParser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(IMPORT);
			State = 191;
			delegateGrammar();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 192;
				Match(COMMA);
				State = 193;
				delegateGrammar();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 199;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AntlrPrimeParser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 16, RULE_delegateGrammar);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				identifier();
				State = 202;
				Match(ASSIGN);
				State = 203;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKENS() { return GetToken(AntlrPrimeParser.TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AntlrPrimeParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 18, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(TOKENS);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKEN_REF || _la==RULE_REF) {
				{
				State = 209;
				idList();
				}
			}

			State = 212;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNELS() { return GetToken(AntlrPrimeParser.CHANNELS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AntlrPrimeParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ChannelsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterChannelsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitChannelsSpec(this);
		}
	}

	[RuleVersion(0)]
	public ChannelsSpecContext channelsSpec() {
		ChannelsSpecContext _localctx = new ChannelsSpecContext(Context, State);
		EnterRule(_localctx, 20, RULE_channelsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(CHANNELS);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKEN_REF || _la==RULE_REF) {
				{
				State = 215;
				idList();
				}
			}

			State = 218;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AntlrPrimeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AntlrPrimeParser.COMMA, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 22, RULE_idList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			identifier();
			State = 225;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 221;
					Match(COMMA);
					State = 222;
					identifier();
					}
					} 
				}
				State = 227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 228;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(AntlrPrimeParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(AntlrPrimeParser.COLONCOLON, 0); }
		public Action_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterAction_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitAction_(this);
		}
	}

	[RuleVersion(0)]
	public Action_Context action_() {
		Action_Context _localctx = new Action_Context(Context, State);
		EnterRule(_localctx, 24, RULE_action_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(AT);
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 232;
				actionScopeName();
				State = 233;
				Match(COLONCOLON);
				}
				break;
			}
			State = 237;
			identifier();
			State = 238;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(AntlrPrimeParser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(AntlrPrimeParser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_actionScopeName);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240;
				identifier();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 242;
				Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ACTION() { return GetToken(AntlrPrimeParser.BEGIN_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ACTION() { return GetToken(AntlrPrimeParser.END_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ACTION_CONTENT() { return GetTokens(AntlrPrimeParser.ACTION_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_CONTENT(int i) {
			return GetToken(AntlrPrimeParser.ACTION_CONTENT, i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(BEGIN_ACTION);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ACTION_CONTENT) {
				{
				{
				State = 246;
				Match(ACTION_CONTENT);
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 252;
			Match(END_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ARGUMENT() { return GetToken(AntlrPrimeParser.BEGIN_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ARGUMENT() { return GetToken(AntlrPrimeParser.END_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(AntlrPrimeParser.ARGUMENT_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(AntlrPrimeParser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ArgActionBlockContext argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_argActionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(BEGIN_ARGUMENT);
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARGUMENT_CONTENT) {
				{
				{
				State = 255;
				Match(ARGUMENT_CONTENT);
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261;
			Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(AntlrPrimeParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrPrimeParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleSpecContext[] lexerRuleSpec() {
			return GetRuleContexts<LexerRuleSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleSpecContext lexerRuleSpec(int i) {
			return GetRuleContext<LexerRuleSpecContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 32, RULE_modeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(MODE);
			State = 264;
			identifier();
			State = 265;
			Match(SEMI);
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOKEN_REF || _la==FRAGMENT) {
				{
				{
				State = 266;
				lexerRuleSpec();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 34, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7405574L) != 0)) {
				{
				{
				State = 272;
				ruleSpec();
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleSpecContext lexerRuleSpec() {
			return GetRuleContext<LexerRuleSpecContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_ruleSpec);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279;
				lexerRuleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(AntlrPrimeParser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrPrimeParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrPrimeParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(AntlrPrimeParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 38, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7405568L) != 0)) {
				{
				State = 282;
				ruleModifiers();
				}
			}

			State = 285;
			Match(RULE_REF);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG) {
				{
				State = 286;
				Match(BANG);
				}
			}

			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 289;
				argActionBlock();
				}
			}

			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 292;
				ruleReturns();
				}
			}

			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 295;
				throwsSpec();
				}
			}

			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCALS) {
				{
				State = 298;
				localsSpec();
				}
			}

			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 301;
				rulePrequel();
				}
				}
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 307;
			Match(COLON);
			State = 308;
			ruleBlock();
			State = 309;
			Match(SEMI);
			State = 310;
			exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 40, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 312;
				exceptionHandler();
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 318;
				finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(AntlrPrimeParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 42, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(CATCH);
			State = 322;
			argActionBlock();
			State = 323;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(AntlrPrimeParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(FINALLY);
			State = 326;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 46, RULE_rulePrequel);
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329;
				ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(AntlrPrimeParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(RETURNS);
			State = 333;
			argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(AntlrPrimeParser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AntlrPrimeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AntlrPrimeParser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 50, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(THROWS);
			State = 336;
			identifier();
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 337;
				Match(COMMA);
				State = 338;
				identifier();
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALS() { return GetToken(AntlrPrimeParser.LOCALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 52, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(LOCALS);
			State = 345;
			argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(AntlrPrimeParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 54, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(AT);
			State = 348;
			identifier();
			State = 349;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 56, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 351;
				ruleModifier();
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 7405568L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(AntlrPrimeParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(AntlrPrimeParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(AntlrPrimeParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAGMENT() { return GetToken(AntlrPrimeParser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7405568L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(AntlrPrimeParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(AntlrPrimeParser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 62, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			labeledAlt();
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 361;
				Match(OR);
				State = 362;
				labeledAlt();
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(AntlrPrimeParser.POUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 64, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			alternative();
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POUND) {
				{
				State = 369;
				Match(POUND);
				State = 370;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(AntlrPrimeParser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrPrimeParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(AntlrPrimeParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAGMENT() { return GetToken(AntlrPrimeParser.FRAGMENT, 0); }
		public LexerRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleSpec(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleSpecContext lexerRuleSpec() {
		LexerRuleSpecContext _localctx = new LexerRuleSpecContext(Context, State);
		EnterRule(_localctx, 66, RULE_lexerRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FRAGMENT) {
				{
				State = 373;
				Match(FRAGMENT);
				}
			}

			State = 376;
			Match(TOKEN_REF);
			State = 377;
			Match(COLON);
			State = 378;
			lexerRuleBlock();
			State = 379;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(AntlrPrimeParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(AntlrPrimeParser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			lexerAlt();
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 384;
				Match(OR);
				State = 385;
				lexerAlt();
				}
				}
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 72, RULE_lexerAlt);
		int _la;
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				lexerElements();
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 392;
					lexerCommands();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerElements);
		int _la;
		try {
			State = 404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 398;
					lexerElement();
					}
					}
					State = 401;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 10133107751520526L) != 0) );
				}
				break;
			case SEMI:
			case RPAREN:
			case RARROW:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledLexerElementContext labeledLexerElement() {
			return GetRuleContext<LabeledLexerElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(AntlrPrimeParser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerElement);
		int _la;
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 406;
				labeledLexerElement();
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 24189255811072L) != 0)) {
					{
					State = 407;
					ebnfSuffix();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 410;
				lexerAtom();
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 24189255811072L) != 0)) {
					{
					State = 411;
					ebnfSuffix();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 414;
				lexerBlock();
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 24189255811072L) != 0)) {
					{
					State = 415;
					ebnfSuffix();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418;
				actionBlock();
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 419;
					Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledLexerElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AntlrPrimeParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(AntlrPrimeParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledLexerElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledLexerElementContext labeledLexerElement() {
		LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
		EnterRule(_localctx, 78, RULE_labeledLexerElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			identifier();
			State = 425;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case DOT:
			case NOT:
				{
				State = 426;
				lexerAtom();
				}
				break;
			case LPAREN:
				{
				State = 427;
				lexerBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AntlrPrimeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AntlrPrimeParser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 80, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(LPAREN);
			State = 431;
			lexerAltList();
			State = 432;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(AntlrPrimeParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AntlrPrimeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AntlrPrimeParser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 82, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(RARROW);
			State = 435;
			lexerCommand();
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 436;
				Match(COMMA);
				State = 437;
				lexerCommand();
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AntlrPrimeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AntlrPrimeParser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 84, RULE_lexerCommand);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443;
				lexerCommandName();
				State = 444;
				Match(LPAREN);
				State = 445;
				lexerCommandExpr();
				State = 446;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(AntlrPrimeParser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 86, RULE_lexerCommandName);
		try {
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				identifier();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452;
				Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AntlrPrimeParser.INT, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 88, RULE_lexerCommandExpr);
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				identifier();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 456;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(AntlrPrimeParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(AntlrPrimeParser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 90, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			alternative();
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 460;
				Match(OR);
				State = 461;
				alternative();
				}
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 92, RULE_alternative);
		int _la;
		try {
			State = 476;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case LT:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 467;
					elementOptions();
					}
				}

				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 470;
					element();
					}
					}
					State = 473;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 10133107751520518L) != 0) );
				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
			case POUND:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(AntlrPrimeParser.QUESTION, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 94, RULE_element);
		int _la;
		try {
			State = 493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478;
				labeledElement();
				State = 481;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 479;
					ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483;
				atom();
				State = 486;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 484;
					ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 488;
				ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 489;
				actionBlock();
				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 490;
					Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AntlrPrimeParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(AntlrPrimeParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 96, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			identifier();
			State = 496;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 499;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case STRING_LITERAL:
			case DOT:
			case NOT:
				{
				State = 497;
				atom();
				}
				break;
			case LPAREN:
				{
				State = 498;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 98, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			block();
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 24189255811072L) != 0)) {
				{
				State = 502;
				blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 100, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(AntlrPrimeParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(AntlrPrimeParser.QUESTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(AntlrPrimeParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AntlrPrimeParser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 102, RULE_ebnfSuffix);
		int _la;
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507;
				Match(QUESTION);
				State = 509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 508;
					Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 511;
				Match(STAR);
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 512;
					Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 515;
				Match(PLUS);
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 516;
					Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER_CHAR_SET() { return GetToken(AntlrPrimeParser.LEXER_CHAR_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(AntlrPrimeParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 104, RULE_lexerAtom);
		int _la;
		try {
			State = 529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521;
				characterRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 522;
				terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 523;
				notSet();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 524;
				Match(LEXER_CHAR_SET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 525;
				Match(DOT);
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 526;
					elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(AntlrPrimeParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(AntlrPrimeParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(AntlrPrimeParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 106, RULE_atom);
		int _la;
		try {
			State = 548;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531;
				terminal();
				}
				break;
			case RULE_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532;
				ruleref();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 533;
				notSet();
				State = 537;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ROOT:
					{
					State = 534;
					Match(ROOT);
					}
					break;
				case BANG:
					{
					State = 535;
					Match(BANG);
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case QUESTION:
				case STAR:
				case PLUS:
				case OR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 539;
				Match(DOT);
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 540;
					elementOptions();
					}
				}

				State = 546;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ROOT:
					{
					State = 543;
					Match(ROOT);
					}
					break;
				case BANG:
					{
					State = 544;
					Match(BANG);
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case QUESTION:
				case STAR:
				case PLUS:
				case OR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(AntlrPrimeParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 108, RULE_notSet);
		try {
			State = 554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 550;
				Match(NOT);
				State = 551;
				setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				Match(NOT);
				State = 553;
				blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AntlrPrimeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AntlrPrimeParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(AntlrPrimeParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(AntlrPrimeParser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 110, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(LPAREN);
			State = 557;
			setElement();
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 558;
				Match(OR);
				State = 559;
				setElement();
				}
				}
				State = 564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 565;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(AntlrPrimeParser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(AntlrPrimeParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER_CHAR_SET() { return GetToken(AntlrPrimeParser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 112, RULE_setElement);
		int _la;
		try {
			State = 577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				Match(TOKEN_REF);
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 568;
					elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571;
				Match(STRING_LITERAL);
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 572;
					elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 575;
				characterRange();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 576;
				Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AntlrPrimeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AntlrPrimeParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrPrimeParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(AntlrPrimeParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(AntlrPrimeParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 114, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(LPAREN);
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251800350560256L) != 0)) {
				{
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 580;
					optionsSpec();
					}
				}

				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 583;
					ruleAction();
					}
					}
					State = 588;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 589;
				Match(COLON);
				}
			}

			State = 592;
			altList();
			State = 593;
			Match(RPAREN);
			State = 595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG || _la==ROOT) {
				{
				State = 594;
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==ROOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(AntlrPrimeParser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(AntlrPrimeParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(AntlrPrimeParser.BANG, 0); }
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 116, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			Match(RULE_REF);
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 598;
				argActionBlock();
				}
			}

			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 601;
				elementOptions();
				}
			}

			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG || _la==ROOT) {
				{
				State = 604;
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==ROOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(AntlrPrimeParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(AntlrPrimeParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(AntlrPrimeParser.RANGE, 0); }
		public CharacterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterCharacterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitCharacterRange(this);
		}
	}

	[RuleVersion(0)]
	public CharacterRangeContext characterRange() {
		CharacterRangeContext _localctx = new CharacterRangeContext(Context, State);
		EnterRule(_localctx, 118, RULE_characterRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(STRING_LITERAL);
			State = 608;
			Match(RANGE);
			State = 609;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(AntlrPrimeParser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(AntlrPrimeParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(AntlrPrimeParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(AntlrPrimeParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 120, RULE_terminal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
				{
				State = 611;
				Match(TOKEN_REF);
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 612;
					elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				{
				State = 615;
				Match(STRING_LITERAL);
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 616;
					elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG || _la==ROOT) {
				{
				State = 621;
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==ROOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(AntlrPrimeParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(AntlrPrimeParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AntlrPrimeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AntlrPrimeParser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 122, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(LT);
			State = 625;
			elementOption();
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 626;
				Match(COMMA);
				State = 627;
				elementOption();
				}
				}
				State = 632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 633;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(AntlrPrimeParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(AntlrPrimeParser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 124, RULE_elementOption);
		try {
			State = 642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 635;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 636;
				identifier();
				State = 637;
				Match(ASSIGN);
				State = 640;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TOKEN_REF:
				case RULE_REF:
					{
					State = 638;
					identifier();
					}
					break;
				case STRING_LITERAL:
					{
					State = 639;
					Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(AntlrPrimeParser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(AntlrPrimeParser.TOKEN_REF, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAntlrPrimeParserListener typedListener = listener as IAntlrPrimeParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			_la = TokenStream.LA(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,63,647,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		1,0,1,0,5,0,131,8,0,10,0,12,0,134,9,0,1,0,1,0,5,0,138,8,0,10,0,12,0,141,
		9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,3,2,154,8,2,1,3,1,3,1,
		3,1,3,1,3,3,3,161,8,3,1,4,1,4,1,4,1,4,5,4,167,8,4,10,4,12,4,170,9,4,1,
		4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,181,8,6,10,6,12,6,184,9,6,1,6,1,
		6,1,6,3,6,189,8,6,1,7,1,7,1,7,1,7,5,7,195,8,7,10,7,12,7,198,9,7,1,7,1,
		7,1,8,1,8,1,8,1,8,1,8,3,8,207,8,8,1,9,1,9,3,9,211,8,9,1,9,1,9,1,10,1,10,
		3,10,217,8,10,1,10,1,10,1,11,1,11,1,11,5,11,224,8,11,10,11,12,11,227,9,
		11,1,11,3,11,230,8,11,1,12,1,12,1,12,1,12,3,12,236,8,12,1,12,1,12,1,12,
		1,13,1,13,1,13,3,13,244,8,13,1,14,1,14,5,14,248,8,14,10,14,12,14,251,9,
		14,1,14,1,14,1,15,1,15,5,15,257,8,15,10,15,12,15,260,9,15,1,15,1,15,1,
		16,1,16,1,16,1,16,5,16,268,8,16,10,16,12,16,271,9,16,1,17,5,17,274,8,17,
		10,17,12,17,277,9,17,1,18,1,18,3,18,281,8,18,1,19,3,19,284,8,19,1,19,1,
		19,3,19,288,8,19,1,19,3,19,291,8,19,1,19,3,19,294,8,19,1,19,3,19,297,8,
		19,1,19,3,19,300,8,19,1,19,5,19,303,8,19,10,19,12,19,306,9,19,1,19,1,19,
		1,19,1,19,1,19,1,20,5,20,314,8,20,10,20,12,20,317,9,20,1,20,3,20,320,8,
		20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,3,23,331,8,23,1,24,1,24,
		1,24,1,25,1,25,1,25,1,25,5,25,340,8,25,10,25,12,25,343,9,25,1,26,1,26,
		1,26,1,27,1,27,1,27,1,27,1,28,4,28,353,8,28,11,28,12,28,354,1,29,1,29,
		1,30,1,30,1,31,1,31,1,31,5,31,364,8,31,10,31,12,31,367,9,31,1,32,1,32,
		1,32,3,32,372,8,32,1,33,3,33,375,8,33,1,33,1,33,1,33,1,33,1,33,1,34,1,
		34,1,35,1,35,1,35,5,35,387,8,35,10,35,12,35,390,9,35,1,36,1,36,3,36,394,
		8,36,1,36,3,36,397,8,36,1,37,4,37,400,8,37,11,37,12,37,401,1,37,3,37,405,
		8,37,1,38,1,38,3,38,409,8,38,1,38,1,38,3,38,413,8,38,1,38,1,38,3,38,417,
		8,38,1,38,1,38,3,38,421,8,38,3,38,423,8,38,1,39,1,39,1,39,1,39,3,39,429,
		8,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,5,41,439,8,41,10,41,12,41,
		442,9,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,450,8,42,1,43,1,43,3,43,454,
		8,43,1,44,1,44,3,44,458,8,44,1,45,1,45,1,45,5,45,463,8,45,10,45,12,45,
		466,9,45,1,46,3,46,469,8,46,1,46,4,46,472,8,46,11,46,12,46,473,1,46,3,
		46,477,8,46,1,47,1,47,1,47,3,47,482,8,47,1,47,1,47,1,47,3,47,487,8,47,
		1,47,1,47,1,47,3,47,492,8,47,3,47,494,8,47,1,48,1,48,1,48,1,48,3,48,500,
		8,48,1,49,1,49,3,49,504,8,49,1,50,1,50,1,51,1,51,3,51,510,8,51,1,51,1,
		51,3,51,514,8,51,1,51,1,51,3,51,518,8,51,3,51,520,8,51,1,52,1,52,1,52,
		1,52,1,52,1,52,3,52,528,8,52,3,52,530,8,52,1,53,1,53,1,53,1,53,1,53,1,
		53,3,53,538,8,53,1,53,1,53,3,53,542,8,53,1,53,1,53,1,53,3,53,547,8,53,
		3,53,549,8,53,1,54,1,54,1,54,1,54,3,54,555,8,54,1,55,1,55,1,55,1,55,5,
		55,561,8,55,10,55,12,55,564,9,55,1,55,1,55,1,56,1,56,3,56,570,8,56,1,56,
		1,56,3,56,574,8,56,1,56,1,56,3,56,578,8,56,1,57,1,57,3,57,582,8,57,1,57,
		5,57,585,8,57,10,57,12,57,588,9,57,1,57,3,57,591,8,57,1,57,1,57,1,57,3,
		57,596,8,57,1,58,1,58,3,58,600,8,58,1,58,3,58,603,8,58,1,58,3,58,606,8,
		58,1,59,1,59,1,59,1,59,1,60,1,60,3,60,614,8,60,1,60,1,60,3,60,618,8,60,
		3,60,620,8,60,1,60,3,60,623,8,60,1,61,1,61,1,61,1,61,5,61,629,8,61,10,
		61,12,61,632,9,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,3,62,641,8,62,3,62,
		643,8,62,1,63,1,63,1,63,0,0,64,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,0,4,2,0,16,16,20,22,2,0,40,40,43,43,1,0,45,46,1,0,1,2,
		692,0,128,1,0,0,0,2,144,1,0,0,0,4,153,1,0,0,0,6,160,1,0,0,0,8,162,1,0,
		0,0,10,173,1,0,0,0,12,188,1,0,0,0,14,190,1,0,0,0,16,206,1,0,0,0,18,208,
		1,0,0,0,20,214,1,0,0,0,22,220,1,0,0,0,24,231,1,0,0,0,26,243,1,0,0,0,28,
		245,1,0,0,0,30,254,1,0,0,0,32,263,1,0,0,0,34,275,1,0,0,0,36,280,1,0,0,
		0,38,283,1,0,0,0,40,315,1,0,0,0,42,321,1,0,0,0,44,325,1,0,0,0,46,330,1,
		0,0,0,48,332,1,0,0,0,50,335,1,0,0,0,52,344,1,0,0,0,54,347,1,0,0,0,56,352,
		1,0,0,0,58,356,1,0,0,0,60,358,1,0,0,0,62,360,1,0,0,0,64,368,1,0,0,0,66,
		374,1,0,0,0,68,381,1,0,0,0,70,383,1,0,0,0,72,396,1,0,0,0,74,404,1,0,0,
		0,76,422,1,0,0,0,78,424,1,0,0,0,80,430,1,0,0,0,82,434,1,0,0,0,84,449,1,
		0,0,0,86,453,1,0,0,0,88,457,1,0,0,0,90,459,1,0,0,0,92,476,1,0,0,0,94,493,
		1,0,0,0,96,495,1,0,0,0,98,501,1,0,0,0,100,505,1,0,0,0,102,519,1,0,0,0,
		104,529,1,0,0,0,106,548,1,0,0,0,108,554,1,0,0,0,110,556,1,0,0,0,112,577,
		1,0,0,0,114,579,1,0,0,0,116,597,1,0,0,0,118,607,1,0,0,0,120,619,1,0,0,
		0,122,624,1,0,0,0,124,642,1,0,0,0,126,644,1,0,0,0,128,132,3,2,1,0,129,
		131,3,6,3,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,
		0,0,0,133,135,1,0,0,0,134,132,1,0,0,0,135,139,3,34,17,0,136,138,3,32,16,
		0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,
		142,1,0,0,0,141,139,1,0,0,0,142,143,5,0,0,1,143,1,1,0,0,0,144,145,3,4,
		2,0,145,146,3,126,63,0,146,147,5,32,0,0,147,3,1,0,0,0,148,149,5,17,0,0,
		149,154,5,19,0,0,150,151,5,18,0,0,151,154,5,19,0,0,152,154,5,19,0,0,153,
		148,1,0,0,0,153,150,1,0,0,0,153,152,1,0,0,0,154,5,1,0,0,0,155,161,3,8,
		4,0,156,161,3,14,7,0,157,161,3,18,9,0,158,161,3,20,10,0,159,161,3,24,12,
		0,160,155,1,0,0,0,160,156,1,0,0,0,160,157,1,0,0,0,160,158,1,0,0,0,160,
		159,1,0,0,0,161,7,1,0,0,0,162,168,5,12,0,0,163,164,3,10,5,0,164,165,5,
		32,0,0,165,167,1,0,0,0,166,163,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,
		168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,172,5,36,0,0,172,9,
		1,0,0,0,173,174,3,126,63,0,174,175,5,40,0,0,175,176,3,12,6,0,176,11,1,
		0,0,0,177,182,3,126,63,0,178,179,5,50,0,0,179,181,3,126,63,0,180,178,1,
		0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,189,1,0,0,0,
		184,182,1,0,0,0,185,189,5,8,0,0,186,189,3,28,14,0,187,189,5,7,0,0,188,
		177,1,0,0,0,188,185,1,0,0,0,188,186,1,0,0,0,188,187,1,0,0,0,189,13,1,0,
		0,0,190,191,5,15,0,0,191,196,3,16,8,0,192,193,5,31,0,0,193,195,3,16,8,
		0,194,192,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,
		199,1,0,0,0,198,196,1,0,0,0,199,200,5,32,0,0,200,15,1,0,0,0,201,202,3,
		126,63,0,202,203,5,40,0,0,203,204,3,126,63,0,204,207,1,0,0,0,205,207,3,
		126,63,0,206,201,1,0,0,0,206,205,1,0,0,0,207,17,1,0,0,0,208,210,5,13,0,
		0,209,211,3,22,11,0,210,209,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,
		213,5,36,0,0,213,19,1,0,0,0,214,216,5,14,0,0,215,217,3,22,11,0,216,215,
		1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,5,36,0,0,219,21,1,0,0,
		0,220,225,3,126,63,0,221,222,5,31,0,0,222,224,3,126,63,0,223,221,1,0,0,
		0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,229,1,0,0,0,227,
		225,1,0,0,0,228,230,5,31,0,0,229,228,1,0,0,0,229,230,1,0,0,0,230,23,1,
		0,0,0,231,235,5,51,0,0,232,233,3,26,13,0,233,234,5,30,0,0,234,236,1,0,
		0,0,235,232,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,3,126,63,0,
		238,239,3,28,14,0,239,25,1,0,0,0,240,244,3,126,63,0,241,244,5,17,0,0,242,
		244,5,18,0,0,243,240,1,0,0,0,243,241,1,0,0,0,243,242,1,0,0,0,244,27,1,
		0,0,0,245,249,5,11,0,0,246,248,5,62,0,0,247,246,1,0,0,0,248,251,1,0,0,
		0,249,247,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,249,1,0,0,0,252,
		253,5,60,0,0,253,29,1,0,0,0,254,258,5,10,0,0,255,257,5,59,0,0,256,255,
		1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,
		0,260,258,1,0,0,0,261,262,5,57,0,0,262,31,1,0,0,0,263,264,5,28,0,0,264,
		265,3,126,63,0,265,269,5,32,0,0,266,268,3,66,33,0,267,266,1,0,0,0,268,
		271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,33,1,0,0,0,271,269,1,0,
		0,0,272,274,3,36,18,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,
		275,276,1,0,0,0,276,35,1,0,0,0,277,275,1,0,0,0,278,281,3,38,19,0,279,281,
		3,66,33,0,280,278,1,0,0,0,280,279,1,0,0,0,281,37,1,0,0,0,282,284,3,56,
		28,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,287,5,2,0,0,286,
		288,5,45,0,0,287,286,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,291,3,
		30,15,0,290,289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,294,3,48,24,
		0,293,292,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,297,3,50,25,0,296,
		295,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,300,3,52,26,0,299,298,
		1,0,0,0,299,300,1,0,0,0,300,304,1,0,0,0,301,303,3,46,23,0,302,301,1,0,
		0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,
		304,1,0,0,0,307,308,5,29,0,0,308,309,3,60,30,0,309,310,5,32,0,0,310,311,
		3,40,20,0,311,39,1,0,0,0,312,314,3,42,21,0,313,312,1,0,0,0,314,317,1,0,
		0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,318,
		320,3,44,22,0,319,318,1,0,0,0,319,320,1,0,0,0,320,41,1,0,0,0,321,322,5,
		26,0,0,322,323,3,30,15,0,323,324,3,28,14,0,324,43,1,0,0,0,325,326,5,27,
		0,0,326,327,3,28,14,0,327,45,1,0,0,0,328,331,3,8,4,0,329,331,3,54,27,0,
		330,328,1,0,0,0,330,329,1,0,0,0,331,47,1,0,0,0,332,333,5,23,0,0,333,334,
		3,30,15,0,334,49,1,0,0,0,335,336,5,25,0,0,336,341,3,126,63,0,337,338,5,
		31,0,0,338,340,3,126,63,0,339,337,1,0,0,0,340,343,1,0,0,0,341,339,1,0,
		0,0,341,342,1,0,0,0,342,51,1,0,0,0,343,341,1,0,0,0,344,345,5,24,0,0,345,
		346,3,30,15,0,346,53,1,0,0,0,347,348,5,51,0,0,348,349,3,126,63,0,349,350,
		3,28,14,0,350,55,1,0,0,0,351,353,3,58,29,0,352,351,1,0,0,0,353,354,1,0,
		0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,57,1,0,0,0,356,357,7,0,0,0,357,
		59,1,0,0,0,358,359,3,62,31,0,359,61,1,0,0,0,360,365,3,64,32,0,361,362,
		5,47,0,0,362,364,3,64,32,0,363,361,1,0,0,0,364,367,1,0,0,0,365,363,1,0,
		0,0,365,366,1,0,0,0,366,63,1,0,0,0,367,365,1,0,0,0,368,371,3,92,46,0,369,
		370,5,52,0,0,370,372,3,126,63,0,371,369,1,0,0,0,371,372,1,0,0,0,372,65,
		1,0,0,0,373,375,5,16,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,376,1,0,0,
		0,376,377,5,1,0,0,377,378,5,29,0,0,378,379,3,68,34,0,379,380,5,32,0,0,
		380,67,1,0,0,0,381,382,3,70,35,0,382,69,1,0,0,0,383,388,3,72,36,0,384,
		385,5,47,0,0,385,387,3,72,36,0,386,384,1,0,0,0,387,390,1,0,0,0,388,386,
		1,0,0,0,388,389,1,0,0,0,389,71,1,0,0,0,390,388,1,0,0,0,391,393,3,74,37,
		0,392,394,3,82,41,0,393,392,1,0,0,0,393,394,1,0,0,0,394,397,1,0,0,0,395,
		397,1,0,0,0,396,391,1,0,0,0,396,395,1,0,0,0,397,73,1,0,0,0,398,400,3,76,
		38,0,399,398,1,0,0,0,400,401,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,
		405,1,0,0,0,403,405,1,0,0,0,404,399,1,0,0,0,404,403,1,0,0,0,405,75,1,0,
		0,0,406,408,3,78,39,0,407,409,3,102,51,0,408,407,1,0,0,0,408,409,1,0,0,
		0,409,423,1,0,0,0,410,412,3,104,52,0,411,413,3,102,51,0,412,411,1,0,0,
		0,412,413,1,0,0,0,413,423,1,0,0,0,414,416,3,80,40,0,415,417,3,102,51,0,
		416,415,1,0,0,0,416,417,1,0,0,0,417,423,1,0,0,0,418,420,3,28,14,0,419,
		421,5,41,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,406,1,
		0,0,0,422,410,1,0,0,0,422,414,1,0,0,0,422,418,1,0,0,0,423,77,1,0,0,0,424,
		425,3,126,63,0,425,428,7,1,0,0,426,429,3,104,52,0,427,429,3,80,40,0,428,
		426,1,0,0,0,428,427,1,0,0,0,429,79,1,0,0,0,430,431,5,33,0,0,431,432,3,
		70,35,0,432,433,5,34,0,0,433,81,1,0,0,0,434,435,5,37,0,0,435,440,3,84,
		42,0,436,437,5,31,0,0,437,439,3,84,42,0,438,436,1,0,0,0,439,442,1,0,0,
		0,440,438,1,0,0,0,440,441,1,0,0,0,441,83,1,0,0,0,442,440,1,0,0,0,443,444,
		3,86,43,0,444,445,5,33,0,0,445,446,3,88,44,0,446,447,5,34,0,0,447,450,
		1,0,0,0,448,450,3,86,43,0,449,443,1,0,0,0,449,448,1,0,0,0,450,85,1,0,0,
		0,451,454,3,126,63,0,452,454,5,28,0,0,453,451,1,0,0,0,453,452,1,0,0,0,
		454,87,1,0,0,0,455,458,3,126,63,0,456,458,5,7,0,0,457,455,1,0,0,0,457,
		456,1,0,0,0,458,89,1,0,0,0,459,464,3,92,46,0,460,461,5,47,0,0,461,463,
		3,92,46,0,462,460,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,465,1,0,
		0,0,465,91,1,0,0,0,466,464,1,0,0,0,467,469,3,122,61,0,468,467,1,0,0,0,
		468,469,1,0,0,0,469,471,1,0,0,0,470,472,3,94,47,0,471,470,1,0,0,0,472,
		473,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,477,1,0,0,0,475,477,1,
		0,0,0,476,468,1,0,0,0,476,475,1,0,0,0,477,93,1,0,0,0,478,481,3,96,48,0,
		479,482,3,102,51,0,480,482,1,0,0,0,481,479,1,0,0,0,481,480,1,0,0,0,482,
		494,1,0,0,0,483,486,3,106,53,0,484,487,3,102,51,0,485,487,1,0,0,0,486,
		484,1,0,0,0,486,485,1,0,0,0,487,494,1,0,0,0,488,494,3,98,49,0,489,491,
		3,28,14,0,490,492,5,41,0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,494,1,0,
		0,0,493,478,1,0,0,0,493,483,1,0,0,0,493,488,1,0,0,0,493,489,1,0,0,0,494,
		95,1,0,0,0,495,496,3,126,63,0,496,499,7,1,0,0,497,500,3,106,53,0,498,500,
		3,114,57,0,499,497,1,0,0,0,499,498,1,0,0,0,500,97,1,0,0,0,501,503,3,114,
		57,0,502,504,3,100,50,0,503,502,1,0,0,0,503,504,1,0,0,0,504,99,1,0,0,0,
		505,506,3,102,51,0,506,101,1,0,0,0,507,509,5,41,0,0,508,510,5,41,0,0,509,
		508,1,0,0,0,509,510,1,0,0,0,510,520,1,0,0,0,511,513,5,42,0,0,512,514,5,
		41,0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,520,1,0,0,0,515,517,5,44,0,
		0,516,518,5,41,0,0,517,516,1,0,0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,
		507,1,0,0,0,519,511,1,0,0,0,519,515,1,0,0,0,520,103,1,0,0,0,521,530,3,
		118,59,0,522,530,3,120,60,0,523,530,3,108,54,0,524,530,5,3,0,0,525,527,
		5,50,0,0,526,528,3,122,61,0,527,526,1,0,0,0,527,528,1,0,0,0,528,530,1,
		0,0,0,529,521,1,0,0,0,529,522,1,0,0,0,529,523,1,0,0,0,529,524,1,0,0,0,
		529,525,1,0,0,0,530,105,1,0,0,0,531,549,3,120,60,0,532,549,3,116,58,0,
		533,537,3,108,54,0,534,538,5,46,0,0,535,538,5,45,0,0,536,538,1,0,0,0,537,
		534,1,0,0,0,537,535,1,0,0,0,537,536,1,0,0,0,538,549,1,0,0,0,539,541,5,
		50,0,0,540,542,3,122,61,0,541,540,1,0,0,0,541,542,1,0,0,0,542,546,1,0,
		0,0,543,547,5,46,0,0,544,547,5,45,0,0,545,547,1,0,0,0,546,543,1,0,0,0,
		546,544,1,0,0,0,546,545,1,0,0,0,547,549,1,0,0,0,548,531,1,0,0,0,548,532,
		1,0,0,0,548,533,1,0,0,0,548,539,1,0,0,0,549,107,1,0,0,0,550,551,5,53,0,
		0,551,555,3,112,56,0,552,553,5,53,0,0,553,555,3,110,55,0,554,550,1,0,0,
		0,554,552,1,0,0,0,555,109,1,0,0,0,556,557,5,33,0,0,557,562,3,112,56,0,
		558,559,5,47,0,0,559,561,3,112,56,0,560,558,1,0,0,0,561,564,1,0,0,0,562,
		560,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,562,1,0,0,0,565,566,5,
		34,0,0,566,111,1,0,0,0,567,569,5,1,0,0,568,570,3,122,61,0,569,568,1,0,
		0,0,569,570,1,0,0,0,570,578,1,0,0,0,571,573,5,8,0,0,572,574,3,122,61,0,
		573,572,1,0,0,0,573,574,1,0,0,0,574,578,1,0,0,0,575,578,3,118,59,0,576,
		578,5,3,0,0,577,567,1,0,0,0,577,571,1,0,0,0,577,575,1,0,0,0,577,576,1,
		0,0,0,578,113,1,0,0,0,579,590,5,33,0,0,580,582,3,8,4,0,581,580,1,0,0,0,
		581,582,1,0,0,0,582,586,1,0,0,0,583,585,3,54,27,0,584,583,1,0,0,0,585,
		588,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,
		0,0,0,589,591,5,29,0,0,590,581,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,
		592,593,3,90,45,0,593,595,5,34,0,0,594,596,7,2,0,0,595,594,1,0,0,0,595,
		596,1,0,0,0,596,115,1,0,0,0,597,599,5,2,0,0,598,600,3,30,15,0,599,598,
		1,0,0,0,599,600,1,0,0,0,600,602,1,0,0,0,601,603,3,122,61,0,602,601,1,0,
		0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,606,7,2,0,0,605,604,1,0,0,0,605,
		606,1,0,0,0,606,117,1,0,0,0,607,608,5,8,0,0,608,609,5,49,0,0,609,610,5,
		8,0,0,610,119,1,0,0,0,611,613,5,1,0,0,612,614,3,122,61,0,613,612,1,0,0,
		0,613,614,1,0,0,0,614,620,1,0,0,0,615,617,5,8,0,0,616,618,3,122,61,0,617,
		616,1,0,0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,611,1,0,0,0,619,615,1,
		0,0,0,620,622,1,0,0,0,621,623,7,2,0,0,622,621,1,0,0,0,622,623,1,0,0,0,
		623,121,1,0,0,0,624,625,5,38,0,0,625,630,3,124,62,0,626,627,5,31,0,0,627,
		629,3,124,62,0,628,626,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,
		1,0,0,0,631,633,1,0,0,0,632,630,1,0,0,0,633,634,5,39,0,0,634,123,1,0,0,
		0,635,643,3,126,63,0,636,637,3,126,63,0,637,640,5,40,0,0,638,641,3,126,
		63,0,639,641,5,8,0,0,640,638,1,0,0,0,640,639,1,0,0,0,641,643,1,0,0,0,642,
		635,1,0,0,0,642,636,1,0,0,0,643,125,1,0,0,0,644,645,7,3,0,0,645,127,1,
		0,0,0,89,132,139,153,160,168,182,188,196,206,210,216,225,229,235,243,249,
		258,269,275,280,283,287,290,293,296,299,304,315,319,330,341,354,365,371,
		374,388,393,396,401,404,408,412,416,420,422,428,440,449,453,457,464,468,
		473,476,481,486,491,493,499,503,509,513,517,519,527,529,537,541,546,548,
		554,562,569,573,577,581,586,590,595,599,602,605,613,617,619,622,630,640,
		642
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
