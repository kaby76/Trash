//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LarkParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LarkParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COLON=1, LC=2, RC=3, LP=4, RP=5, LB=6, RB=7, COMMA=8, DOT=9, ARROW=10, 
		IGNORE=11, IMPORT=12, OVERRIDE=13, DECLARE=14, DD=15, SQ=16, VBAR=17, 
		OP=18, RULE=19, TOKEN=20, STRING=21, REGEXP=22, NL=23, NUMBER=24, WS_INLINE=25, 
		COMMENT=26;
	public const int
		RULE_start = 0, RULE_item = 1, RULE_rule_ = 2, RULE_token = 3, RULE_rule_params = 4, 
		RULE_token_params = 5, RULE_priority = 6, RULE_statement = 7, RULE_import_path = 8, 
		RULE_name_list = 9, RULE_expansions = 10, RULE_alias = 11, RULE_expansion = 12, 
		RULE_expr = 13, RULE_atom = 14, RULE_value = 15, RULE_name = 16;
	public static readonly string[] ruleNames = {
		"start", "item", "rule_", "token", "rule_params", "token_params", "priority", 
		"statement", "import_path", "name_list", "expansions", "alias", "expansion", 
		"expr", "atom", "value", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'{'", "'}'", "'('", "')'", "'['", "']'", "','", "'.'", "'->'", 
		"'%ignore'", "'%import'", "'%override'", "'%declare'", "'..'", "'~'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COLON", "LC", "RC", "LP", "RP", "LB", "RB", "COMMA", "DOT", "ARROW", 
		"IGNORE", "IMPORT", "OVERRIDE", "DECLARE", "DD", "SQ", "VBAR", "OP", "RULE", 
		"TOKEN", "STRING", "REGEXP", "NL", "NUMBER", "WS_INLINE", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LarkParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LarkParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LarkParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LarkParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LarkParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(LarkParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(LarkParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603584L) != 0)) {
						{
						State = 34;
						item();
						}
					}

					State = 37;
					Match(NL);
					}
					} 
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1603584L) != 0)) {
				{
				State = 43;
				item();
				}
			}

			State = 46;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_() {
			return GetRuleContext<Rule_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenContext token() {
			return GetRuleContext<TokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 2, RULE_item);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				rule_();
				}
				break;
			case TOKEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				token();
				}
				break;
			case IGNORE:
			case IMPORT:
			case OVERRIDE:
			case DECLARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(LarkParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_paramsContext rule_params() {
			return GetRuleContext<Rule_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LarkParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionsContext expansions() {
			return GetRuleContext<ExpansionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PriorityContext priority() {
			return GetRuleContext<PriorityContext>(0);
		}
		public Rule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_Context rule_() {
		Rule_Context _localctx = new Rule_Context(Context, State);
		EnterRule(_localctx, 4, RULE_rule_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(RULE);
			State = 54;
			rule_params();
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 55;
				priority();
				}
			}

			State = 58;
			Match(COLON);
			State = 59;
			expansions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN() { return GetToken(LarkParser.TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Token_paramsContext token_params() {
			return GetRuleContext<Token_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LarkParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionsContext expansions() {
			return GetRuleContext<ExpansionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PriorityContext priority() {
			return GetRuleContext<PriorityContext>(0);
		}
		public TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenContext token() {
		TokenContext _localctx = new TokenContext(Context, State);
		EnterRule(_localctx, 6, RULE_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(TOKEN);
			State = 62;
			token_params();
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 63;
				priority();
				}
			}

			State = 66;
			Match(COLON);
			State = 67;
			expansions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(LarkParser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RULE() { return GetTokens(LarkParser.RULE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE(int i) {
			return GetToken(LarkParser.RULE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(LarkParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LarkParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LarkParser.COMMA, i);
		}
		public Rule_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterRule_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitRule_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_paramsContext rule_params() {
		Rule_paramsContext _localctx = new Rule_paramsContext(Context, State);
		EnterRule(_localctx, 8, RULE_rule_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LC) {
				{
				State = 69;
				Match(LC);
				State = 70;
				Match(RULE);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 71;
					Match(COMMA);
					State = 72;
					Match(RULE);
					}
					}
					State = 77;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 78;
				Match(RC);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(LarkParser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOKEN() { return GetTokens(LarkParser.TOKEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN(int i) {
			return GetToken(LarkParser.TOKEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(LarkParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LarkParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LarkParser.COMMA, i);
		}
		public Token_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterToken_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitToken_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Token_paramsContext token_params() {
		Token_paramsContext _localctx = new Token_paramsContext(Context, State);
		EnterRule(_localctx, 10, RULE_token_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LC) {
				{
				State = 81;
				Match(LC);
				State = 82;
				Match(TOKEN);
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 83;
					Match(COMMA);
					State = 84;
					Match(TOKEN);
					}
					}
					State = 89;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 90;
				Match(RC);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PriorityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LarkParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LarkParser.NUMBER, 0); }
		public PriorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_priority; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterPriority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitPriority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PriorityContext priority() {
		PriorityContext _localctx = new PriorityContext(Context, State);
		EnterRule(_localctx, 12, RULE_priority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(DOT);
			State = 94;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(LarkParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionsContext expansions() {
			return GetRuleContext<ExpansionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LarkParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_pathContext import_path() {
			return GetRuleContext<Import_pathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(LarkParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(LarkParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_() {
			return GetRuleContext<Rule_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(LarkParser.DECLARE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				Match(IGNORE);
				State = 97;
				expansions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				Match(IMPORT);
				State = 99;
				import_path();
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARROW) {
					{
					State = 100;
					Match(ARROW);
					State = 101;
					name();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				Match(IMPORT);
				State = 105;
				import_path();
				State = 106;
				name_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 108;
				Match(OVERRIDE);
				State = 109;
				rule_();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 110;
				Match(DECLARE);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 111;
					name();
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==RULE || _la==TOKEN );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_pathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LarkParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LarkParser.DOT, i);
		}
		public Import_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterImport_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitImport_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_path(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_pathContext import_path() {
		Import_pathContext _localctx = new Import_pathContext(Context, State);
		EnterRule(_localctx, 16, RULE_import_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 118;
				Match(DOT);
				}
			}

			State = 121;
			name();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 122;
				Match(DOT);
				State = 123;
				name();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(LarkParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(LarkParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LarkParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LarkParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterName_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitName_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_listContext name_list() {
		Name_listContext _localctx = new Name_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(LP);
			State = 130;
			name();
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 131;
				Match(COMMA);
				State = 132;
				name();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138;
			Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpansionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VBAR() { return GetTokens(LarkParser.VBAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR(int i) {
			return GetToken(LarkParser.VBAR, i);
		}
		public ExpansionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expansions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterExpansions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitExpansions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpansions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpansionsContext expansions() {
		ExpansionsContext _localctx = new ExpansionsContext(Context, State);
		EnterRule(_localctx, 20, RULE_expansions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			alias();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VBAR) {
				{
				{
				State = 141;
				Match(VBAR);
				State = 142;
				alias();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionContext expansion() {
			return GetRuleContext<ExpansionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(LarkParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(LarkParser.RULE, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 22, RULE_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			expansion();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 149;
				Match(ARROW);
				State = 150;
				Match(RULE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpansionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExpansionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expansion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterExpansion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitExpansion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpansion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpansionContext expansion() {
		ExpansionContext _localctx = new ExpansionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expansion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7864400L) != 0)) {
				{
				{
				State = 153;
				expr();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(LarkParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQ() { return GetToken(LarkParser.SQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(LarkParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(LarkParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DD() { return GetToken(LarkParser.DD, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			atom();
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP:
				{
				State = 160;
				Match(OP);
				}
				break;
			case SQ:
				{
				State = 161;
				Match(SQ);
				State = 162;
				Match(NUMBER);
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DD) {
					{
					State = 163;
					Match(DD);
					State = 164;
					Match(NUMBER);
					}
				}

				}
				break;
			case Eof:
			case LP:
			case RP:
			case LB:
			case RB:
			case ARROW:
			case VBAR:
			case RULE:
			case TOKEN:
			case STRING:
			case REGEXP:
			case NL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(LarkParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpansionsContext expansions() {
			return GetRuleContext<ExpansionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(LarkParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LB() { return GetToken(LarkParser.LB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RB() { return GetToken(LarkParser.RB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 28, RULE_atom);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				Match(LP);
				State = 170;
				expansions();
				State = 171;
				Match(RP);
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				Match(LB);
				State = 174;
				expansions();
				State = 175;
				Match(RB);
				}
				break;
			case RULE:
			case TOKEN:
			case STRING:
			case REGEXP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(LarkParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(LarkParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DD() { return GetToken(LarkParser.DD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(LarkParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LC() { return GetToken(LarkParser.LC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(LarkParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LarkParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LarkParser.COMMA, i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_value);
		int _la;
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				Match(STRING);
				State = 181;
				Match(DD);
				State = 182;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING || _la==REGEXP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				name();
				State = 186;
				Match(LC);
				State = 187;
				value();
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 188;
					Match(COMMA);
					State = 189;
					value();
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 195;
				Match(RC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(LarkParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN() { return GetToken(LarkParser.TOKEN, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILarkParserListener typedListener = listener as ILarkParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILarkParserVisitor<TResult> typedVisitor = visitor as ILarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 32, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !(_la==RULE || _la==TOKEN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,26,202,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,3,0,36,8,0,1,0,5,0,39,8,0,10,0,12,0,42,9,0,1,0,
		3,0,45,8,0,1,0,1,0,1,1,1,1,1,1,3,1,52,8,1,1,2,1,2,1,2,3,2,57,8,2,1,2,1,
		2,1,2,1,3,1,3,1,3,3,3,65,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,74,8,4,10,
		4,12,4,77,9,4,1,4,3,4,80,8,4,1,5,1,5,1,5,1,5,5,5,86,8,5,10,5,12,5,89,9,
		5,1,5,3,5,92,8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,103,8,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,113,8,7,11,7,12,7,114,3,7,117,8,7,1,8,3,
		8,120,8,8,1,8,1,8,1,8,5,8,125,8,8,10,8,12,8,128,9,8,1,9,1,9,1,9,1,9,5,
		9,134,8,9,10,9,12,9,137,9,9,1,9,1,9,1,10,1,10,1,10,5,10,144,8,10,10,10,
		12,10,147,9,10,1,11,1,11,1,11,3,11,152,8,11,1,12,5,12,155,8,12,10,12,12,
		12,158,9,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,166,8,13,3,13,168,8,13,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,179,8,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,191,8,15,10,15,12,15,194,9,
		15,1,15,1,15,3,15,198,8,15,1,16,1,16,1,16,0,0,17,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,0,2,1,0,21,22,1,0,19,20,216,0,40,1,0,0,0,2,51,
		1,0,0,0,4,53,1,0,0,0,6,61,1,0,0,0,8,79,1,0,0,0,10,91,1,0,0,0,12,93,1,0,
		0,0,14,116,1,0,0,0,16,119,1,0,0,0,18,129,1,0,0,0,20,140,1,0,0,0,22,148,
		1,0,0,0,24,156,1,0,0,0,26,159,1,0,0,0,28,178,1,0,0,0,30,197,1,0,0,0,32,
		199,1,0,0,0,34,36,3,2,1,0,35,34,1,0,0,0,35,36,1,0,0,0,36,37,1,0,0,0,37,
		39,5,23,0,0,38,35,1,0,0,0,39,42,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,
		44,1,0,0,0,42,40,1,0,0,0,43,45,3,2,1,0,44,43,1,0,0,0,44,45,1,0,0,0,45,
		46,1,0,0,0,46,47,5,0,0,1,47,1,1,0,0,0,48,52,3,4,2,0,49,52,3,6,3,0,50,52,
		3,14,7,0,51,48,1,0,0,0,51,49,1,0,0,0,51,50,1,0,0,0,52,3,1,0,0,0,53,54,
		5,19,0,0,54,56,3,8,4,0,55,57,3,12,6,0,56,55,1,0,0,0,56,57,1,0,0,0,57,58,
		1,0,0,0,58,59,5,1,0,0,59,60,3,20,10,0,60,5,1,0,0,0,61,62,5,20,0,0,62,64,
		3,10,5,0,63,65,3,12,6,0,64,63,1,0,0,0,64,65,1,0,0,0,65,66,1,0,0,0,66,67,
		5,1,0,0,67,68,3,20,10,0,68,7,1,0,0,0,69,70,5,2,0,0,70,75,5,19,0,0,71,72,
		5,8,0,0,72,74,5,19,0,0,73,71,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,
		1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,80,5,3,0,0,79,69,1,0,0,0,79,80,
		1,0,0,0,80,9,1,0,0,0,81,82,5,2,0,0,82,87,5,20,0,0,83,84,5,8,0,0,84,86,
		5,20,0,0,85,83,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,
		1,0,0,0,89,87,1,0,0,0,90,92,5,3,0,0,91,81,1,0,0,0,91,92,1,0,0,0,92,11,
		1,0,0,0,93,94,5,9,0,0,94,95,5,24,0,0,95,13,1,0,0,0,96,97,5,11,0,0,97,117,
		3,20,10,0,98,99,5,12,0,0,99,102,3,16,8,0,100,101,5,10,0,0,101,103,3,32,
		16,0,102,100,1,0,0,0,102,103,1,0,0,0,103,117,1,0,0,0,104,105,5,12,0,0,
		105,106,3,16,8,0,106,107,3,18,9,0,107,117,1,0,0,0,108,109,5,13,0,0,109,
		117,3,4,2,0,110,112,5,14,0,0,111,113,3,32,16,0,112,111,1,0,0,0,113,114,
		1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,96,1,0,0,0,
		116,98,1,0,0,0,116,104,1,0,0,0,116,108,1,0,0,0,116,110,1,0,0,0,117,15,
		1,0,0,0,118,120,5,9,0,0,119,118,1,0,0,0,119,120,1,0,0,0,120,121,1,0,0,
		0,121,126,3,32,16,0,122,123,5,9,0,0,123,125,3,32,16,0,124,122,1,0,0,0,
		125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,17,1,0,0,0,128,126,
		1,0,0,0,129,130,5,4,0,0,130,135,3,32,16,0,131,132,5,8,0,0,132,134,3,32,
		16,0,133,131,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,
		138,1,0,0,0,137,135,1,0,0,0,138,139,5,5,0,0,139,19,1,0,0,0,140,145,3,22,
		11,0,141,142,5,17,0,0,142,144,3,22,11,0,143,141,1,0,0,0,144,147,1,0,0,
		0,145,143,1,0,0,0,145,146,1,0,0,0,146,21,1,0,0,0,147,145,1,0,0,0,148,151,
		3,24,12,0,149,150,5,10,0,0,150,152,5,19,0,0,151,149,1,0,0,0,151,152,1,
		0,0,0,152,23,1,0,0,0,153,155,3,26,13,0,154,153,1,0,0,0,155,158,1,0,0,0,
		156,154,1,0,0,0,156,157,1,0,0,0,157,25,1,0,0,0,158,156,1,0,0,0,159,167,
		3,28,14,0,160,168,5,18,0,0,161,162,5,16,0,0,162,165,5,24,0,0,163,164,5,
		15,0,0,164,166,5,24,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,
		0,167,160,1,0,0,0,167,161,1,0,0,0,167,168,1,0,0,0,168,27,1,0,0,0,169,170,
		5,4,0,0,170,171,3,20,10,0,171,172,5,5,0,0,172,179,1,0,0,0,173,174,5,6,
		0,0,174,175,3,20,10,0,175,176,5,7,0,0,176,179,1,0,0,0,177,179,3,30,15,
		0,178,169,1,0,0,0,178,173,1,0,0,0,178,177,1,0,0,0,179,29,1,0,0,0,180,181,
		5,21,0,0,181,182,5,15,0,0,182,198,5,21,0,0,183,198,3,32,16,0,184,198,7,
		0,0,0,185,186,3,32,16,0,186,187,5,2,0,0,187,192,3,30,15,0,188,189,5,8,
		0,0,189,191,3,30,15,0,190,188,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,
		192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,195,196,5,3,0,0,196,198,
		1,0,0,0,197,180,1,0,0,0,197,183,1,0,0,0,197,184,1,0,0,0,197,185,1,0,0,
		0,198,31,1,0,0,0,199,200,7,1,0,0,200,33,1,0,0,0,24,35,40,44,51,56,64,75,
		79,87,91,102,114,116,119,126,135,145,151,156,165,167,178,192,197
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
