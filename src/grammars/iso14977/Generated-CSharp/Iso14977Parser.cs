//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Iso14977Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Iso14977Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Al=1, Bl=2, Cl=3, Dl=4, El=5, Fl=6, Gl=7, Hl=8, Il=9, Jl=10, Kl=11, Ll=12, 
		Ml=13, Nl=14, Ol=15, Pl=16, Ql=17, Rl=18, Sl=19, Tl=20, Ul=21, Vl=22, 
		Wl=23, Xl=24, Yl=25, Zl=26, Au=27, Bu=28, Cu=29, Du=30, Eu=31, Fu=32, 
		Gu=33, Hu=34, Iu=35, Ju=36, Ku=37, Lu=38, Mu=39, Nu=40, Ou=41, Pu=42, 
		Qu=43, Ru=44, Su=45, Tu=46, Uu=47, Vu=48, Wu=49, Xu=50, Yu=51, Zu=52, 
		N0=53, N1=54, N2=55, N3=56, N4=57, N5=58, N6=59, N7=60, N8=61, N9=62, 
		COMMA=63, EQUAL=64, VBAR=65, FSLASH=66, EXCL=67, STARCP=68, CP=69, CB=70, 
		FSLASH_CP=71, CC=72, COLONCP=73, HYPHEN=74, SQ=75, FSQ=76, STAR=77, DQ=78, 
		QM=79, OPSTAR=80, OP=81, OB=82, CPSLASH=83, OC=84, OPCOLON=85, SEMI=86, 
		DOT=87, SPACE=88, COLON=89, PLUS=90, UNDERSCORE=91, PERCENT=92, AT=93, 
		AMP=94, POUND=95, DOLLAR=96, LT=97, GT=98, BSLASH=99, XOR=100, BQUOTE=101, 
		TILDE=102, TAB=103, NL=104, LF=105;
	public const int
		RULE_letter = 0, RULE_decimal_digit = 1, RULE_concatenate_symbol = 2, 
		RULE_defining_symbol = 3, RULE_definition_separator_symbol = 4, RULE_end_comment_symbol = 5, 
		RULE_end_group_symbol = 6, RULE_end_option_symbol = 7, RULE_end_repeat_symbol = 8, 
		RULE_except_symbol = 9, RULE_first_quote_symbol = 10, RULE_repetition_symbol = 11, 
		RULE_second_quote_symbol = 12, RULE_special_sequence_symbol = 13, RULE_start_comment_symbol = 14, 
		RULE_start_group_symbol = 15, RULE_start_option_symbol = 16, RULE_start_repeat_symbol = 17, 
		RULE_terminator_symbol = 18, RULE_other_character = 19, RULE_space_character = 20, 
		RULE_horizontal_tabulation_character = 21, RULE_new_line = 22, RULE_vertical_tabulation_character = 23, 
		RULE_form_feed = 24, RULE_terminal_character = 25, RULE_gap_free_symbol = 26, 
		RULE_terminal_string = 27, RULE_first_terminal_character = 28, RULE_second_terminal_character = 29, 
		RULE_gap_separator = 30, RULE_syntax1 = 31, RULE_commentless_symbol = 32, 
		RULE_integer = 33, RULE_meta_identifier = 34, RULE_meta_identifier_character = 35, 
		RULE_special_sequence = 36, RULE_special_sequence_character = 37, RULE_comment_symbol = 38, 
		RULE_bracketed_textual_comment = 39, RULE_syntax2 = 40, RULE_syntax3 = 41, 
		RULE_syntax_rule = 42, RULE_definitions_list = 43, RULE_single_definition = 44, 
		RULE_syntactic_term = 45, RULE_syntactic_exception = 46, RULE_syntactic_factor = 47, 
		RULE_syntactic_primary = 48, RULE_optional_sequence = 49, RULE_repeated_sequence = 50, 
		RULE_grouped_sequence = 51, RULE_empty_sequence = 52;
	public static readonly string[] ruleNames = {
		"letter", "decimal_digit", "concatenate_symbol", "defining_symbol", "definition_separator_symbol", 
		"end_comment_symbol", "end_group_symbol", "end_option_symbol", "end_repeat_symbol", 
		"except_symbol", "first_quote_symbol", "repetition_symbol", "second_quote_symbol", 
		"special_sequence_symbol", "start_comment_symbol", "start_group_symbol", 
		"start_option_symbol", "start_repeat_symbol", "terminator_symbol", "other_character", 
		"space_character", "horizontal_tabulation_character", "new_line", "vertical_tabulation_character", 
		"form_feed", "terminal_character", "gap_free_symbol", "terminal_string", 
		"first_terminal_character", "second_terminal_character", "gap_separator", 
		"syntax1", "commentless_symbol", "integer", "meta_identifier", "meta_identifier_character", 
		"special_sequence", "special_sequence_character", "comment_symbol", "bracketed_textual_comment", 
		"syntax2", "syntax3", "syntax_rule", "definitions_list", "single_definition", 
		"syntactic_term", "syntactic_exception", "syntactic_factor", "syntactic_primary", 
		"optional_sequence", "repeated_sequence", "grouped_sequence", "empty_sequence"
	};

	private static readonly string[] _LiteralNames = {
		null, "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", "'i'", "'j'", 
		"'k'", "'l'", "'m'", "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", "'t'", 
		"'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "'A'", "'B'", "'C'", "'D'", 
		"'E'", "'F'", "'G'", "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", 
		"'O'", "'P'", "'Q'", "'R'", "'S'", "'T'", "'U'", "'V'", "'W'", "'X'", 
		"'Y'", "'Z'", "'0'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", 
		"'8'", "'9'", "','", "'='", "'|'", "'/'", "'!'", "'*)'", "')'", "']'", 
		"'/)'", "'}'", "':)'", "'-'", "'''", "'\\uFFFD'", "'*'", "'\"'", "'?'", 
		"'(*'", "'('", "'['", "'(/'", "'{'", "'(:'", "';'", "'.'", "' '", "':'", 
		"'+'", "'_'", "'%'", "'@'", "'&'", "'#'", "'$'", "'<'", "'>'", "'\\'", 
		"'^'", "'`'", "'~'", "'\\t'", "'\\n'", "'\\r'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Al", "Bl", "Cl", "Dl", "El", "Fl", "Gl", "Hl", "Il", "Jl", "Kl", 
		"Ll", "Ml", "Nl", "Ol", "Pl", "Ql", "Rl", "Sl", "Tl", "Ul", "Vl", "Wl", 
		"Xl", "Yl", "Zl", "Au", "Bu", "Cu", "Du", "Eu", "Fu", "Gu", "Hu", "Iu", 
		"Ju", "Ku", "Lu", "Mu", "Nu", "Ou", "Pu", "Qu", "Ru", "Su", "Tu", "Uu", 
		"Vu", "Wu", "Xu", "Yu", "Zu", "N0", "N1", "N2", "N3", "N4", "N5", "N6", 
		"N7", "N8", "N9", "COMMA", "EQUAL", "VBAR", "FSLASH", "EXCL", "STARCP", 
		"CP", "CB", "FSLASH_CP", "CC", "COLONCP", "HYPHEN", "SQ", "FSQ", "STAR", 
		"DQ", "QM", "OPSTAR", "OP", "OB", "CPSLASH", "OC", "OPCOLON", "SEMI", 
		"DOT", "SPACE", "COLON", "PLUS", "UNDERSCORE", "PERCENT", "AT", "AMP", 
		"POUND", "DOLLAR", "LT", "GT", "BSLASH", "XOR", "BQUOTE", "TILDE", "TAB", 
		"NL", "LF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Iso14977Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Iso14977Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Iso14977Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Iso14977Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LetterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Al() { return GetToken(Iso14977Parser.Al, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bl() { return GetToken(Iso14977Parser.Bl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cl() { return GetToken(Iso14977Parser.Cl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dl() { return GetToken(Iso14977Parser.Dl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode El() { return GetToken(Iso14977Parser.El, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fl() { return GetToken(Iso14977Parser.Fl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gl() { return GetToken(Iso14977Parser.Gl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hl() { return GetToken(Iso14977Parser.Hl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Il() { return GetToken(Iso14977Parser.Il, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Jl() { return GetToken(Iso14977Parser.Jl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kl() { return GetToken(Iso14977Parser.Kl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ll() { return GetToken(Iso14977Parser.Ll, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ml() { return GetToken(Iso14977Parser.Ml, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nl() { return GetToken(Iso14977Parser.Nl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ol() { return GetToken(Iso14977Parser.Ol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pu() { return GetToken(Iso14977Parser.Pu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ql() { return GetToken(Iso14977Parser.Ql, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rl() { return GetToken(Iso14977Parser.Rl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sl() { return GetToken(Iso14977Parser.Sl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tl() { return GetToken(Iso14977Parser.Tl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ul() { return GetToken(Iso14977Parser.Ul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vl() { return GetToken(Iso14977Parser.Vl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Wl() { return GetToken(Iso14977Parser.Wl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xl() { return GetToken(Iso14977Parser.Xl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yl() { return GetToken(Iso14977Parser.Yl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Zl() { return GetToken(Iso14977Parser.Zl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Au() { return GetToken(Iso14977Parser.Au, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bu() { return GetToken(Iso14977Parser.Bu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cu() { return GetToken(Iso14977Parser.Cu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Du() { return GetToken(Iso14977Parser.Du, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eu() { return GetToken(Iso14977Parser.Eu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fu() { return GetToken(Iso14977Parser.Fu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gu() { return GetToken(Iso14977Parser.Gu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hu() { return GetToken(Iso14977Parser.Hu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Iu() { return GetToken(Iso14977Parser.Iu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ju() { return GetToken(Iso14977Parser.Ju, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ku() { return GetToken(Iso14977Parser.Ku, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lu() { return GetToken(Iso14977Parser.Lu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mu() { return GetToken(Iso14977Parser.Mu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nu() { return GetToken(Iso14977Parser.Nu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ou() { return GetToken(Iso14977Parser.Ou, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Qu() { return GetToken(Iso14977Parser.Qu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ru() { return GetToken(Iso14977Parser.Ru, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Su() { return GetToken(Iso14977Parser.Su, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tu() { return GetToken(Iso14977Parser.Tu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uu() { return GetToken(Iso14977Parser.Uu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vu() { return GetToken(Iso14977Parser.Vu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Wu() { return GetToken(Iso14977Parser.Wu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xu() { return GetToken(Iso14977Parser.Xu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yu() { return GetToken(Iso14977Parser.Yu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Zu() { return GetToken(Iso14977Parser.Zu, 0); }
		public LetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterLetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitLetter(this);
		}
	}

	[RuleVersion(0)]
	public LetterContext letter() {
		LetterContext _localctx = new LetterContext(Context, State);
		EnterRule(_localctx, 0, RULE_letter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254675454L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decimal_digitContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N0() { return GetToken(Iso14977Parser.N0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N1() { return GetToken(Iso14977Parser.N1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N2() { return GetToken(Iso14977Parser.N2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N3() { return GetToken(Iso14977Parser.N3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N4() { return GetToken(Iso14977Parser.N4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N5() { return GetToken(Iso14977Parser.N5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N6() { return GetToken(Iso14977Parser.N6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N7() { return GetToken(Iso14977Parser.N7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N8() { return GetToken(Iso14977Parser.N8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N9() { return GetToken(Iso14977Parser.N9, 0); }
		public Decimal_digitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal_digit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterDecimal_digit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitDecimal_digit(this);
		}
	}

	[RuleVersion(0)]
	public Decimal_digitContext decimal_digit() {
		Decimal_digitContext _localctx = new Decimal_digitContext(Context, State);
		EnterRule(_localctx, 2, RULE_decimal_digit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9214364837600034816L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concatenate_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Iso14977Parser.COMMA, 0); }
		public Concatenate_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenate_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterConcatenate_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitConcatenate_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Concatenate_symbolContext concatenate_symbol() {
		Concatenate_symbolContext _localctx = new Concatenate_symbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_concatenate_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defining_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(Iso14977Parser.EQUAL, 0); }
		public Defining_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defining_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterDefining_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitDefining_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Defining_symbolContext defining_symbol() {
		Defining_symbolContext _localctx = new Defining_symbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_defining_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_separator_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR() { return GetToken(Iso14977Parser.VBAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSLASH() { return GetToken(Iso14977Parser.FSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCL() { return GetToken(Iso14977Parser.EXCL, 0); }
		public Definition_separator_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_separator_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterDefinition_separator_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitDefinition_separator_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Definition_separator_symbolContext definition_separator_symbol() {
		Definition_separator_symbolContext _localctx = new Definition_separator_symbolContext(Context, State);
		EnterRule(_localctx, 8, RULE_definition_separator_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_comment_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARCP() { return GetToken(Iso14977Parser.STARCP, 0); }
		public End_comment_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_comment_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEnd_comment_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEnd_comment_symbol(this);
		}
	}

	[RuleVersion(0)]
	public End_comment_symbolContext end_comment_symbol() {
		End_comment_symbolContext _localctx = new End_comment_symbolContext(Context, State);
		EnterRule(_localctx, 10, RULE_end_comment_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(STARCP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_group_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(Iso14977Parser.CP, 0); }
		public End_group_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_group_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEnd_group_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEnd_group_symbol(this);
		}
	}

	[RuleVersion(0)]
	public End_group_symbolContext end_group_symbol() {
		End_group_symbolContext _localctx = new End_group_symbolContext(Context, State);
		EnterRule(_localctx, 12, RULE_end_group_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(CP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_option_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(Iso14977Parser.CB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSLASH_CP() { return GetToken(Iso14977Parser.FSLASH_CP, 0); }
		public End_option_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_option_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEnd_option_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEnd_option_symbol(this);
		}
	}

	[RuleVersion(0)]
	public End_option_symbolContext end_option_symbol() {
		End_option_symbolContext _localctx = new End_option_symbolContext(Context, State);
		EnterRule(_localctx, 14, RULE_end_option_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = TokenStream.LA(1);
			if ( !(_la==CB || _la==FSLASH_CP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_repeat_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CC() { return GetToken(Iso14977Parser.CC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCP() { return GetToken(Iso14977Parser.COLONCP, 0); }
		public End_repeat_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_repeat_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEnd_repeat_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEnd_repeat_symbol(this);
		}
	}

	[RuleVersion(0)]
	public End_repeat_symbolContext end_repeat_symbol() {
		End_repeat_symbolContext _localctx = new End_repeat_symbolContext(Context, State);
		EnterRule(_localctx, 16, RULE_end_repeat_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_la = TokenStream.LA(1);
			if ( !(_la==CC || _la==COLONCP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Except_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPHEN() { return GetToken(Iso14977Parser.HYPHEN, 0); }
		public Except_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_except_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterExcept_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitExcept_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Except_symbolContext except_symbol() {
		Except_symbolContext _localctx = new Except_symbolContext(Context, State);
		EnterRule(_localctx, 18, RULE_except_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(HYPHEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_quote_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQ() { return GetToken(Iso14977Parser.SQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSQ() { return GetToken(Iso14977Parser.FSQ, 0); }
		public First_quote_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_quote_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterFirst_quote_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitFirst_quote_symbol(this);
		}
	}

	[RuleVersion(0)]
	public First_quote_symbolContext first_quote_symbol() {
		First_quote_symbolContext _localctx = new First_quote_symbolContext(Context, State);
		EnterRule(_localctx, 20, RULE_first_quote_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_la = TokenStream.LA(1);
			if ( !(_la==SQ || _la==FSQ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repetition_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Iso14977Parser.STAR, 0); }
		public Repetition_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetition_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterRepetition_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitRepetition_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Repetition_symbolContext repetition_symbol() {
		Repetition_symbolContext _localctx = new Repetition_symbolContext(Context, State);
		EnterRule(_localctx, 22, RULE_repetition_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Second_quote_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQ() { return GetToken(Iso14977Parser.DQ, 0); }
		public Second_quote_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_second_quote_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSecond_quote_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSecond_quote_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Second_quote_symbolContext second_quote_symbol() {
		Second_quote_symbolContext _localctx = new Second_quote_symbolContext(Context, State);
		EnterRule(_localctx, 24, RULE_second_quote_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(DQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_sequence_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(Iso14977Parser.QM, 0); }
		public Special_sequence_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_sequence_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSpecial_sequence_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSpecial_sequence_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Special_sequence_symbolContext special_sequence_symbol() {
		Special_sequence_symbolContext _localctx = new Special_sequence_symbolContext(Context, State);
		EnterRule(_localctx, 26, RULE_special_sequence_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(QM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_comment_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPSTAR() { return GetToken(Iso14977Parser.OPSTAR, 0); }
		public Start_comment_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_comment_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterStart_comment_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitStart_comment_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Start_comment_symbolContext start_comment_symbol() {
		Start_comment_symbolContext _localctx = new Start_comment_symbolContext(Context, State);
		EnterRule(_localctx, 28, RULE_start_comment_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(OPSTAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_group_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(Iso14977Parser.OP, 0); }
		public Start_group_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_group_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterStart_group_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitStart_group_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Start_group_symbolContext start_group_symbol() {
		Start_group_symbolContext _localctx = new Start_group_symbolContext(Context, State);
		EnterRule(_localctx, 30, RULE_start_group_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_option_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(Iso14977Parser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPSLASH() { return GetToken(Iso14977Parser.CPSLASH, 0); }
		public Start_option_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_option_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterStart_option_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitStart_option_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Start_option_symbolContext start_option_symbol() {
		Start_option_symbolContext _localctx = new Start_option_symbolContext(Context, State);
		EnterRule(_localctx, 32, RULE_start_option_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_la = TokenStream.LA(1);
			if ( !(_la==OB || _la==CPSLASH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_repeat_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OC() { return GetToken(Iso14977Parser.OC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPCOLON() { return GetToken(Iso14977Parser.OPCOLON, 0); }
		public Start_repeat_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_repeat_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterStart_repeat_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitStart_repeat_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Start_repeat_symbolContext start_repeat_symbol() {
		Start_repeat_symbolContext _localctx = new Start_repeat_symbolContext(Context, State);
		EnterRule(_localctx, 34, RULE_start_repeat_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !(_la==OC || _la==OPCOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminator_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(Iso14977Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Iso14977Parser.DOT, 0); }
		public Terminator_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterTerminator_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitTerminator_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Terminator_symbolContext terminator_symbol() {
		Terminator_symbolContext _localctx = new Terminator_symbolContext(Context, State);
		EnterRule(_localctx, 36, RULE_terminator_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = TokenStream.LA(1);
			if ( !(_la==SEMI || _la==DOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(Iso14977Parser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Iso14977Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Iso14977Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(Iso14977Parser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(Iso14977Parser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Iso14977Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(Iso14977Parser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(Iso14977Parser.POUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(Iso14977Parser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Iso14977Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Iso14977Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BSLASH() { return GetToken(Iso14977Parser.BSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(Iso14977Parser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BQUOTE() { return GetToken(Iso14977Parser.BQUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(Iso14977Parser.TILDE, 0); }
		public Other_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterOther_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitOther_character(this);
		}
	}

	[RuleVersion(0)]
	public Other_characterContext other_character() {
		Other_characterContext _localctx = new Other_characterContext(Context, State);
		EnterRule(_localctx, 38, RULE_other_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 32767L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Space_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(Iso14977Parser.SPACE, 0); }
		public Space_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_space_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSpace_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSpace_character(this);
		}
	}

	[RuleVersion(0)]
	public Space_characterContext space_character() {
		Space_characterContext _localctx = new Space_characterContext(Context, State);
		EnterRule(_localctx, 40, RULE_space_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(SPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Horizontal_tabulation_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(Iso14977Parser.TAB, 0); }
		public Horizontal_tabulation_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontal_tabulation_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterHorizontal_tabulation_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitHorizontal_tabulation_character(this);
		}
	}

	[RuleVersion(0)]
	public Horizontal_tabulation_characterContext horizontal_tabulation_character() {
		Horizontal_tabulation_characterContext _localctx = new Horizontal_tabulation_characterContext(Context, State);
		EnterRule(_localctx, 42, RULE_horizontal_tabulation_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(TAB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_lineContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(Iso14977Parser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(Iso14977Parser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LF() { return GetTokens(Iso14977Parser.LF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LF(int i) {
			return GetToken(Iso14977Parser.LF, i);
		}
		public New_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterNew_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitNew_line(this);
		}
	}

	[RuleVersion(0)]
	public New_lineContext new_line() {
		New_lineContext _localctx = new New_lineContext(Context, State);
		EnterRule(_localctx, 44, RULE_new_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 150;
					_la = TokenStream.LA(1);
					if ( !(_la==NL || _la==LF) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vertical_tabulation_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LF() { return GetToken(Iso14977Parser.LF, 0); }
		public Vertical_tabulation_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertical_tabulation_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterVertical_tabulation_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitVertical_tabulation_character(this);
		}
	}

	[RuleVersion(0)]
	public Vertical_tabulation_characterContext vertical_tabulation_character() {
		Vertical_tabulation_characterContext _localctx = new Vertical_tabulation_characterContext(Context, State);
		EnterRule(_localctx, 46, RULE_vertical_tabulation_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(LF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Form_feedContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(Iso14977Parser.NL, 0); }
		public Form_feedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form_feed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterForm_feed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitForm_feed(this);
		}
	}

	[RuleVersion(0)]
	public Form_feedContext form_feed() {
		Form_feedContext _localctx = new Form_feedContext(Context, State);
		EnterRule(_localctx, 48, RULE_form_feed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext letter() {
			return GetRuleContext<LetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_digitContext decimal_digit() {
			return GetRuleContext<Decimal_digitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concatenate_symbolContext concatenate_symbol() {
			return GetRuleContext<Concatenate_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defining_symbolContext defining_symbol() {
			return GetRuleContext<Defining_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_separator_symbolContext definition_separator_symbol() {
			return GetRuleContext<Definition_separator_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_comment_symbolContext end_comment_symbol() {
			return GetRuleContext<End_comment_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_group_symbolContext end_group_symbol() {
			return GetRuleContext<End_group_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_option_symbolContext end_option_symbol() {
			return GetRuleContext<End_option_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_repeat_symbolContext end_repeat_symbol() {
			return GetRuleContext<End_repeat_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_symbolContext except_symbol() {
			return GetRuleContext<Except_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public First_quote_symbolContext first_quote_symbol() {
			return GetRuleContext<First_quote_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repetition_symbolContext repetition_symbol() {
			return GetRuleContext<Repetition_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_quote_symbolContext second_quote_symbol() {
			return GetRuleContext<Second_quote_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_symbolContext special_sequence_symbol() {
			return GetRuleContext<Special_sequence_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Start_comment_symbolContext start_comment_symbol() {
			return GetRuleContext<Start_comment_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Start_group_symbolContext start_group_symbol() {
			return GetRuleContext<Start_group_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Start_option_symbolContext start_option_symbol() {
			return GetRuleContext<Start_option_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Start_repeat_symbolContext start_repeat_symbol() {
			return GetRuleContext<Start_repeat_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminator_symbolContext terminator_symbol() {
			return GetRuleContext<Terminator_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_characterContext other_character() {
			return GetRuleContext<Other_characterContext>(0);
		}
		public Terminal_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterTerminal_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitTerminal_character(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_characterContext terminal_character() {
		Terminal_characterContext _localctx = new Terminal_characterContext(Context, State);
		EnterRule(_localctx, 50, RULE_terminal_character);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Al:
			case Bl:
			case Cl:
			case Dl:
			case El:
			case Fl:
			case Gl:
			case Hl:
			case Il:
			case Jl:
			case Kl:
			case Ll:
			case Ml:
			case Nl:
			case Ol:
			case Ql:
			case Rl:
			case Sl:
			case Tl:
			case Ul:
			case Vl:
			case Wl:
			case Xl:
			case Yl:
			case Zl:
			case Au:
			case Bu:
			case Cu:
			case Du:
			case Eu:
			case Fu:
			case Gu:
			case Hu:
			case Iu:
			case Ju:
			case Ku:
			case Lu:
			case Mu:
			case Nu:
			case Ou:
			case Pu:
			case Qu:
			case Ru:
			case Su:
			case Tu:
			case Uu:
			case Vu:
			case Wu:
			case Xu:
			case Yu:
			case Zu:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				letter();
				}
				break;
			case N0:
			case N1:
			case N2:
			case N3:
			case N4:
			case N5:
			case N6:
			case N7:
			case N8:
			case N9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				decimal_digit();
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				concatenate_symbol();
				}
				break;
			case EQUAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 162;
				defining_symbol();
				}
				break;
			case VBAR:
			case FSLASH:
			case EXCL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 163;
				definition_separator_symbol();
				}
				break;
			case STARCP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 164;
				end_comment_symbol();
				}
				break;
			case CP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 165;
				end_group_symbol();
				}
				break;
			case CB:
			case FSLASH_CP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 166;
				end_option_symbol();
				}
				break;
			case CC:
			case COLONCP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 167;
				end_repeat_symbol();
				}
				break;
			case HYPHEN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 168;
				except_symbol();
				}
				break;
			case SQ:
			case FSQ:
				EnterOuterAlt(_localctx, 11);
				{
				State = 169;
				first_quote_symbol();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 12);
				{
				State = 170;
				repetition_symbol();
				}
				break;
			case DQ:
				EnterOuterAlt(_localctx, 13);
				{
				State = 171;
				second_quote_symbol();
				}
				break;
			case QM:
				EnterOuterAlt(_localctx, 14);
				{
				State = 172;
				special_sequence_symbol();
				}
				break;
			case OPSTAR:
				EnterOuterAlt(_localctx, 15);
				{
				State = 173;
				start_comment_symbol();
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 16);
				{
				State = 174;
				start_group_symbol();
				}
				break;
			case OB:
			case CPSLASH:
				EnterOuterAlt(_localctx, 17);
				{
				State = 175;
				start_option_symbol();
				}
				break;
			case OC:
			case OPCOLON:
				EnterOuterAlt(_localctx, 18);
				{
				State = 176;
				start_repeat_symbol();
				}
				break;
			case SEMI:
			case DOT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 177;
				terminator_symbol();
				}
				break;
			case SPACE:
			case COLON:
			case PLUS:
			case UNDERSCORE:
			case PERCENT:
			case AT:
			case AMP:
			case POUND:
			case DOLLAR:
			case LT:
			case GT:
			case BSLASH:
			case XOR:
			case BQUOTE:
			case TILDE:
				EnterOuterAlt(_localctx, 20);
				{
				State = 178;
				other_character();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gap_free_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_stringContext terminal_string() {
			return GetRuleContext<Terminal_stringContext>(0);
		}
		public Gap_free_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gap_free_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterGap_free_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitGap_free_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Gap_free_symbolContext gap_free_symbol() {
		Gap_free_symbolContext _localctx = new Gap_free_symbolContext(Context, State);
		EnterRule(_localctx, 52, RULE_gap_free_symbol);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				if (!( !(
				    InputStream.LA(1) == SQ
				    || InputStream.LA(1) == FSQ
				    || InputStream.LA(1) == DQ
				    ) )) throw new FailedPredicateException(this, " !(\n    InputStream.LA(1) == SQ\n    || InputStream.LA(1) == FSQ\n    || InputStream.LA(1) == DQ\n    ) ");
				State = 182;
				terminal_character();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				terminal_string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_stringContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public First_quote_symbolContext[] first_quote_symbol() {
			return GetRuleContexts<First_quote_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public First_quote_symbolContext first_quote_symbol(int i) {
			return GetRuleContext<First_quote_symbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public First_terminal_characterContext[] first_terminal_character() {
			return GetRuleContexts<First_terminal_characterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public First_terminal_characterContext first_terminal_character(int i) {
			return GetRuleContext<First_terminal_characterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_quote_symbolContext[] second_quote_symbol() {
			return GetRuleContexts<Second_quote_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_quote_symbolContext second_quote_symbol(int i) {
			return GetRuleContext<Second_quote_symbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_terminal_characterContext[] second_terminal_character() {
			return GetRuleContexts<Second_terminal_characterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Second_terminal_characterContext second_terminal_character(int i) {
			return GetRuleContext<Second_terminal_characterContext>(i);
		}
		public Terminal_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterTerminal_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitTerminal_string(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_stringContext terminal_string() {
		Terminal_stringContext _localctx = new Terminal_stringContext(Context, State);
		EnterRule(_localctx, 54, RULE_terminal_string);
		try {
			int _alt;
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQ:
			case FSQ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				first_quote_symbol();
				State = 188;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 187;
						first_terminal_character();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 190;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 192;
				first_quote_symbol();
				}
				break;
			case DQ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				second_quote_symbol();
				State = 196;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 195;
						second_terminal_character();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 198;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 200;
				second_quote_symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_terminal_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		public First_terminal_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_terminal_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterFirst_terminal_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitFirst_terminal_character(this);
		}
	}

	[RuleVersion(0)]
	public First_terminal_characterContext first_terminal_character() {
		First_terminal_characterContext _localctx = new First_terminal_characterContext(Context, State);
		EnterRule(_localctx, 56, RULE_first_terminal_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			if (!( !(
			    InputStream.LA(1) == SQ
			    || InputStream.LA(1) == FSQ
			    ) )) throw new FailedPredicateException(this, " !(\n    InputStream.LA(1) == SQ\n    || InputStream.LA(1) == FSQ\n    ) ");
			State = 205;
			terminal_character();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Second_terminal_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		public Second_terminal_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_second_terminal_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSecond_terminal_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSecond_terminal_character(this);
		}
	}

	[RuleVersion(0)]
	public Second_terminal_characterContext second_terminal_character() {
		Second_terminal_characterContext _localctx = new Second_terminal_characterContext(Context, State);
		EnterRule(_localctx, 58, RULE_second_terminal_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			if (!( !(
			    InputStream.LA(1) == DQ
			    ) )) throw new FailedPredicateException(this, " !(\n    InputStream.LA(1) == DQ\n    ) ");
			State = 208;
			terminal_character();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gap_separatorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Space_characterContext space_character() {
			return GetRuleContext<Space_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Horizontal_tabulation_characterContext horizontal_tabulation_character() {
			return GetRuleContext<Horizontal_tabulation_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public New_lineContext new_line() {
			return GetRuleContext<New_lineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vertical_tabulation_characterContext vertical_tabulation_character() {
			return GetRuleContext<Vertical_tabulation_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Form_feedContext form_feed() {
			return GetRuleContext<Form_feedContext>(0);
		}
		public Gap_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gap_separator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterGap_separator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitGap_separator(this);
		}
	}

	[RuleVersion(0)]
	public Gap_separatorContext gap_separator() {
		Gap_separatorContext _localctx = new Gap_separatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_gap_separator);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				space_character();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				horizontal_tabulation_character();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212;
				new_line();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 213;
				vertical_tabulation_character();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 214;
				form_feed();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntax1Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Iso14977Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Gap_separatorContext[] gap_separator() {
			return GetRuleContexts<Gap_separatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gap_separatorContext gap_separator(int i) {
			return GetRuleContext<Gap_separatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gap_free_symbolContext[] gap_free_symbol() {
			return GetRuleContexts<Gap_free_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gap_free_symbolContext gap_free_symbol(int i) {
			return GetRuleContext<Gap_free_symbolContext>(i);
		}
		public Syntax1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntax1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntax1(this);
		}
	}

	[RuleVersion(0)]
	public Syntax1Context syntax1() {
		Syntax1Context _localctx = new Syntax1Context(Context, State);
		EnterRule(_localctx, 62, RULE_syntax1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 217;
					gap_separator();
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 230;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 223;
					gap_free_symbol();
					State = 227;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 224;
							gap_separator();
							}
							} 
						}
						State = 229;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 234;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commentless_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifierContext meta_identifier() {
			return GetRuleContext<Meta_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_stringContext terminal_string() {
			return GetRuleContext<Terminal_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequenceContext special_sequence() {
			return GetRuleContext<Special_sequenceContext>(0);
		}
		public Commentless_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentless_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterCommentless_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitCommentless_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Commentless_symbolContext commentless_symbol() {
		Commentless_symbolContext _localctx = new Commentless_symbolContext(Context, State);
		EnterRule(_localctx, 64, RULE_commentless_symbol);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				if (!( !(
				    (InputStream.LA(1) >= Al && InputStream.LA(1) <= Zl)
				    || (InputStream.LA(1) >= Au && InputStream.LA(1) <= Zu)

				    || (InputStream.LA(1) >= N0 && InputStream.LA(1) <= N9)

				    || InputStream.LA(1) == SQ
				    || InputStream.LA(1) == FSQ

				    || InputStream.LA(1) == DQ

				    || InputStream.LA(1) == STARCP

				    || InputStream.LA(1) == OPSTAR

				    || InputStream.LA(1) == QM
				    || InputStream.LA(1) == COLON
				    || InputStream.LA(1) == PLUS
				    || InputStream.LA(1) == UNDERSCORE
				    || InputStream.LA(1) == PERCENT
				    || InputStream.LA(1) == AT
				    || InputStream.LA(1) == AMP
				    || InputStream.LA(1) == POUND
				    || InputStream.LA(1) == DOLLAR
				    || InputStream.LA(1) == POUND
				    || InputStream.LA(1) == LT
				    || InputStream.LA(1) == GT
				    || InputStream.LA(1) == BSLASH
				    || InputStream.LA(1) == XOR
				    || InputStream.LA(1) == BQUOTE
				    || InputStream.LA(1) == TILDE
				    ) )) throw new FailedPredicateException(this, " !(\n    (InputStream.LA(1) >= Al && InputStream.LA(1) <= Zl)\n    || (InputStream.LA(1) >= Au && InputStream.LA(1) <= Zu)\n\n    || (InputStream.LA(1) >= N0 && InputStream.LA(1) <= N9)\n\n    || InputStream.LA(1) == SQ\n    || InputStream.LA(1) == FSQ\n\n    || InputStream.LA(1) == DQ\n\n    || InputStream.LA(1) == STARCP\n\n    || InputStream.LA(1) == OPSTAR\n\n    || InputStream.LA(1) == QM\n    || InputStream.LA(1) == COLON\n    || InputStream.LA(1) == PLUS\n    || InputStream.LA(1) == UNDERSCORE\n    || InputStream.LA(1) == PERCENT\n    || InputStream.LA(1) == AT\n    || InputStream.LA(1) == AMP\n    || InputStream.LA(1) == POUND\n    || InputStream.LA(1) == DOLLAR\n    || InputStream.LA(1) == POUND\n    || InputStream.LA(1) == LT\n    || InputStream.LA(1) == GT\n    || InputStream.LA(1) == BSLASH\n    || InputStream.LA(1) == XOR\n    || InputStream.LA(1) == BQUOTE\n    || InputStream.LA(1) == TILDE\n    ) ");
				State = 237;
				terminal_character();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				meta_identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 239;
				integer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 240;
				terminal_string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 241;
				special_sequence();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_digitContext[] decimal_digit() {
			return GetRuleContexts<Decimal_digitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_digitContext decimal_digit(int i) {
			return GetRuleContext<Decimal_digitContext>(i);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 66, RULE_integer);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			decimal_digit();
			State = 248;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 245;
					decimal_digit();
					}
					} 
				}
				State = 250;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_identifierContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext letter() {
			return GetRuleContext<LetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifier_characterContext[] meta_identifier_character() {
			return GetRuleContexts<Meta_identifier_characterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifier_characterContext meta_identifier_character(int i) {
			return GetRuleContext<Meta_identifier_characterContext>(i);
		}
		public Meta_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterMeta_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitMeta_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Meta_identifierContext meta_identifier() {
		Meta_identifierContext _localctx = new Meta_identifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_meta_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			letter();
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 252;
					meta_identifier_character();
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_identifier_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext letter() {
			return GetRuleContext<LetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_digitContext decimal_digit() {
			return GetRuleContext<Decimal_digitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Space_characterContext space_character() {
			return GetRuleContext<Space_characterContext>(0);
		}
		public Meta_identifier_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_identifier_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterMeta_identifier_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitMeta_identifier_character(this);
		}
	}

	[RuleVersion(0)]
	public Meta_identifier_characterContext meta_identifier_character() {
		Meta_identifier_characterContext _localctx = new Meta_identifier_characterContext(Context, State);
		EnterRule(_localctx, 70, RULE_meta_identifier_character);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Al:
			case Bl:
			case Cl:
			case Dl:
			case El:
			case Fl:
			case Gl:
			case Hl:
			case Il:
			case Jl:
			case Kl:
			case Ll:
			case Ml:
			case Nl:
			case Ol:
			case Ql:
			case Rl:
			case Sl:
			case Tl:
			case Ul:
			case Vl:
			case Wl:
			case Xl:
			case Yl:
			case Zl:
			case Au:
			case Bu:
			case Cu:
			case Du:
			case Eu:
			case Fu:
			case Gu:
			case Hu:
			case Iu:
			case Ju:
			case Ku:
			case Lu:
			case Mu:
			case Nu:
			case Ou:
			case Pu:
			case Qu:
			case Ru:
			case Su:
			case Tu:
			case Uu:
			case Vu:
			case Wu:
			case Xu:
			case Yu:
			case Zu:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				letter();
				}
				break;
			case N0:
			case N1:
			case N2:
			case N3:
			case N4:
			case N5:
			case N6:
			case N7:
			case N8:
			case N9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				decimal_digit();
				}
				break;
			case SPACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				space_character();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_sequenceContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_symbolContext[] special_sequence_symbol() {
			return GetRuleContexts<Special_sequence_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_symbolContext special_sequence_symbol(int i) {
			return GetRuleContext<Special_sequence_symbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_characterContext[] special_sequence_character() {
			return GetRuleContexts<Special_sequence_characterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequence_characterContext special_sequence_character(int i) {
			return GetRuleContext<Special_sequence_characterContext>(i);
		}
		public Special_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSpecial_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSpecial_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Special_sequenceContext special_sequence() {
		Special_sequenceContext _localctx = new Special_sequenceContext(Context, State);
		EnterRule(_localctx, 72, RULE_special_sequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			special_sequence_symbol();
			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 264;
					special_sequence_character();
					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 270;
			special_sequence_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_sequence_characterContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_characterContext terminal_character() {
			return GetRuleContext<Terminal_characterContext>(0);
		}
		public Special_sequence_characterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_sequence_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSpecial_sequence_character(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSpecial_sequence_character(this);
		}
	}

	[RuleVersion(0)]
	public Special_sequence_characterContext special_sequence_character() {
		Special_sequence_characterContext _localctx = new Special_sequence_characterContext(Context, State);
		EnterRule(_localctx, 74, RULE_special_sequence_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			if (!( !(
			    InputStream.LA(1) == QM
			    ) )) throw new FailedPredicateException(this, " !(\n    InputStream.LA(1) == QM\n    ) ");
			State = 273;
			terminal_character();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_symbolContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Bracketed_textual_commentContext bracketed_textual_comment() {
			return GetRuleContext<Bracketed_textual_commentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_characterContext other_character() {
			return GetRuleContext<Other_characterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commentless_symbolContext commentless_symbol() {
			return GetRuleContext<Commentless_symbolContext>(0);
		}
		public Comment_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterComment_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitComment_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Comment_symbolContext comment_symbol() {
		Comment_symbolContext _localctx = new Comment_symbolContext(Context, State);
		EnterRule(_localctx, 76, RULE_comment_symbol);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				bracketed_textual_comment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				other_character();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 277;
				commentless_symbol();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracketed_textual_commentContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Start_comment_symbolContext start_comment_symbol() {
			return GetRuleContext<Start_comment_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_comment_symbolContext end_comment_symbol() {
			return GetRuleContext<End_comment_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comment_symbolContext[] comment_symbol() {
			return GetRuleContexts<Comment_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comment_symbolContext comment_symbol(int i) {
			return GetRuleContext<Comment_symbolContext>(i);
		}
		public Bracketed_textual_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketed_textual_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterBracketed_textual_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitBracketed_textual_comment(this);
		}
	}

	[RuleVersion(0)]
	public Bracketed_textual_commentContext bracketed_textual_comment() {
		Bracketed_textual_commentContext _localctx = new Bracketed_textual_commentContext(Context, State);
		EnterRule(_localctx, 78, RULE_bracketed_textual_comment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			start_comment_symbol();
			State = 284;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 281;
					comment_symbol();
					}
					} 
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 287;
			end_comment_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntax2Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Commentless_symbolContext[] commentless_symbol() {
			return GetRuleContexts<Commentless_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commentless_symbolContext commentless_symbol(int i) {
			return GetRuleContext<Commentless_symbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Iso14977Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bracketed_textual_commentContext[] bracketed_textual_comment() {
			return GetRuleContexts<Bracketed_textual_commentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracketed_textual_commentContext bracketed_textual_comment(int i) {
			return GetRuleContext<Bracketed_textual_commentContext>(i);
		}
		public Syntax2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntax2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntax2(this);
		}
	}

	[RuleVersion(0)]
	public Syntax2Context syntax2() {
		Syntax2Context _localctx = new Syntax2Context(Context, State);
		EnterRule(_localctx, 80, RULE_syntax2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 289;
					bracketed_textual_comment();
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 295;
			commentless_symbol();
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 296;
					bracketed_textual_comment();
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 302;
					commentless_symbol();
					State = 306;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 303;
							bracketed_textual_comment();
							}
							} 
						}
						State = 308;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
					}
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 314;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntax3Context : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntax_ruleContext[] syntax_rule() {
			return GetRuleContexts<Syntax_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Syntax_ruleContext syntax_rule(int i) {
			return GetRuleContext<Syntax_ruleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Iso14977Parser.Eof, 0); }
		public Syntax3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntax3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntax3(this);
		}
	}

	[RuleVersion(0)]
	public Syntax3Context syntax3() {
		Syntax3Context _localctx = new Syntax3Context(Context, State);
		EnterRule(_localctx, 82, RULE_syntax3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			syntax_rule();
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254675454L) != 0)) {
				{
				{
				State = 317;
				syntax_rule();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 323;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntax_ruleContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifierContext meta_identifier() {
			return GetRuleContext<Meta_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defining_symbolContext defining_symbol() {
			return GetRuleContext<Defining_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definitions_listContext definitions_list() {
			return GetRuleContext<Definitions_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminator_symbolContext terminator_symbol() {
			return GetRuleContext<Terminator_symbolContext>(0);
		}
		public Syntax_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntax_rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntax_rule(this);
		}
	}

	[RuleVersion(0)]
	public Syntax_ruleContext syntax_rule() {
		Syntax_ruleContext _localctx = new Syntax_ruleContext(Context, State);
		EnterRule(_localctx, 84, RULE_syntax_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			meta_identifier();
			State = 326;
			defining_symbol();
			State = 327;
			definitions_list();
			State = 328;
			terminator_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definitions_listContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Single_definitionContext[] single_definition() {
			return GetRuleContexts<Single_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_definitionContext single_definition(int i) {
			return GetRuleContext<Single_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_separator_symbolContext[] definition_separator_symbol() {
			return GetRuleContexts<Definition_separator_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_separator_symbolContext definition_separator_symbol(int i) {
			return GetRuleContext<Definition_separator_symbolContext>(i);
		}
		public Definitions_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitions_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterDefinitions_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitDefinitions_list(this);
		}
	}

	[RuleVersion(0)]
	public Definitions_listContext definitions_list() {
		Definitions_listContext _localctx = new Definitions_listContext(Context, State);
		EnterRule(_localctx, 86, RULE_definitions_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			single_definition();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7L) != 0)) {
				{
				{
				State = 331;
				definition_separator_symbol();
				State = 332;
				single_definition();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_definitionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_termContext[] syntactic_term() {
			return GetRuleContexts<Syntactic_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_termContext syntactic_term(int i) {
			return GetRuleContext<Syntactic_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concatenate_symbolContext[] concatenate_symbol() {
			return GetRuleContexts<Concatenate_symbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concatenate_symbolContext concatenate_symbol(int i) {
			return GetRuleContext<Concatenate_symbolContext>(i);
		}
		public Single_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSingle_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSingle_definition(this);
		}
	}

	[RuleVersion(0)]
	public Single_definitionContext single_definition() {
		Single_definitionContext _localctx = new Single_definitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_single_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			syntactic_term();
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 340;
				concatenate_symbol();
				State = 341;
				syntactic_term();
				}
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntactic_termContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_factorContext syntactic_factor() {
			return GetRuleContext<Syntactic_factorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_symbolContext except_symbol() {
			return GetRuleContext<Except_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_exceptionContext syntactic_exception() {
			return GetRuleContext<Syntactic_exceptionContext>(0);
		}
		public Syntactic_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntactic_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntactic_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntactic_term(this);
		}
	}

	[RuleVersion(0)]
	public Syntactic_termContext syntactic_term() {
		Syntactic_termContext _localctx = new Syntactic_termContext(Context, State);
		EnterRule(_localctx, 90, RULE_syntactic_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			syntactic_factor();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HYPHEN) {
				{
				State = 349;
				except_symbol();
				State = 350;
				syntactic_exception();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntactic_exceptionContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_factorContext syntactic_factor() {
			return GetRuleContext<Syntactic_factorContext>(0);
		}
		public Syntactic_exceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntactic_exception; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntactic_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntactic_exception(this);
		}
	}

	[RuleVersion(0)]
	public Syntactic_exceptionContext syntactic_exception() {
		Syntactic_exceptionContext _localctx = new Syntactic_exceptionContext(Context, State);
		EnterRule(_localctx, 92, RULE_syntactic_exception);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			syntactic_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntactic_factorContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Syntactic_primaryContext syntactic_primary() {
			return GetRuleContext<Syntactic_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repetition_symbolContext repetition_symbol() {
			return GetRuleContext<Repetition_symbolContext>(0);
		}
		public Syntactic_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntactic_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntactic_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntactic_factor(this);
		}
	}

	[RuleVersion(0)]
	public Syntactic_factorContext syntactic_factor() {
		Syntactic_factorContext _localctx = new Syntactic_factorContext(Context, State);
		EnterRule(_localctx, 94, RULE_syntactic_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9214364837600034816L) != 0)) {
				{
				State = 356;
				integer();
				State = 357;
				repetition_symbol();
				}
			}

			State = 361;
			syntactic_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Syntactic_primaryContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Optional_sequenceContext optional_sequence() {
			return GetRuleContext<Optional_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeated_sequenceContext repeated_sequence() {
			return GetRuleContext<Repeated_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_sequenceContext grouped_sequence() {
			return GetRuleContext<Grouped_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_identifierContext meta_identifier() {
			return GetRuleContext<Meta_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_stringContext terminal_string() {
			return GetRuleContext<Terminal_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Special_sequenceContext special_sequence() {
			return GetRuleContext<Special_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_sequenceContext empty_sequence() {
			return GetRuleContext<Empty_sequenceContext>(0);
		}
		public Syntactic_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntactic_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterSyntactic_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitSyntactic_primary(this);
		}
	}

	[RuleVersion(0)]
	public Syntactic_primaryContext syntactic_primary() {
		Syntactic_primaryContext _localctx = new Syntactic_primaryContext(Context, State);
		EnterRule(_localctx, 96, RULE_syntactic_primary);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OB:
			case CPSLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 363;
				optional_sequence();
				}
				break;
			case OC:
			case OPCOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				repeated_sequence();
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365;
				grouped_sequence();
				}
				break;
			case Al:
			case Bl:
			case Cl:
			case Dl:
			case El:
			case Fl:
			case Gl:
			case Hl:
			case Il:
			case Jl:
			case Kl:
			case Ll:
			case Ml:
			case Nl:
			case Ol:
			case Ql:
			case Rl:
			case Sl:
			case Tl:
			case Ul:
			case Vl:
			case Wl:
			case Xl:
			case Yl:
			case Zl:
			case Au:
			case Bu:
			case Cu:
			case Du:
			case Eu:
			case Fu:
			case Gu:
			case Hu:
			case Iu:
			case Ju:
			case Ku:
			case Lu:
			case Mu:
			case Nu:
			case Ou:
			case Pu:
			case Qu:
			case Ru:
			case Su:
			case Tu:
			case Uu:
			case Vu:
			case Wu:
			case Xu:
			case Yu:
			case Zu:
				EnterOuterAlt(_localctx, 4);
				{
				State = 366;
				meta_identifier();
				}
				break;
			case SQ:
			case FSQ:
			case DQ:
				EnterOuterAlt(_localctx, 5);
				{
				State = 367;
				terminal_string();
				}
				break;
			case QM:
				EnterOuterAlt(_localctx, 6);
				{
				State = 368;
				special_sequence();
				}
				break;
			case COMMA:
			case VBAR:
			case FSLASH:
			case EXCL:
			case CP:
			case CB:
			case FSLASH_CP:
			case CC:
			case COLONCP:
			case HYPHEN:
			case SEMI:
			case DOT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 369;
				empty_sequence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_sequenceContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Start_option_symbolContext start_option_symbol() {
			return GetRuleContext<Start_option_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definitions_listContext definitions_list() {
			return GetRuleContext<Definitions_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_option_symbolContext end_option_symbol() {
			return GetRuleContext<End_option_symbolContext>(0);
		}
		public Optional_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterOptional_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitOptional_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Optional_sequenceContext optional_sequence() {
		Optional_sequenceContext _localctx = new Optional_sequenceContext(Context, State);
		EnterRule(_localctx, 98, RULE_optional_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			start_option_symbol();
			State = 373;
			definitions_list();
			State = 374;
			end_option_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeated_sequenceContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Start_repeat_symbolContext start_repeat_symbol() {
			return GetRuleContext<Start_repeat_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definitions_listContext definitions_list() {
			return GetRuleContext<Definitions_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_repeat_symbolContext end_repeat_symbol() {
			return GetRuleContext<End_repeat_symbolContext>(0);
		}
		public Repeated_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeated_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterRepeated_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitRepeated_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Repeated_sequenceContext repeated_sequence() {
		Repeated_sequenceContext _localctx = new Repeated_sequenceContext(Context, State);
		EnterRule(_localctx, 100, RULE_repeated_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			start_repeat_symbol();
			State = 377;
			definitions_list();
			State = 378;
			end_repeat_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouped_sequenceContext : AttributedParseTreeNode {
		[System.Diagnostics.DebuggerNonUserCode] public Start_group_symbolContext start_group_symbol() {
			return GetRuleContext<Start_group_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definitions_listContext definitions_list() {
			return GetRuleContext<Definitions_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_group_symbolContext end_group_symbol() {
			return GetRuleContext<End_group_symbolContext>(0);
		}
		public Grouped_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterGrouped_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitGrouped_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_sequenceContext grouped_sequence() {
		Grouped_sequenceContext _localctx = new Grouped_sequenceContext(Context, State);
		EnterRule(_localctx, 102, RULE_grouped_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			start_group_symbol();
			State = 381;
			definitions_list();
			State = 382;
			end_group_symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_sequenceContext : AttributedParseTreeNode {
		public Empty_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.EnterEmpty_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIso14977ParserListener typedListener = listener as IIso14977ParserListener;
			if (typedListener != null) typedListener.ExitEmpty_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Empty_sequenceContext empty_sequence() {
		Empty_sequenceContext _localctx = new Empty_sequenceContext(Context, State);
		EnterRule(_localctx, 104, RULE_empty_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return gap_free_symbol_sempred((Gap_free_symbolContext)_localctx, predIndex);
		case 28: return first_terminal_character_sempred((First_terminal_characterContext)_localctx, predIndex);
		case 29: return second_terminal_character_sempred((Second_terminal_characterContext)_localctx, predIndex);
		case 32: return commentless_symbol_sempred((Commentless_symbolContext)_localctx, predIndex);
		case 37: return special_sequence_character_sempred((Special_sequence_characterContext)_localctx, predIndex);
		}
		return true;
	}
	private bool gap_free_symbol_sempred(Gap_free_symbolContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  !(
		    InputStream.LA(1) == SQ
		    || InputStream.LA(1) == FSQ
		    || InputStream.LA(1) == DQ
		    ) ;
		}
		return true;
	}
	private bool first_terminal_character_sempred(First_terminal_characterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return  !(
		    InputStream.LA(1) == SQ
		    || InputStream.LA(1) == FSQ
		    ) ;
		}
		return true;
	}
	private bool second_terminal_character_sempred(Second_terminal_characterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return  !(
		    InputStream.LA(1) == DQ
		    ) ;
		}
		return true;
	}
	private bool commentless_symbol_sempred(Commentless_symbolContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return  !(
		    (InputStream.LA(1) >= Al && InputStream.LA(1) <= Zl)
		    || (InputStream.LA(1) >= Au && InputStream.LA(1) <= Zu)

		    || (InputStream.LA(1) >= N0 && InputStream.LA(1) <= N9)

		    || InputStream.LA(1) == SQ
		    || InputStream.LA(1) == FSQ

		    || InputStream.LA(1) == DQ

		    || InputStream.LA(1) == STARCP

		    || InputStream.LA(1) == OPSTAR

		    || InputStream.LA(1) == QM
		    || InputStream.LA(1) == COLON
		    || InputStream.LA(1) == PLUS
		    || InputStream.LA(1) == UNDERSCORE
		    || InputStream.LA(1) == PERCENT
		    || InputStream.LA(1) == AT
		    || InputStream.LA(1) == AMP
		    || InputStream.LA(1) == POUND
		    || InputStream.LA(1) == DOLLAR
		    || InputStream.LA(1) == POUND
		    || InputStream.LA(1) == LT
		    || InputStream.LA(1) == GT
		    || InputStream.LA(1) == BSLASH
		    || InputStream.LA(1) == XOR
		    || InputStream.LA(1) == BQUOTE
		    || InputStream.LA(1) == TILDE
		    ) ;
		}
		return true;
	}
	private bool special_sequence_character_sempred(Special_sequence_characterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return  !(
		    InputStream.LA(1) == QM
		    ) ;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,105,387,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,
		1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
		1,20,1,20,1,21,1,21,1,22,4,22,152,8,22,11,22,12,22,153,1,23,1,23,1,24,
		1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,180,8,25,1,26,1,26,1,26,3,26,185,
		8,26,1,27,1,27,4,27,189,8,27,11,27,12,27,190,1,27,1,27,1,27,1,27,4,27,
		197,8,27,11,27,12,27,198,1,27,1,27,3,27,203,8,27,1,28,1,28,1,28,1,29,1,
		29,1,29,1,30,1,30,1,30,1,30,1,30,3,30,216,8,30,1,31,5,31,219,8,31,10,31,
		12,31,222,9,31,1,31,1,31,5,31,226,8,31,10,31,12,31,229,9,31,4,31,231,8,
		31,11,31,12,31,232,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,243,8,
		32,1,33,1,33,5,33,247,8,33,10,33,12,33,250,9,33,1,34,1,34,5,34,254,8,34,
		10,34,12,34,257,9,34,1,35,1,35,1,35,3,35,262,8,35,1,36,1,36,5,36,266,8,
		36,10,36,12,36,269,9,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,3,38,279,
		8,38,1,39,1,39,5,39,283,8,39,10,39,12,39,286,9,39,1,39,1,39,1,40,5,40,
		291,8,40,10,40,12,40,294,9,40,1,40,1,40,5,40,298,8,40,10,40,12,40,301,
		9,40,1,40,1,40,5,40,305,8,40,10,40,12,40,308,9,40,5,40,310,8,40,10,40,
		12,40,313,9,40,1,40,1,40,1,41,1,41,5,41,319,8,41,10,41,12,41,322,9,41,
		1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,335,8,43,10,
		43,12,43,338,9,43,1,44,1,44,1,44,1,44,5,44,344,8,44,10,44,12,44,347,9,
		44,1,45,1,45,1,45,1,45,3,45,353,8,45,1,46,1,46,1,47,1,47,1,47,3,47,360,
		8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,371,8,48,1,49,1,
		49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,0,
		0,53,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,0,11,2,0,1,15,17,52,1,0,53,62,1,0,65,67,1,0,70,71,1,
		0,72,73,1,0,75,76,1,0,82,83,1,0,84,85,1,0,86,87,1,0,88,102,1,0,104,105,
		391,0,106,1,0,0,0,2,108,1,0,0,0,4,110,1,0,0,0,6,112,1,0,0,0,8,114,1,0,
		0,0,10,116,1,0,0,0,12,118,1,0,0,0,14,120,1,0,0,0,16,122,1,0,0,0,18,124,
		1,0,0,0,20,126,1,0,0,0,22,128,1,0,0,0,24,130,1,0,0,0,26,132,1,0,0,0,28,
		134,1,0,0,0,30,136,1,0,0,0,32,138,1,0,0,0,34,140,1,0,0,0,36,142,1,0,0,
		0,38,144,1,0,0,0,40,146,1,0,0,0,42,148,1,0,0,0,44,151,1,0,0,0,46,155,1,
		0,0,0,48,157,1,0,0,0,50,179,1,0,0,0,52,184,1,0,0,0,54,202,1,0,0,0,56,204,
		1,0,0,0,58,207,1,0,0,0,60,215,1,0,0,0,62,220,1,0,0,0,64,242,1,0,0,0,66,
		244,1,0,0,0,68,251,1,0,0,0,70,261,1,0,0,0,72,263,1,0,0,0,74,272,1,0,0,
		0,76,278,1,0,0,0,78,280,1,0,0,0,80,292,1,0,0,0,82,316,1,0,0,0,84,325,1,
		0,0,0,86,330,1,0,0,0,88,339,1,0,0,0,90,348,1,0,0,0,92,354,1,0,0,0,94,359,
		1,0,0,0,96,370,1,0,0,0,98,372,1,0,0,0,100,376,1,0,0,0,102,380,1,0,0,0,
		104,384,1,0,0,0,106,107,7,0,0,0,107,1,1,0,0,0,108,109,7,1,0,0,109,3,1,
		0,0,0,110,111,5,63,0,0,111,5,1,0,0,0,112,113,5,64,0,0,113,7,1,0,0,0,114,
		115,7,2,0,0,115,9,1,0,0,0,116,117,5,68,0,0,117,11,1,0,0,0,118,119,5,69,
		0,0,119,13,1,0,0,0,120,121,7,3,0,0,121,15,1,0,0,0,122,123,7,4,0,0,123,
		17,1,0,0,0,124,125,5,74,0,0,125,19,1,0,0,0,126,127,7,5,0,0,127,21,1,0,
		0,0,128,129,5,77,0,0,129,23,1,0,0,0,130,131,5,78,0,0,131,25,1,0,0,0,132,
		133,5,79,0,0,133,27,1,0,0,0,134,135,5,80,0,0,135,29,1,0,0,0,136,137,5,
		81,0,0,137,31,1,0,0,0,138,139,7,6,0,0,139,33,1,0,0,0,140,141,7,7,0,0,141,
		35,1,0,0,0,142,143,7,8,0,0,143,37,1,0,0,0,144,145,7,9,0,0,145,39,1,0,0,
		0,146,147,5,88,0,0,147,41,1,0,0,0,148,149,5,103,0,0,149,43,1,0,0,0,150,
		152,7,10,0,0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,
		0,0,0,154,45,1,0,0,0,155,156,5,105,0,0,156,47,1,0,0,0,157,158,5,104,0,
		0,158,49,1,0,0,0,159,180,3,0,0,0,160,180,3,2,1,0,161,180,3,4,2,0,162,180,
		3,6,3,0,163,180,3,8,4,0,164,180,3,10,5,0,165,180,3,12,6,0,166,180,3,14,
		7,0,167,180,3,16,8,0,168,180,3,18,9,0,169,180,3,20,10,0,170,180,3,22,11,
		0,171,180,3,24,12,0,172,180,3,26,13,0,173,180,3,28,14,0,174,180,3,30,15,
		0,175,180,3,32,16,0,176,180,3,34,17,0,177,180,3,36,18,0,178,180,3,38,19,
		0,179,159,1,0,0,0,179,160,1,0,0,0,179,161,1,0,0,0,179,162,1,0,0,0,179,
		163,1,0,0,0,179,164,1,0,0,0,179,165,1,0,0,0,179,166,1,0,0,0,179,167,1,
		0,0,0,179,168,1,0,0,0,179,169,1,0,0,0,179,170,1,0,0,0,179,171,1,0,0,0,
		179,172,1,0,0,0,179,173,1,0,0,0,179,174,1,0,0,0,179,175,1,0,0,0,179,176,
		1,0,0,0,179,177,1,0,0,0,179,178,1,0,0,0,180,51,1,0,0,0,181,182,4,26,0,
		0,182,185,3,50,25,0,183,185,3,54,27,0,184,181,1,0,0,0,184,183,1,0,0,0,
		185,53,1,0,0,0,186,188,3,20,10,0,187,189,3,56,28,0,188,187,1,0,0,0,189,
		190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,3,
		20,10,0,193,203,1,0,0,0,194,196,3,24,12,0,195,197,3,58,29,0,196,195,1,
		0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,
		200,201,3,24,12,0,201,203,1,0,0,0,202,186,1,0,0,0,202,194,1,0,0,0,203,
		55,1,0,0,0,204,205,4,28,1,0,205,206,3,50,25,0,206,57,1,0,0,0,207,208,4,
		29,2,0,208,209,3,50,25,0,209,59,1,0,0,0,210,216,3,40,20,0,211,216,3,42,
		21,0,212,216,3,44,22,0,213,216,3,46,23,0,214,216,3,48,24,0,215,210,1,0,
		0,0,215,211,1,0,0,0,215,212,1,0,0,0,215,213,1,0,0,0,215,214,1,0,0,0,216,
		61,1,0,0,0,217,219,3,60,30,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,
		0,0,0,220,221,1,0,0,0,221,230,1,0,0,0,222,220,1,0,0,0,223,227,3,52,26,
		0,224,226,3,60,30,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,
		228,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,230,223,1,0,0,0,231,232,1,
		0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,5,0,0,1,
		235,63,1,0,0,0,236,237,4,32,3,0,237,243,3,50,25,0,238,243,3,68,34,0,239,
		243,3,66,33,0,240,243,3,54,27,0,241,243,3,72,36,0,242,236,1,0,0,0,242,
		238,1,0,0,0,242,239,1,0,0,0,242,240,1,0,0,0,242,241,1,0,0,0,243,65,1,0,
		0,0,244,248,3,2,1,0,245,247,3,2,1,0,246,245,1,0,0,0,247,250,1,0,0,0,248,
		246,1,0,0,0,248,249,1,0,0,0,249,67,1,0,0,0,250,248,1,0,0,0,251,255,3,0,
		0,0,252,254,3,70,35,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,
		255,256,1,0,0,0,256,69,1,0,0,0,257,255,1,0,0,0,258,262,3,0,0,0,259,262,
		3,2,1,0,260,262,3,40,20,0,261,258,1,0,0,0,261,259,1,0,0,0,261,260,1,0,
		0,0,262,71,1,0,0,0,263,267,3,26,13,0,264,266,3,74,37,0,265,264,1,0,0,0,
		266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,
		1,0,0,0,270,271,3,26,13,0,271,73,1,0,0,0,272,273,4,37,4,0,273,274,3,50,
		25,0,274,75,1,0,0,0,275,279,3,78,39,0,276,279,3,38,19,0,277,279,3,64,32,
		0,278,275,1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,77,1,0,0,0,280,284,
		3,28,14,0,281,283,3,76,38,0,282,281,1,0,0,0,283,286,1,0,0,0,284,282,1,
		0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,288,3,10,5,0,
		288,79,1,0,0,0,289,291,3,78,39,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,
		1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,299,3,64,32,
		0,296,298,3,78,39,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,
		300,1,0,0,0,300,311,1,0,0,0,301,299,1,0,0,0,302,306,3,64,32,0,303,305,
		3,78,39,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,
		0,0,307,310,1,0,0,0,308,306,1,0,0,0,309,302,1,0,0,0,310,313,1,0,0,0,311,
		309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,5,
		0,0,1,315,81,1,0,0,0,316,320,3,84,42,0,317,319,3,84,42,0,318,317,1,0,0,
		0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,323,1,0,0,0,322,
		320,1,0,0,0,323,324,5,0,0,1,324,83,1,0,0,0,325,326,3,68,34,0,326,327,3,
		6,3,0,327,328,3,86,43,0,328,329,3,36,18,0,329,85,1,0,0,0,330,336,3,88,
		44,0,331,332,3,8,4,0,332,333,3,88,44,0,333,335,1,0,0,0,334,331,1,0,0,0,
		335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,87,1,0,0,0,338,336,
		1,0,0,0,339,345,3,90,45,0,340,341,3,4,2,0,341,342,3,90,45,0,342,344,1,
		0,0,0,343,340,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,
		346,89,1,0,0,0,347,345,1,0,0,0,348,352,3,94,47,0,349,350,3,18,9,0,350,
		351,3,92,46,0,351,353,1,0,0,0,352,349,1,0,0,0,352,353,1,0,0,0,353,91,1,
		0,0,0,354,355,3,94,47,0,355,93,1,0,0,0,356,357,3,66,33,0,357,358,3,22,
		11,0,358,360,1,0,0,0,359,356,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,
		362,3,96,48,0,362,95,1,0,0,0,363,371,3,98,49,0,364,371,3,100,50,0,365,
		371,3,102,51,0,366,371,3,68,34,0,367,371,3,54,27,0,368,371,3,72,36,0,369,
		371,3,104,52,0,370,363,1,0,0,0,370,364,1,0,0,0,370,365,1,0,0,0,370,366,
		1,0,0,0,370,367,1,0,0,0,370,368,1,0,0,0,370,369,1,0,0,0,371,97,1,0,0,0,
		372,373,3,32,16,0,373,374,3,86,43,0,374,375,3,14,7,0,375,99,1,0,0,0,376,
		377,3,34,17,0,377,378,3,86,43,0,378,379,3,16,8,0,379,101,1,0,0,0,380,381,
		3,30,15,0,381,382,3,86,43,0,382,383,3,12,6,0,383,103,1,0,0,0,384,385,1,
		0,0,0,385,105,1,0,0,0,27,153,179,184,190,198,202,215,220,227,232,242,248,
		255,261,267,278,284,292,299,306,311,320,336,345,352,359,370
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
