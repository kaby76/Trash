//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from W3CebnfLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class W3CebnfLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CCEQ=1, Q=2, ALT=3, M=4, P=5, S=6, OP=7, CP=8, CONSTRAINT=9, COMMENT=10, 
		HEX=11, STRING=12, SET=13, SYMBOL=14, WS=15;
	public const int
		OFF_CHANNEL=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "OFF_CHANNEL"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CCEQ", "Q", "ALT", "M", "P", "S", "OP", "CP", "CONSTRAINT", "COMMENT", 
		"HEX", "STRING", "SET", "SYMBOL", "WS", "Symbol", "Hex", "Ws", "Url"
	};


	public W3CebnfLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public W3CebnfLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'::='", "'?'", "'|'", "'-'", "'+'", "'*'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CCEQ", "Q", "ALT", "M", "P", "S", "OP", "CP", "CONSTRAINT", "COMMENT", 
		"HEX", "STRING", "SET", "SYMBOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "W3CebnfLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static W3CebnfLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,162,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,1,1,1,1,1,
		2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,5,8,61,8,8,10,
		8,12,8,64,9,8,1,8,3,8,67,8,8,1,9,1,9,1,9,1,9,5,9,73,8,9,10,9,12,9,76,9,
		9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,5,11,87,8,11,10,11,12,11,90,
		9,11,1,11,1,11,1,11,5,11,95,8,11,10,11,12,11,98,9,11,1,11,3,11,101,8,11,
		1,12,1,12,3,12,105,8,12,1,12,1,12,4,12,109,8,12,11,12,12,12,110,1,12,1,
		12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,5,15,123,8,15,10,15,12,15,126,
		9,15,1,16,1,16,1,16,1,16,4,16,132,8,16,11,16,12,16,133,1,17,4,17,137,8,
		17,11,17,12,17,138,1,18,4,18,142,8,18,11,18,12,18,143,1,18,1,18,1,18,1,
		18,1,18,4,18,151,8,18,11,18,12,18,152,1,18,1,18,4,18,157,8,18,11,18,12,
		18,158,3,18,161,8,18,4,74,88,96,110,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,0,33,0,35,0,37,0,1,0,
		7,1,0,93,93,5,0,45,46,48,57,65,90,95,95,97,122,3,0,48,57,65,70,97,102,
		3,0,9,10,13,13,32,32,5,0,35,35,47,47,58,58,63,63,93,93,2,0,35,35,93,93,
		6,0,37,37,46,46,48,57,65,90,95,95,97,122,173,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,1,39,1,0,0,0,3,43,1,0,0,0,5,45,1,0,0,0,7,47,1,0,0,
		0,9,49,1,0,0,0,11,51,1,0,0,0,13,53,1,0,0,0,15,55,1,0,0,0,17,66,1,0,0,0,
		19,68,1,0,0,0,21,82,1,0,0,0,23,100,1,0,0,0,25,102,1,0,0,0,27,114,1,0,0,
		0,29,116,1,0,0,0,31,120,1,0,0,0,33,127,1,0,0,0,35,136,1,0,0,0,37,141,1,
		0,0,0,39,40,5,58,0,0,40,41,5,58,0,0,41,42,5,61,0,0,42,2,1,0,0,0,43,44,
		5,63,0,0,44,4,1,0,0,0,45,46,5,124,0,0,46,6,1,0,0,0,47,48,5,45,0,0,48,8,
		1,0,0,0,49,50,5,43,0,0,50,10,1,0,0,0,51,52,5,42,0,0,52,12,1,0,0,0,53,54,
		5,40,0,0,54,14,1,0,0,0,55,56,5,41,0,0,56,16,1,0,0,0,57,58,5,91,0,0,58,
		67,3,37,18,0,59,61,8,0,0,0,60,59,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,
		63,1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,67,5,93,0,0,66,57,1,0,0,0,66,
		62,1,0,0,0,67,18,1,0,0,0,68,69,5,47,0,0,69,70,5,42,0,0,70,74,1,0,0,0,71,
		73,9,0,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,75,1,0,0,0,74,72,1,0,0,0,75,
		77,1,0,0,0,76,74,1,0,0,0,77,78,5,42,0,0,78,79,5,47,0,0,79,80,1,0,0,0,80,
		81,6,9,0,0,81,20,1,0,0,0,82,83,3,33,16,0,83,22,1,0,0,0,84,88,5,34,0,0,
		85,87,9,0,0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,89,1,0,0,0,88,86,1,0,0,0,
		89,91,1,0,0,0,90,88,1,0,0,0,91,101,5,34,0,0,92,96,5,39,0,0,93,95,9,0,0,
		0,94,93,1,0,0,0,95,98,1,0,0,0,96,97,1,0,0,0,96,94,1,0,0,0,97,99,1,0,0,
		0,98,96,1,0,0,0,99,101,5,39,0,0,100,84,1,0,0,0,100,92,1,0,0,0,101,24,1,
		0,0,0,102,104,5,91,0,0,103,105,5,94,0,0,104,103,1,0,0,0,104,105,1,0,0,
		0,105,108,1,0,0,0,106,109,3,33,16,0,107,109,9,0,0,0,108,106,1,0,0,0,108,
		107,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,110,108,1,0,0,0,111,112,1,
		0,0,0,112,113,5,93,0,0,113,26,1,0,0,0,114,115,3,31,15,0,115,28,1,0,0,0,
		116,117,3,35,17,0,117,118,1,0,0,0,118,119,6,14,1,0,119,30,1,0,0,0,120,
		124,7,1,0,0,121,123,7,1,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,
		0,0,0,124,125,1,0,0,0,125,32,1,0,0,0,126,124,1,0,0,0,127,128,5,35,0,0,
		128,129,5,120,0,0,129,131,1,0,0,0,130,132,7,2,0,0,131,130,1,0,0,0,132,
		133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,34,1,0,0,0,135,137,7,3,
		0,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,
		36,1,0,0,0,140,142,8,4,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,
		0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,5,58,0,0,146,147,5,47,0,0,
		147,148,5,47,0,0,148,150,1,0,0,0,149,151,8,5,0,0,150,149,1,0,0,0,151,152,
		1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,160,1,0,0,0,154,156,5,35,0,
		0,155,157,7,6,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,156,1,0,0,0,158,
		159,1,0,0,0,159,161,1,0,0,0,160,154,1,0,0,0,160,161,1,0,0,0,161,38,1,0,
		0,0,17,0,62,66,74,88,96,100,104,108,110,124,133,138,143,152,158,160,2,
		0,1,0,0,2,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
