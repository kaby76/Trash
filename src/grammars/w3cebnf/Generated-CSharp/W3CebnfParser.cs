//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from W3CebnfParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class W3CebnfParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CCEQ=1, Q=2, ALT=3, M=4, P=5, S=6, OP=7, CP=8, CONSTRAINT=9, COMMENT=10, 
		HEX=11, STRING=12, SET=13, SYMBOL=14, WS=15;
	public const int
		RULE_grammar_ = 0, RULE_production = 1, RULE_choice = 2, RULE_sequence_or_difference = 3, 
		RULE_item = 4, RULE_primary = 5;
	public static readonly string[] ruleNames = {
		"grammar_", "production", "choice", "sequence_or_difference", "item", 
		"primary"
	};

	private static readonly string[] _LiteralNames = {
		null, "'::='", "'?'", "'|'", "'-'", "'+'", "'*'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CCEQ", "Q", "ALT", "M", "P", "S", "OP", "CP", "CONSTRAINT", "COMMENT", 
		"HEX", "STRING", "SET", "SYMBOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "W3CebnfParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static W3CebnfParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public W3CebnfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public W3CebnfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Grammar_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(W3CebnfParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProductionContext[] production() {
			return GetRuleContexts<ProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProductionContext production(int i) {
			return GetRuleContext<ProductionContext>(i);
		}
		public Grammar_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammar_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_Context grammar_() {
		Grammar_Context _localctx = new Grammar_Context(Context, State);
		EnterRule(_localctx, 0, RULE_grammar_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SYMBOL) {
				{
				{
				State = 12;
				production();
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 18;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(W3CebnfParser.SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCEQ() { return GetToken(W3CebnfParser.CCEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext choice() {
			return GetRuleContext<ChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(W3CebnfParser.CONSTRAINT, 0); }
		public ProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_production; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProductionContext production() {
		ProductionContext _localctx = new ProductionContext(Context, State);
		EnterRule(_localctx, 2, RULE_production);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			Match(SYMBOL);
			State = 21;
			Match(CCEQ);
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case ALT:
			case OP:
			case HEX:
			case STRING:
			case SET:
			case SYMBOL:
				{
				State = 22;
				choice();
				}
				break;
			case CONSTRAINT:
				{
				State = 23;
				Match(CONSTRAINT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_or_differenceContext[] sequence_or_difference() {
			return GetRuleContexts<Sequence_or_differenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_or_differenceContext sequence_or_difference(int i) {
			return GetRuleContext<Sequence_or_differenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALT() { return GetTokens(W3CebnfParser.ALT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALT(int i) {
			return GetToken(W3CebnfParser.ALT, i);
		}
		public ChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceContext choice() {
		ChoiceContext _localctx = new ChoiceContext(Context, State);
		EnterRule(_localctx, 4, RULE_choice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			sequence_or_difference();
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALT) {
				{
				{
				State = 27;
				Match(ALT);
				State = 28;
				sequence_or_difference();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_or_differenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode M() { return GetToken(W3CebnfParser.M, 0); }
		public Sequence_or_differenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_or_difference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterSequence_or_difference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitSequence_or_difference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_or_difference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_or_differenceContext sequence_or_difference() {
		Sequence_or_differenceContext _localctx = new Sequence_or_differenceContext(Context, State);
		EnterRule(_localctx, 6, RULE_sequence_or_difference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 34;
				item();
				State = 43;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case M:
					{
					State = 35;
					Match(M);
					State = 36;
					item();
					}
					break;
				case Eof:
				case ALT:
				case OP:
				case CP:
				case HEX:
				case STRING:
				case SET:
				case SYMBOL:
					{
					State = 40;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 37;
							item();
							}
							} 
						}
						State = 42;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Q() { return GetTokens(W3CebnfParser.Q); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q(int i) {
			return GetToken(W3CebnfParser.Q, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] S() { return GetTokens(W3CebnfParser.S); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S(int i) {
			return GetToken(W3CebnfParser.S, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] P() { return GetTokens(W3CebnfParser.P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P(int i) {
			return GetToken(W3CebnfParser.P, i);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 8, RULE_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			primary();
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 100L) != 0)) {
				{
				{
				State = 48;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 100L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(W3CebnfParser.SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(W3CebnfParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(W3CebnfParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(W3CebnfParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(W3CebnfParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext choice() {
			return GetRuleContext<ChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(W3CebnfParser.CP, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IW3CebnfParserListener typedListener = listener as IW3CebnfParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IW3CebnfParserVisitor<TResult> typedVisitor = visitor as IW3CebnfParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 10, RULE_primary);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				Match(SYMBOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				Match(STRING);
				}
				break;
			case HEX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				Match(HEX);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57;
				Match(SET);
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 58;
				Match(OP);
				State = 59;
				choice();
				State = 60;
				Match(CP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,15,65,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,5,0,14,8,
		0,10,0,12,0,17,9,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,25,8,1,1,2,1,2,1,2,5,2,
		30,8,2,10,2,12,2,33,9,2,1,3,1,3,1,3,1,3,5,3,39,8,3,10,3,12,3,42,9,3,3,
		3,44,8,3,3,3,46,8,3,1,4,1,4,5,4,50,8,4,10,4,12,4,53,9,4,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,3,5,63,8,5,1,5,0,0,6,0,2,4,6,8,10,0,1,2,0,2,2,5,6,69,
		0,15,1,0,0,0,2,20,1,0,0,0,4,26,1,0,0,0,6,45,1,0,0,0,8,47,1,0,0,0,10,62,
		1,0,0,0,12,14,3,2,1,0,13,12,1,0,0,0,14,17,1,0,0,0,15,13,1,0,0,0,15,16,
		1,0,0,0,16,18,1,0,0,0,17,15,1,0,0,0,18,19,5,0,0,1,19,1,1,0,0,0,20,21,5,
		14,0,0,21,24,5,1,0,0,22,25,3,4,2,0,23,25,5,9,0,0,24,22,1,0,0,0,24,23,1,
		0,0,0,25,3,1,0,0,0,26,31,3,6,3,0,27,28,5,3,0,0,28,30,3,6,3,0,29,27,1,0,
		0,0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,5,1,0,0,0,33,31,1,0,0,
		0,34,43,3,8,4,0,35,36,5,4,0,0,36,44,3,8,4,0,37,39,3,8,4,0,38,37,1,0,0,
		0,39,42,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,
		0,43,35,1,0,0,0,43,40,1,0,0,0,44,46,1,0,0,0,45,34,1,0,0,0,45,46,1,0,0,
		0,46,7,1,0,0,0,47,51,3,10,5,0,48,50,7,0,0,0,49,48,1,0,0,0,50,53,1,0,0,
		0,51,49,1,0,0,0,51,52,1,0,0,0,52,9,1,0,0,0,53,51,1,0,0,0,54,63,5,14,0,
		0,55,63,5,12,0,0,56,63,5,11,0,0,57,63,5,13,0,0,58,59,5,7,0,0,59,60,3,4,
		2,0,60,61,5,8,0,0,61,63,1,0,0,0,62,54,1,0,0,0,62,55,1,0,0,0,62,56,1,0,
		0,0,62,57,1,0,0,0,62,58,1,0,0,0,63,11,1,0,0,0,8,15,24,31,40,43,45,51,62
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
