//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BisonParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BisonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SC_EPILOGUE=1, PercentPercent=2, PERCENT_BINARY=3, CODE=4, PERCENT_DEBUG=5, 
		DEFAULT_PREC=6, DEFINE=7, DEFINES=8, DESTRUCTOR=9, DPREC=10, EMPTY_RULE=11, 
		EXPECT=12, EXPECT_RR=13, PERCENT_FILE_PREFIX=14, INITIAL_ACTION=15, GLR_PARSER=16, 
		LANGUAGE=17, PERCENT_LEFT=18, LEX=19, LOCATIONS=20, MERGE=21, NO_DEFAULT_PREC=22, 
		NO_LINES=23, PERCENT_NONASSOC=24, NONDETERMINISTIC_PARSER=25, NTERM=26, 
		PARAM=27, PARSE=28, PERCENT_PREC=29, PRECEDENCE=30, PRINTER=31, REQUIRE=32, 
		PERCENT_RIGHT=33, SKELETON=34, PERCENT_START=35, TOKEN=36, PERCENT_TOKEN=37, 
		TOKEN_TABLE=38, PERCENT_TYPE=39, PERCENT_UNION=40, VERBOSE=41, PERCENT_YACC=42, 
		PERCENT_PURE_PARSER=43, PERCENT_NAME_PREFIX=44, OBS_DEFAULT_PREC=45, OBS_PERCENT_ERROR_VERBOSE=46, 
		OBS_EXPECT_RR=47, OBS_PERCENT_FILE_PREFIX=48, OBS_FIXED_OUTPUT=49, OBS_NO_DEFAULT_PREC=50, 
		OBS_NO_LINES=51, OBS_OUTPUT=52, OBS_TOKEN_TABLE=53, BRACED_CODE=54, BRACED_PREDICATE=55, 
		BRACKETED_ID=56, CHAR=57, COLON=58, EQUAL=59, ID=60, PIPE=61, SEMICOLON=62, 
		TAG=63, TAG_ANY=64, TAG_NONE=65, STRING=66, INT=67, LPAREN=68, RPAREN=69, 
		BLOCK_COMMENT=70, LINE_COMMENT=71, WS=72, PROLOGUE=73, EPILOGUE=74;
	public const int
		RULE_input_ = 0, RULE_prologue_declarations = 1, RULE_prologue_declaration = 2, 
		RULE_params = 3, RULE_grammar_declaration = 4, RULE_code_props_type = 5, 
		RULE_union_name = 6, RULE_symbol_declaration = 7, RULE_precedence_declarator = 8, 
		RULE_tag_opt = 9, RULE_generic_symlist = 10, RULE_generic_symlist_item = 11, 
		RULE_tag = 12, RULE_nterm_decls = 13, RULE_token_decls = 14, RULE_token_decl = 15, 
		RULE_int_opt = 16, RULE_alias = 17, RULE_token_decls_for_prec = 18, RULE_token_decl_for_prec = 19, 
		RULE_symbol_decls = 20, RULE_bison_grammar = 21, RULE_rules_or_grammar_declaration = 22, 
		RULE_rules = 23, RULE_rhses_1 = 24, RULE_rhs = 25, RULE_named_ref_opt = 26, 
		RULE_variable = 27, RULE_value = 28, RULE_id = 29, RULE_symbol = 30, RULE_string_as_id = 31, 
		RULE_epilogue_opt = 32, RULE_actionBlock = 33;
	public static readonly string[] ruleNames = {
		"input_", "prologue_declarations", "prologue_declaration", "params", "grammar_declaration", 
		"code_props_type", "union_name", "symbol_declaration", "precedence_declarator", 
		"tag_opt", "generic_symlist", "generic_symlist_item", "tag", "nterm_decls", 
		"token_decls", "token_decl", "int_opt", "alias", "token_decls_for_prec", 
		"token_decl_for_prec", "symbol_decls", "bison_grammar", "rules_or_grammar_declaration", 
		"rules", "rhses_1", "rhs", "named_ref_opt", "variable", "value", "id", 
		"symbol", "string_as_id", "epilogue_opt", "actionBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'%%'", "'%binary'", "'%code'", "'%debug'", "'%default-prec'", 
		"'%define'", "'%defines'", "'%destructor'", "'%dprec'", "'%empty'", "'%expect'", 
		"'%expect-rr'", "'%file-prefix'", "'%initial-action'", "'%glr-parser'", 
		"'%language'", "'%left'", "'%lex-param'", "'%locations'", "'%merge'", 
		"'%no-default-prec'", "'%no-lines'", "'%nonassoc'", "'%nondeterministic-parser'", 
		"'%nterm'", "'%param'", "'%parse-param'", "'%prec'", "'%precedence'", 
		"'%printer'", "'%require'", "'%right'", "'%skeleton'", "'%start'", "'%term'", 
		"'%token'", null, "'%type'", "'%union'", "'%verbose'", "'%yacc'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "':'", "'='", null, "'|'", "';'", null, "'<*>'", "'<>'", null, 
		null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SC_EPILOGUE", "PercentPercent", "PERCENT_BINARY", "CODE", "PERCENT_DEBUG", 
		"DEFAULT_PREC", "DEFINE", "DEFINES", "DESTRUCTOR", "DPREC", "EMPTY_RULE", 
		"EXPECT", "EXPECT_RR", "PERCENT_FILE_PREFIX", "INITIAL_ACTION", "GLR_PARSER", 
		"LANGUAGE", "PERCENT_LEFT", "LEX", "LOCATIONS", "MERGE", "NO_DEFAULT_PREC", 
		"NO_LINES", "PERCENT_NONASSOC", "NONDETERMINISTIC_PARSER", "NTERM", "PARAM", 
		"PARSE", "PERCENT_PREC", "PRECEDENCE", "PRINTER", "REQUIRE", "PERCENT_RIGHT", 
		"SKELETON", "PERCENT_START", "TOKEN", "PERCENT_TOKEN", "TOKEN_TABLE", 
		"PERCENT_TYPE", "PERCENT_UNION", "VERBOSE", "PERCENT_YACC", "PERCENT_PURE_PARSER", 
		"PERCENT_NAME_PREFIX", "OBS_DEFAULT_PREC", "OBS_PERCENT_ERROR_VERBOSE", 
		"OBS_EXPECT_RR", "OBS_PERCENT_FILE_PREFIX", "OBS_FIXED_OUTPUT", "OBS_NO_DEFAULT_PREC", 
		"OBS_NO_LINES", "OBS_OUTPUT", "OBS_TOKEN_TABLE", "BRACED_CODE", "BRACED_PREDICATE", 
		"BRACKETED_ID", "CHAR", "COLON", "EQUAL", "ID", "PIPE", "SEMICOLON", "TAG", 
		"TAG_ANY", "TAG_NONE", "STRING", "INT", "LPAREN", "RPAREN", "BLOCK_COMMENT", 
		"LINE_COMMENT", "WS", "PROLOGUE", "EPILOGUE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BisonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BisonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BisonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BisonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Input_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prologue_declarationsContext prologue_declarations() {
			return GetRuleContext<Prologue_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PercentPercent() { return GetToken(BisonParser.PercentPercent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bison_grammarContext bison_grammar() {
			return GetRuleContext<Bison_grammarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Epilogue_optContext epilogue_opt() {
			return GetRuleContext<Epilogue_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BisonParser.Eof, 0); }
		public Input_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterInput_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitInput_(this);
		}
	}

	[RuleVersion(0)]
	public Input_Context input_() {
		Input_Context _localctx = new Input_Context(Context, State);
		EnterRule(_localctx, 0, RULE_input_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			prologue_declarations();
			State = 69;
			Match(PercentPercent);
			State = 70;
			bison_grammar();
			State = 71;
			epilogue_opt();
			State = 72;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prologue_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prologue_declarationContext[] prologue_declaration() {
			return GetRuleContexts<Prologue_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prologue_declarationContext prologue_declaration(int i) {
			return GetRuleContext<Prologue_declarationContext>(i);
		}
		public Prologue_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prologue_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterPrologue_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitPrologue_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Prologue_declarationsContext prologue_declarations() {
		Prologue_declarationsContext _localctx = new Prologue_declarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_prologue_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4616295101912577016L) != 0) || _la==PROLOGUE) {
				{
				{
				State = 74;
				prologue_declaration();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prologue_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_declarationContext grammar_declaration() {
			return GetRuleContext<Grammar_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROLOGUE() { return GetToken(BisonParser.PROLOGUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_DEBUG() { return GetToken(BisonParser.PERCENT_DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATIONS() { return GetToken(BisonParser.LOCATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BisonParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINES() { return GetToken(BisonParser.DEFINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BisonParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBS_PERCENT_ERROR_VERBOSE() { return GetToken(BisonParser.OBS_PERCENT_ERROR_VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT() { return GetToken(BisonParser.EXPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BisonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT_RR() { return GetToken(BisonParser.EXPECT_RR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_FILE_PREFIX() { return GetToken(BisonParser.PERCENT_FILE_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLR_PARSER() { return GetToken(BisonParser.GLR_PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_ACTION() { return GetToken(BisonParser.INITIAL_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext[] actionBlock() {
			return GetRuleContexts<ActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock(int i) {
			return GetRuleContext<ActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BisonParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_NAME_PREFIX() { return GetToken(BisonParser.PERCENT_NAME_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_LINES() { return GetToken(BisonParser.NO_LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONDETERMINISTIC_PARSER() { return GetToken(BisonParser.NONDETERMINISTIC_PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBS_OUTPUT() { return GetToken(BisonParser.OBS_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(BisonParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_PURE_PARSER() { return GetToken(BisonParser.PERCENT_PURE_PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE() { return GetToken(BisonParser.PARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEX() { return GetToken(BisonParser.LEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(BisonParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKELETON() { return GetToken(BisonParser.SKELETON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_TABLE() { return GetToken(BisonParser.TOKEN_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(BisonParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_YACC() { return GetToken(BisonParser.PERCENT_YACC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BisonParser.SEMICOLON, 0); }
		public Prologue_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prologue_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterPrologue_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitPrologue_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Prologue_declarationContext prologue_declaration() {
		Prologue_declarationContext _localctx = new Prologue_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_prologue_declaration);
		int _la;
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				grammar_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				Match(PROLOGUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82;
				Match(PERCENT_DEBUG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 83;
				Match(LOCATIONS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 84;
				Match(DEFINE);
				State = 85;
				variable();
				State = 86;
				value();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 88;
				Match(DEFINES);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 89;
				Match(DEFINES);
				State = 90;
				Match(STRING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 91;
				Match(OBS_PERCENT_ERROR_VERBOSE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 92;
				Match(EXPECT);
				State = 93;
				Match(INT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 94;
				Match(EXPECT_RR);
				State = 95;
				Match(INT);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 96;
				Match(PERCENT_FILE_PREFIX);
				State = 97;
				Match(STRING);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 98;
				Match(GLR_PARSER);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 99;
				Match(INITIAL_ACTION);
				State = 100;
				actionBlock();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 101;
				Match(LANGUAGE);
				State = 102;
				Match(STRING);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 103;
				Match(PERCENT_NAME_PREFIX);
				State = 104;
				Match(STRING);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 105;
				Match(NO_LINES);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 106;
				Match(NONDETERMINISTIC_PARSER);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 107;
				Match(OBS_OUTPUT);
				State = 108;
				Match(STRING);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 109;
				Match(PARAM);
				State = 110;
				@params();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 111;
				Match(PERCENT_PURE_PARSER);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 112;
				Match(PARSE);
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 113;
					actionBlock();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==BRACED_CODE );
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 118;
				Match(LEX);
				State = 119;
				actionBlock();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 120;
				Match(REQUIRE);
				State = 121;
				Match(STRING);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 122;
				Match(SKELETON);
				State = 123;
				Match(STRING);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 124;
				Match(TOKEN_TABLE);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 125;
				Match(VERBOSE);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 126;
				Match(PERCENT_YACC);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 127;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext[] actionBlock() {
			return GetRuleContexts<ActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock(int i) {
			return GetRuleContext<ActionBlockContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 6, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 130;
				actionBlock();
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BRACED_CODE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_declarationContext symbol_declaration() {
			return GetRuleContext<Symbol_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_START() { return GetToken(BisonParser.PERCENT_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_props_typeContext code_props_type() {
			return GetRuleContext<Code_props_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_symlistContext generic_symlist() {
			return GetRuleContext<Generic_symlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_PREC() { return GetToken(BisonParser.DEFAULT_PREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_DEFAULT_PREC() { return GetToken(BisonParser.NO_DEFAULT_PREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(BisonParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_UNION() { return GetToken(BisonParser.PERCENT_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Union_nameContext union_name() {
			return GetRuleContext<Union_nameContext>(0);
		}
		public Grammar_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterGrammar_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitGrammar_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_declarationContext grammar_declaration() {
		Grammar_declarationContext _localctx = new Grammar_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_grammar_declaration);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 135;
				symbol_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				Match(PERCENT_START);
				State = 137;
				symbol();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138;
				code_props_type();
				State = 139;
				actionBlock();
				State = 140;
				generic_symlist();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 142;
				Match(DEFAULT_PREC);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 143;
				Match(NO_DEFAULT_PREC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 144;
				Match(CODE);
				State = 145;
				actionBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 146;
				Match(CODE);
				State = 147;
				Match(ID);
				State = 148;
				actionBlock();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 149;
				Match(PERCENT_UNION);
				State = 150;
				union_name();
				State = 151;
				actionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_props_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESTRUCTOR() { return GetToken(BisonParser.DESTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTER() { return GetToken(BisonParser.PRINTER, 0); }
		public Code_props_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_props_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterCode_props_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitCode_props_type(this);
		}
	}

	[RuleVersion(0)]
	public Code_props_typeContext code_props_type() {
		Code_props_typeContext _localctx = new Code_props_typeContext(Context, State);
		EnterRule(_localctx, 10, RULE_code_props_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = TokenStream.LA(1);
			if ( !(_la==DESTRUCTOR || _la==PRINTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		public Union_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterUnion_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitUnion_name(this);
		}
	}

	[RuleVersion(0)]
	public Union_nameContext union_name() {
		Union_nameContext _localctx = new Union_nameContext(Context, State);
		EnterRule(_localctx, 12, RULE_union_name);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACED_CODE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTERM() { return GetToken(BisonParser.NTERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nterm_declsContext nterm_decls() {
			return GetRuleContext<Nterm_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_TOKEN() { return GetToken(BisonParser.PERCENT_TOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Token_declsContext token_decls() {
			return GetRuleContext<Token_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_TYPE() { return GetToken(BisonParser.PERCENT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbol_declsContext symbol_decls() {
			return GetRuleContext<Symbol_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_declaratorContext precedence_declarator() {
			return GetRuleContext<Precedence_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_decls_for_precContext token_decls_for_prec() {
			return GetRuleContext<Token_decls_for_precContext>(0);
		}
		public Symbol_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_declarationContext symbol_declaration() {
		Symbol_declarationContext _localctx = new Symbol_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol_declaration);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NTERM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				Match(NTERM);
				State = 162;
				nterm_decls();
				}
				break;
			case PERCENT_TOKEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				Match(PERCENT_TOKEN);
				State = 164;
				token_decls();
				}
				break;
			case PERCENT_TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				Match(PERCENT_TYPE);
				State = 166;
				symbol_decls();
				}
				break;
			case PERCENT_BINARY:
			case PERCENT_LEFT:
			case PERCENT_NONASSOC:
			case PRECEDENCE:
			case PERCENT_RIGHT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 167;
				precedence_declarator();
				State = 168;
				token_decls_for_prec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_LEFT() { return GetToken(BisonParser.PERCENT_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RIGHT() { return GetToken(BisonParser.PERCENT_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_NONASSOC() { return GetToken(BisonParser.PERCENT_NONASSOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_BINARY() { return GetToken(BisonParser.PERCENT_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDENCE() { return GetToken(BisonParser.PRECEDENCE, 0); }
		public Precedence_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterPrecedence_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitPrecedence_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_declaratorContext precedence_declarator() {
		Precedence_declaratorContext _localctx = new Precedence_declaratorContext(Context, State);
		EnterRule(_localctx, 16, RULE_precedence_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9680715784L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tag_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		public Tag_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterTag_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitTag_opt(this);
		}
	}

	[RuleVersion(0)]
	public Tag_optContext tag_opt() {
		Tag_optContext _localctx = new Tag_optContext(Context, State);
		EnterRule(_localctx, 18, RULE_tag_opt);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BRACED_CODE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case TAG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				Match(TAG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_symlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_symlist_itemContext[] generic_symlist_item() {
			return GetRuleContexts<Generic_symlist_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_symlist_itemContext generic_symlist_item(int i) {
			return GetRuleContext<Generic_symlist_itemContext>(i);
		}
		public Generic_symlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_symlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterGeneric_symlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitGeneric_symlist(this);
		}
	}

	[RuleVersion(0)]
	public Generic_symlistContext generic_symlist() {
		Generic_symlistContext _localctx = new Generic_symlistContext(Context, State);
		EnterRule(_localctx, 20, RULE_generic_symlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 178;
				generic_symlist_item();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 969L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_symlist_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public Generic_symlist_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_symlist_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterGeneric_symlist_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitGeneric_symlist_item(this);
		}
	}

	[RuleVersion(0)]
	public Generic_symlist_itemContext generic_symlist_item() {
		Generic_symlist_itemContext _localctx = new Generic_symlist_itemContext(Context, State);
		EnterRule(_localctx, 22, RULE_generic_symlist_item);
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				symbol();
				}
				break;
			case TAG:
			case TAG_ANY:
			case TAG_NONE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				tag();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG() { return GetToken(BisonParser.TAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_ANY() { return GetToken(BisonParser.TAG_ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_NONE() { return GetToken(BisonParser.TAG_NONE, 0); }
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 24, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nterm_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Token_declsContext token_decls() {
			return GetRuleContext<Token_declsContext>(0);
		}
		public Nterm_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nterm_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterNterm_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitNterm_decls(this);
		}
	}

	[RuleVersion(0)]
	public Nterm_declsContext nterm_decls() {
		Nterm_declsContext _localctx = new Nterm_declsContext(Context, State);
		EnterRule(_localctx, 26, RULE_nterm_decls);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			token_decls();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(BisonParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(BisonParser.TAG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_declContext[] token_decl() {
			return GetRuleContexts<Token_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_declContext token_decl(int i) {
			return GetRuleContext<Token_declContext>(i);
		}
		public Token_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decls(this);
		}
	}

	[RuleVersion(0)]
	public Token_declsContext token_decls() {
		Token_declsContext _localctx = new Token_declsContext(Context, State);
		EnterRule(_localctx, 28, RULE_token_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				{
				}
				break;
			case TAG:
				{
				State = 192;
				Match(TAG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 195;
				token_decl();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CHAR || _la==ID );
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 200;
				Match(TAG);
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 201;
					token_decl();
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CHAR || _la==ID );
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_optContext int_opt() {
			return GetRuleContext<Int_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BisonParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BisonParser.RPAREN, 0); }
		public Token_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl(this);
		}
	}

	[RuleVersion(0)]
	public Token_declContext token_decl() {
		Token_declContext _localctx = new Token_declContext(Context, State);
		EnterRule(_localctx, 30, RULE_token_decl);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211;
				id();
				State = 212;
				int_opt();
				State = 213;
				alias();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				id();
				State = 216;
				id();
				State = 217;
				Match(LPAREN);
				State = 218;
				id();
				State = 219;
				Match(RPAREN);
				State = 220;
				alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BisonParser.INT, 0); }
		public Int_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterInt_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitInt_opt(this);
		}
	}

	[RuleVersion(0)]
	public Int_optContext int_opt() {
		Int_optContext _localctx = new Int_optContext(Context, State);
		EnterRule(_localctx, 32, RULE_int_opt);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PercentPercent:
			case PERCENT_BINARY:
			case CODE:
			case PERCENT_DEBUG:
			case DEFAULT_PREC:
			case DEFINE:
			case DEFINES:
			case DESTRUCTOR:
			case EXPECT:
			case EXPECT_RR:
			case PERCENT_FILE_PREFIX:
			case INITIAL_ACTION:
			case GLR_PARSER:
			case LANGUAGE:
			case PERCENT_LEFT:
			case LEX:
			case LOCATIONS:
			case NO_DEFAULT_PREC:
			case NO_LINES:
			case PERCENT_NONASSOC:
			case NONDETERMINISTIC_PARSER:
			case NTERM:
			case PARAM:
			case PARSE:
			case PRECEDENCE:
			case PRINTER:
			case REQUIRE:
			case PERCENT_RIGHT:
			case SKELETON:
			case PERCENT_START:
			case PERCENT_TOKEN:
			case TOKEN_TABLE:
			case PERCENT_TYPE:
			case PERCENT_UNION:
			case VERBOSE:
			case PERCENT_YACC:
			case PERCENT_PURE_PARSER:
			case PERCENT_NAME_PREFIX:
			case OBS_PERCENT_ERROR_VERBOSE:
			case OBS_OUTPUT:
			case CHAR:
			case ID:
			case SEMICOLON:
			case TAG:
			case STRING:
			case PROLOGUE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_as_idContext string_as_id() {
			return GetRuleContext<String_as_idContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 34, RULE_alias);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PercentPercent:
			case PERCENT_BINARY:
			case CODE:
			case PERCENT_DEBUG:
			case DEFAULT_PREC:
			case DEFINE:
			case DEFINES:
			case DESTRUCTOR:
			case EXPECT:
			case EXPECT_RR:
			case PERCENT_FILE_PREFIX:
			case INITIAL_ACTION:
			case GLR_PARSER:
			case LANGUAGE:
			case PERCENT_LEFT:
			case LEX:
			case LOCATIONS:
			case NO_DEFAULT_PREC:
			case NO_LINES:
			case PERCENT_NONASSOC:
			case NONDETERMINISTIC_PARSER:
			case NTERM:
			case PARAM:
			case PARSE:
			case PRECEDENCE:
			case PRINTER:
			case REQUIRE:
			case PERCENT_RIGHT:
			case SKELETON:
			case PERCENT_START:
			case PERCENT_TOKEN:
			case TOKEN_TABLE:
			case PERCENT_TYPE:
			case PERCENT_UNION:
			case VERBOSE:
			case PERCENT_YACC:
			case PERCENT_PURE_PARSER:
			case PERCENT_NAME_PREFIX:
			case OBS_PERCENT_ERROR_VERBOSE:
			case OBS_OUTPUT:
			case CHAR:
			case ID:
			case SEMICOLON:
			case TAG:
			case PROLOGUE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				string_as_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_decls_for_precContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(BisonParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(BisonParser.TAG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_for_precContext[] token_decl_for_prec() {
			return GetRuleContexts<Token_decl_for_precContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Token_decl_for_precContext token_decl_for_prec(int i) {
			return GetRuleContext<Token_decl_for_precContext>(i);
		}
		public Token_decls_for_precContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decls_for_prec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decls_for_prec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decls_for_prec(this);
		}
	}

	[RuleVersion(0)]
	public Token_decls_for_precContext token_decls_for_prec() {
		Token_decls_for_precContext _localctx = new Token_decls_for_precContext(Context, State);
		EnterRule(_localctx, 36, RULE_token_decls_for_prec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
			case STRING:
				{
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 232;
					token_decl_for_prec();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 521L) != 0) );
				}
				break;
			case TAG:
				{
				State = 237;
				Match(TAG);
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 238;
					token_decl_for_prec();
					}
					}
					State = 241;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 521L) != 0) );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 245;
				Match(TAG);
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 246;
					token_decl_for_prec();
					}
					}
					State = 249;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 521L) != 0) );
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Token_decl_for_precContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_optContext int_opt() {
			return GetRuleContext<Int_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_as_idContext string_as_id() {
			return GetRuleContext<String_as_idContext>(0);
		}
		public Token_decl_for_precContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token_decl_for_prec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterToken_decl_for_prec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitToken_decl_for_prec(this);
		}
	}

	[RuleVersion(0)]
	public Token_decl_for_precContext token_decl_for_prec() {
		Token_decl_for_precContext _localctx = new Token_decl_for_precContext(Context, State);
		EnterRule(_localctx, 38, RULE_token_decl_for_prec);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				id();
				State = 257;
				int_opt();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				string_as_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbol_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(BisonParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(BisonParser.TAG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		public Symbol_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol_decls(this);
		}
	}

	[RuleVersion(0)]
	public Symbol_declsContext symbol_decls() {
		Symbol_declsContext _localctx = new Symbol_declsContext(Context, State);
		EnterRule(_localctx, 40, RULE_symbol_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
			case STRING:
				{
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 262;
					symbol();
					}
					}
					State = 265;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 521L) != 0) );
				}
				break;
			case TAG:
				{
				State = 267;
				Match(TAG);
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 268;
					symbol();
					}
					}
					State = 271;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 521L) != 0) );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG) {
				{
				{
				State = 275;
				Match(TAG);
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 276;
					symbol();
					}
					}
					State = 279;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 521L) != 0) );
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bison_grammarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rules_or_grammar_declarationContext[] rules_or_grammar_declaration() {
			return GetRuleContexts<Rules_or_grammar_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rules_or_grammar_declarationContext rules_or_grammar_declaration(int i) {
			return GetRuleContext<Rules_or_grammar_declarationContext>(i);
		}
		public Bison_grammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bison_grammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterBison_grammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitBison_grammar(this);
		}
	}

	[RuleVersion(0)]
	public Bison_grammarContext bison_grammar() {
		Bison_grammarContext _localctx = new Bison_grammarContext(Context, State);
		EnterRule(_localctx, 42, RULE_bison_grammar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 286;
				rules_or_grammar_declaration();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1297038525648339544L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rules_or_grammar_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_declarationContext grammar_declaration() {
			return GetRuleContext<Grammar_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BisonParser.SEMICOLON, 0); }
		public Rules_or_grammar_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules_or_grammar_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRules_or_grammar_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRules_or_grammar_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Rules_or_grammar_declarationContext rules_or_grammar_declaration() {
		Rules_or_grammar_declarationContext _localctx = new Rules_or_grammar_declarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_rules_or_grammar_declaration);
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				rules();
				}
				break;
			case PERCENT_BINARY:
			case CODE:
			case DEFAULT_PREC:
			case DESTRUCTOR:
			case PERCENT_LEFT:
			case NO_DEFAULT_PREC:
			case PERCENT_NONASSOC:
			case NTERM:
			case PRECEDENCE:
			case PRINTER:
			case PERCENT_RIGHT:
			case PERCENT_START:
			case PERCENT_TOKEN:
			case PERCENT_TYPE:
			case PERCENT_UNION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				grammar_declaration();
				State = 293;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_ref_optContext named_ref_opt() {
			return GetRuleContext<Named_ref_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BisonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rhses_1Context rhses_1() {
			return GetRuleContext<Rhses_1Context>(0);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 46, RULE_rules);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			id();
			State = 298;
			named_ref_opt();
			State = 299;
			Match(COLON);
			State = 300;
			rhses_1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rhses_1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext[] rhs() {
			return GetRuleContexts<RhsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RhsContext rhs(int i) {
			return GetRuleContext<RhsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BisonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(BisonParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(BisonParser.PIPE, i);
		}
		public Rhses_1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhses_1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRhses_1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRhses_1(this);
		}
	}

	[RuleVersion(0)]
	public Rhses_1Context rhses_1() {
		Rhses_1Context _localctx = new Rhses_1Context(Context, State);
		EnterRule(_localctx, 48, RULE_rhses_1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			rhs();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 303;
				Match(PIPE);
				State = 304;
				rhs();
				}
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 310;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RhsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_ref_optContext[] named_ref_opt() {
			return GetRuleContexts<Named_ref_optContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_ref_optContext named_ref_opt(int i) {
			return GetRuleContext<Named_ref_optContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tag_optContext[] tag_opt() {
			return GetRuleContexts<Tag_optContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tag_optContext tag_opt(int i) {
			return GetRuleContext<Tag_optContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext[] actionBlock() {
			return GetRuleContexts<ActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock(int i) {
			return GetRuleContext<ActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BRACED_PREDICATE() { return GetTokens(BisonParser.BRACED_PREDICATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACED_PREDICATE(int i) {
			return GetToken(BisonParser.BRACED_PREDICATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY_RULE() { return GetTokens(BisonParser.EMPTY_RULE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_RULE(int i) {
			return GetToken(BisonParser.EMPTY_RULE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT_PREC() { return GetTokens(BisonParser.PERCENT_PREC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_PREC(int i) {
			return GetToken(BisonParser.PERCENT_PREC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DPREC() { return GetTokens(BisonParser.DPREC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DPREC(int i) {
			return GetToken(BisonParser.DPREC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(BisonParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(BisonParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MERGE() { return GetTokens(BisonParser.MERGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE(int i) {
			return GetToken(BisonParser.MERGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG() { return GetTokens(BisonParser.TAG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG(int i) {
			return GetToken(BisonParser.TAG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPECT() { return GetTokens(BisonParser.EXPECT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT(int i) {
			return GetToken(BisonParser.EXPECT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPECT_RR() { return GetTokens(BisonParser.EXPECT_RR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPECT_RR(int i) {
			return GetToken(BisonParser.EXPECT_RR, i);
		}
		public RhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterRhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitRhs(this);
		}
	}

	[RuleVersion(0)]
	public RhsContext rhs() {
		RhsContext _localctx = new RhsContext(Context, State);
		EnterRule(_localctx, 50, RULE_rhs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & 82384207246526479L) != 0)) {
				{
				State = 331;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHAR:
				case ID:
				case STRING:
					{
					State = 312;
					symbol();
					State = 313;
					named_ref_opt();
					}
					break;
				case BRACED_CODE:
				case TAG:
					{
					State = 315;
					tag_opt();
					State = 316;
					actionBlock();
					State = 317;
					named_ref_opt();
					}
					break;
				case BRACED_PREDICATE:
					{
					State = 319;
					Match(BRACED_PREDICATE);
					}
					break;
				case EMPTY_RULE:
					{
					State = 320;
					Match(EMPTY_RULE);
					}
					break;
				case PERCENT_PREC:
					{
					State = 321;
					Match(PERCENT_PREC);
					State = 322;
					symbol();
					}
					break;
				case DPREC:
					{
					State = 323;
					Match(DPREC);
					State = 324;
					Match(INT);
					}
					break;
				case MERGE:
					{
					State = 325;
					Match(MERGE);
					State = 326;
					Match(TAG);
					}
					break;
				case EXPECT:
					{
					State = 327;
					Match(EXPECT);
					State = 328;
					Match(INT);
					}
					break;
				case EXPECT_RR:
					{
					State = 329;
					Match(EXPECT_RR);
					State = 330;
					Match(INT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_ref_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKETED_ID() { return GetToken(BisonParser.BRACKETED_ID, 0); }
		public Named_ref_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_ref_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterNamed_ref_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitNamed_ref_opt(this);
		}
	}

	[RuleVersion(0)]
	public Named_ref_optContext named_ref_opt() {
		Named_ref_optContext _localctx = new Named_ref_optContext(Context, State);
		EnterRule(_localctx, 52, RULE_named_ref_opt);
		try {
			State = 338;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DPREC:
			case EMPTY_RULE:
			case EXPECT:
			case EXPECT_RR:
			case MERGE:
			case PERCENT_PREC:
			case BRACED_CODE:
			case BRACED_PREDICATE:
			case CHAR:
			case COLON:
			case ID:
			case PIPE:
			case SEMICOLON:
			case TAG:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case BRACKETED_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337;
				Match(BRACKETED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 54, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BisonParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 56, RULE_value);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PercentPercent:
			case PERCENT_BINARY:
			case CODE:
			case PERCENT_DEBUG:
			case DEFAULT_PREC:
			case DEFINE:
			case DEFINES:
			case DESTRUCTOR:
			case EXPECT:
			case EXPECT_RR:
			case PERCENT_FILE_PREFIX:
			case INITIAL_ACTION:
			case GLR_PARSER:
			case LANGUAGE:
			case PERCENT_LEFT:
			case LEX:
			case LOCATIONS:
			case NO_DEFAULT_PREC:
			case NO_LINES:
			case PERCENT_NONASSOC:
			case NONDETERMINISTIC_PARSER:
			case NTERM:
			case PARAM:
			case PARSE:
			case PRECEDENCE:
			case PRINTER:
			case REQUIRE:
			case PERCENT_RIGHT:
			case SKELETON:
			case PERCENT_START:
			case PERCENT_TOKEN:
			case TOKEN_TABLE:
			case PERCENT_TYPE:
			case PERCENT_UNION:
			case VERBOSE:
			case PERCENT_YACC:
			case PERCENT_PURE_PARSER:
			case PERCENT_NAME_PREFIX:
			case OBS_PERCENT_ERROR_VERBOSE:
			case OBS_OUTPUT:
			case SEMICOLON:
			case PROLOGUE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				Match(ID);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344;
				Match(STRING);
				}
				break;
			case BRACED_CODE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 345;
				actionBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BisonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(BisonParser.CHAR, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 58, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_as_idContext string_as_id() {
			return GetRuleContext<String_as_idContext>(0);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 60, RULE_symbol);
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350;
				id();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351;
				string_as_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_as_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BisonParser.STRING, 0); }
		public String_as_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_as_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterString_as_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitString_as_id(this);
		}
	}

	[RuleVersion(0)]
	public String_as_idContext string_as_id() {
		String_as_idContext _localctx = new String_as_idContext(Context, State);
		EnterRule(_localctx, 62, RULE_string_as_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Epilogue_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PercentPercent() { return GetToken(BisonParser.PercentPercent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPILOGUE() { return GetToken(BisonParser.EPILOGUE, 0); }
		public Epilogue_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_epilogue_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterEpilogue_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitEpilogue_opt(this);
		}
	}

	[RuleVersion(0)]
	public Epilogue_optContext epilogue_opt() {
		Epilogue_optContext _localctx = new Epilogue_optContext(Context, State);
		EnterRule(_localctx, 64, RULE_epilogue_opt);
		int _la;
		try {
			State = 361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case PercentPercent:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				Match(PercentPercent);
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EPILOGUE) {
					{
					State = 358;
					Match(EPILOGUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACED_CODE() { return GetToken(BisonParser.BRACED_CODE, 0); }
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBisonParserListener typedListener = listener as IBisonParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_actionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(BRACED_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,74,366,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,
		1,0,1,1,5,1,76,8,1,10,1,12,1,79,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,4,2,115,8,2,11,2,12,2,116,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,129,8,2,1,3,4,3,132,8,3,11,3,12,3,133,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,3,4,154,8,4,1,5,1,5,1,6,1,6,3,6,160,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,3,7,171,8,7,1,8,1,8,1,9,1,9,3,9,177,8,9,1,10,4,10,180,8,10,11,
		10,12,10,181,1,11,1,11,3,11,186,8,11,1,12,1,12,1,13,1,13,1,14,1,14,3,14,
		194,8,14,1,14,4,14,197,8,14,11,14,12,14,198,1,14,1,14,4,14,203,8,14,11,
		14,12,14,204,5,14,207,8,14,10,14,12,14,210,9,14,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,223,8,15,1,16,1,16,3,16,227,8,16,
		1,17,1,17,3,17,231,8,17,1,18,4,18,234,8,18,11,18,12,18,235,1,18,1,18,4,
		18,240,8,18,11,18,12,18,241,3,18,244,8,18,1,18,1,18,4,18,248,8,18,11,18,
		12,18,249,5,18,252,8,18,10,18,12,18,255,9,18,1,19,1,19,1,19,1,19,3,19,
		261,8,19,1,20,4,20,264,8,20,11,20,12,20,265,1,20,1,20,4,20,270,8,20,11,
		20,12,20,271,3,20,274,8,20,1,20,1,20,4,20,278,8,20,11,20,12,20,279,5,20,
		282,8,20,10,20,12,20,285,9,20,1,21,4,21,288,8,21,11,21,12,21,289,1,22,
		1,22,1,22,1,22,3,22,296,8,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,5,
		24,306,8,24,10,24,12,24,309,9,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,
		25,332,8,25,10,25,12,25,335,9,25,1,26,1,26,3,26,339,8,26,1,27,1,27,1,28,
		1,28,1,28,1,28,3,28,347,8,28,1,29,1,29,1,30,1,30,3,30,353,8,30,1,31,1,
		31,1,32,1,32,1,32,3,32,360,8,32,3,32,362,8,32,1,33,1,33,1,33,0,0,34,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,0,4,2,0,9,9,31,31,5,0,3,3,18,18,24,24,30,30,33,
		33,1,0,63,65,2,0,57,57,60,60,412,0,68,1,0,0,0,2,77,1,0,0,0,4,128,1,0,0,
		0,6,131,1,0,0,0,8,153,1,0,0,0,10,155,1,0,0,0,12,159,1,0,0,0,14,170,1,0,
		0,0,16,172,1,0,0,0,18,176,1,0,0,0,20,179,1,0,0,0,22,185,1,0,0,0,24,187,
		1,0,0,0,26,189,1,0,0,0,28,193,1,0,0,0,30,222,1,0,0,0,32,226,1,0,0,0,34,
		230,1,0,0,0,36,243,1,0,0,0,38,260,1,0,0,0,40,273,1,0,0,0,42,287,1,0,0,
		0,44,295,1,0,0,0,46,297,1,0,0,0,48,302,1,0,0,0,50,333,1,0,0,0,52,338,1,
		0,0,0,54,340,1,0,0,0,56,346,1,0,0,0,58,348,1,0,0,0,60,352,1,0,0,0,62,354,
		1,0,0,0,64,361,1,0,0,0,66,363,1,0,0,0,68,69,3,2,1,0,69,70,5,2,0,0,70,71,
		3,42,21,0,71,72,3,64,32,0,72,73,5,0,0,1,73,1,1,0,0,0,74,76,3,4,2,0,75,
		74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,3,1,0,0,0,79,77,
		1,0,0,0,80,129,3,8,4,0,81,129,5,73,0,0,82,129,5,5,0,0,83,129,5,20,0,0,
		84,85,5,7,0,0,85,86,3,54,27,0,86,87,3,56,28,0,87,129,1,0,0,0,88,129,5,
		8,0,0,89,90,5,8,0,0,90,129,5,66,0,0,91,129,5,46,0,0,92,93,5,12,0,0,93,
		129,5,67,0,0,94,95,5,13,0,0,95,129,5,67,0,0,96,97,5,14,0,0,97,129,5,66,
		0,0,98,129,5,16,0,0,99,100,5,15,0,0,100,129,3,66,33,0,101,102,5,17,0,0,
		102,129,5,66,0,0,103,104,5,44,0,0,104,129,5,66,0,0,105,129,5,23,0,0,106,
		129,5,25,0,0,107,108,5,52,0,0,108,129,5,66,0,0,109,110,5,27,0,0,110,129,
		3,6,3,0,111,129,5,43,0,0,112,114,5,28,0,0,113,115,3,66,33,0,114,113,1,
		0,0,0,115,116,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,129,1,0,0,0,
		118,119,5,19,0,0,119,129,3,66,33,0,120,121,5,32,0,0,121,129,5,66,0,0,122,
		123,5,34,0,0,123,129,5,66,0,0,124,129,5,38,0,0,125,129,5,41,0,0,126,129,
		5,42,0,0,127,129,5,62,0,0,128,80,1,0,0,0,128,81,1,0,0,0,128,82,1,0,0,0,
		128,83,1,0,0,0,128,84,1,0,0,0,128,88,1,0,0,0,128,89,1,0,0,0,128,91,1,0,
		0,0,128,92,1,0,0,0,128,94,1,0,0,0,128,96,1,0,0,0,128,98,1,0,0,0,128,99,
		1,0,0,0,128,101,1,0,0,0,128,103,1,0,0,0,128,105,1,0,0,0,128,106,1,0,0,
		0,128,107,1,0,0,0,128,109,1,0,0,0,128,111,1,0,0,0,128,112,1,0,0,0,128,
		118,1,0,0,0,128,120,1,0,0,0,128,122,1,0,0,0,128,124,1,0,0,0,128,125,1,
		0,0,0,128,126,1,0,0,0,128,127,1,0,0,0,129,5,1,0,0,0,130,132,3,66,33,0,
		131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,7,
		1,0,0,0,135,154,3,14,7,0,136,137,5,35,0,0,137,154,3,60,30,0,138,139,3,
		10,5,0,139,140,3,66,33,0,140,141,3,20,10,0,141,154,1,0,0,0,142,154,5,6,
		0,0,143,154,5,22,0,0,144,145,5,4,0,0,145,154,3,66,33,0,146,147,5,4,0,0,
		147,148,5,60,0,0,148,154,3,66,33,0,149,150,5,40,0,0,150,151,3,12,6,0,151,
		152,3,66,33,0,152,154,1,0,0,0,153,135,1,0,0,0,153,136,1,0,0,0,153,138,
		1,0,0,0,153,142,1,0,0,0,153,143,1,0,0,0,153,144,1,0,0,0,153,146,1,0,0,
		0,153,149,1,0,0,0,154,9,1,0,0,0,155,156,7,0,0,0,156,11,1,0,0,0,157,160,
		1,0,0,0,158,160,5,60,0,0,159,157,1,0,0,0,159,158,1,0,0,0,160,13,1,0,0,
		0,161,162,5,26,0,0,162,171,3,26,13,0,163,164,5,37,0,0,164,171,3,28,14,
		0,165,166,5,39,0,0,166,171,3,40,20,0,167,168,3,16,8,0,168,169,3,36,18,
		0,169,171,1,0,0,0,170,161,1,0,0,0,170,163,1,0,0,0,170,165,1,0,0,0,170,
		167,1,0,0,0,171,15,1,0,0,0,172,173,7,1,0,0,173,17,1,0,0,0,174,177,1,0,
		0,0,175,177,5,63,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,19,1,0,0,0,178,
		180,3,22,11,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,
		1,0,0,0,182,21,1,0,0,0,183,186,3,60,30,0,184,186,3,24,12,0,185,183,1,0,
		0,0,185,184,1,0,0,0,186,23,1,0,0,0,187,188,7,2,0,0,188,25,1,0,0,0,189,
		190,3,28,14,0,190,27,1,0,0,0,191,194,1,0,0,0,192,194,5,63,0,0,193,191,
		1,0,0,0,193,192,1,0,0,0,194,196,1,0,0,0,195,197,3,30,15,0,196,195,1,0,
		0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,208,1,0,0,0,200,
		202,5,63,0,0,201,203,3,30,15,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,
		1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,200,1,0,0,0,207,210,1,0,0,
		0,208,206,1,0,0,0,208,209,1,0,0,0,209,29,1,0,0,0,210,208,1,0,0,0,211,212,
		3,58,29,0,212,213,3,32,16,0,213,214,3,34,17,0,214,223,1,0,0,0,215,216,
		3,58,29,0,216,217,3,58,29,0,217,218,5,68,0,0,218,219,3,58,29,0,219,220,
		5,69,0,0,220,221,3,34,17,0,221,223,1,0,0,0,222,211,1,0,0,0,222,215,1,0,
		0,0,223,31,1,0,0,0,224,227,1,0,0,0,225,227,5,67,0,0,226,224,1,0,0,0,226,
		225,1,0,0,0,227,33,1,0,0,0,228,231,1,0,0,0,229,231,3,62,31,0,230,228,1,
		0,0,0,230,229,1,0,0,0,231,35,1,0,0,0,232,234,3,38,19,0,233,232,1,0,0,0,
		234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,244,1,0,0,0,237,239,
		5,63,0,0,238,240,3,38,19,0,239,238,1,0,0,0,240,241,1,0,0,0,241,239,1,0,
		0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,233,1,0,0,0,243,237,1,0,0,0,244,
		253,1,0,0,0,245,247,5,63,0,0,246,248,3,38,19,0,247,246,1,0,0,0,248,249,
		1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,245,1,0,0,
		0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,37,1,0,0,0,255,253,
		1,0,0,0,256,257,3,58,29,0,257,258,3,32,16,0,258,261,1,0,0,0,259,261,3,
		62,31,0,260,256,1,0,0,0,260,259,1,0,0,0,261,39,1,0,0,0,262,264,3,60,30,
		0,263,262,1,0,0,0,264,265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,
		274,1,0,0,0,267,269,5,63,0,0,268,270,3,60,30,0,269,268,1,0,0,0,270,271,
		1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,263,1,0,0,
		0,273,267,1,0,0,0,274,283,1,0,0,0,275,277,5,63,0,0,276,278,3,60,30,0,277,
		276,1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,282,1,
		0,0,0,281,275,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,
		284,41,1,0,0,0,285,283,1,0,0,0,286,288,3,44,22,0,287,286,1,0,0,0,288,289,
		1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,43,1,0,0,0,291,296,3,46,23,
		0,292,293,3,8,4,0,293,294,5,62,0,0,294,296,1,0,0,0,295,291,1,0,0,0,295,
		292,1,0,0,0,296,45,1,0,0,0,297,298,3,58,29,0,298,299,3,52,26,0,299,300,
		5,58,0,0,300,301,3,48,24,0,301,47,1,0,0,0,302,307,3,50,25,0,303,304,5,
		61,0,0,304,306,3,50,25,0,305,303,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,
		0,307,308,1,0,0,0,308,310,1,0,0,0,309,307,1,0,0,0,310,311,5,62,0,0,311,
		49,1,0,0,0,312,313,3,60,30,0,313,314,3,52,26,0,314,332,1,0,0,0,315,316,
		3,18,9,0,316,317,3,66,33,0,317,318,3,52,26,0,318,332,1,0,0,0,319,332,5,
		55,0,0,320,332,5,11,0,0,321,322,5,29,0,0,322,332,3,60,30,0,323,324,5,10,
		0,0,324,332,5,67,0,0,325,326,5,21,0,0,326,332,5,63,0,0,327,328,5,12,0,
		0,328,332,5,67,0,0,329,330,5,13,0,0,330,332,5,67,0,0,331,312,1,0,0,0,331,
		315,1,0,0,0,331,319,1,0,0,0,331,320,1,0,0,0,331,321,1,0,0,0,331,323,1,
		0,0,0,331,325,1,0,0,0,331,327,1,0,0,0,331,329,1,0,0,0,332,335,1,0,0,0,
		333,331,1,0,0,0,333,334,1,0,0,0,334,51,1,0,0,0,335,333,1,0,0,0,336,339,
		1,0,0,0,337,339,5,56,0,0,338,336,1,0,0,0,338,337,1,0,0,0,339,53,1,0,0,
		0,340,341,5,60,0,0,341,55,1,0,0,0,342,347,1,0,0,0,343,347,5,60,0,0,344,
		347,5,66,0,0,345,347,3,66,33,0,346,342,1,0,0,0,346,343,1,0,0,0,346,344,
		1,0,0,0,346,345,1,0,0,0,347,57,1,0,0,0,348,349,7,3,0,0,349,59,1,0,0,0,
		350,353,3,58,29,0,351,353,3,62,31,0,352,350,1,0,0,0,352,351,1,0,0,0,353,
		61,1,0,0,0,354,355,5,66,0,0,355,63,1,0,0,0,356,362,1,0,0,0,357,359,5,2,
		0,0,358,360,5,74,0,0,359,358,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,
		356,1,0,0,0,361,357,1,0,0,0,362,65,1,0,0,0,363,364,5,54,0,0,364,67,1,0,
		0,0,38,77,116,128,133,153,159,170,176,181,185,193,198,204,208,222,226,
		230,235,241,243,249,253,260,265,271,273,279,283,289,295,307,331,333,338,
		346,352,359,361
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
