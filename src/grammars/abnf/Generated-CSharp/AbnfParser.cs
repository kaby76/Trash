//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Abnf.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AbnfParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, COMMENT=9, 
		INT=10, STRING=11, NumberValue=12, ProseValue=13, ID=14, WSP=15, CRLF=16;
	public const int
		RULE_rulelist = 0, RULE_rule_ = 1, RULE_rulename = 2, RULE_defined_as = 3, 
		RULE_elements = 4, RULE_c_wsp = 5, RULE_c_nl = 6, RULE_alternation = 7, 
		RULE_concatenation = 8, RULE_repetition = 9, RULE_repeat_ = 10, RULE_element = 11, 
		RULE_group = 12, RULE_option = 13, RULE_char_val = 14, RULE_num_val = 15, 
		RULE_prose_val = 16;
	public static readonly string[] ruleNames = {
		"rulelist", "rule_", "rulename", "defined_as", "elements", "c_wsp", "c_nl", 
		"alternation", "concatenation", "repetition", "repeat_", "element", "group", 
		"option", "char_val", "num_val", "prose_val"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'=/'", "'/'", "'*'", "'('", "')'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "COMMENT", "INT", 
		"STRING", "NumberValue", "ProseValue", "ID", "WSP", "CRLF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Abnf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AbnfParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AbnfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AbnfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RulelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AbnfParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context[] rule_() {
			return GetRuleContexts<Rule_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_(int i) {
			return GetRuleContext<Rule_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_nlContext[] c_nl() {
			return GetRuleContexts<C_nlContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_nlContext c_nl(int i) {
			return GetRuleContext<C_nlContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WSP() { return GetTokens(AbnfParser.WSP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSP(int i) {
			return GetToken(AbnfParser.WSP, i);
		}
		public RulelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterRulelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitRulelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulelistContext rulelist() {
		RulelistContext _localctx = new RulelistContext(Context, State);
		EnterRule(_localctx, 0, RULE_rulelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 42;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 34;
					rule_();
					}
					break;
				case COMMENT:
				case WSP:
				case CRLF:
					{
					{
					State = 38;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WSP) {
						{
						{
						State = 35;
						Match(WSP);
						}
						}
						State = 40;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 41;
					c_nl();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 115200L) != 0) );
			State = 46;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RulenameContext rulename() {
			return GetRuleContext<RulenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defined_asContext defined_as() {
			return GetRuleContext<Defined_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementsContext elements() {
			return GetRuleContext<ElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_nlContext c_nl() {
			return GetRuleContext<C_nlContext>(0);
		}
		public Rule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_Context rule_() {
		Rule_Context _localctx = new Rule_Context(Context, State);
		EnterRule(_localctx, 2, RULE_rule_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			rulename();
			State = 49;
			defined_as();
			State = 50;
			elements();
			State = 51;
			c_nl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AbnfParser.ID, 0); }
		public RulenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterRulename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitRulename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulenameContext rulename() {
		RulenameContext _localctx = new RulenameContext(Context, State);
		EnterRule(_localctx, 4, RULE_rulename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_asContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext[] c_wsp() {
			return GetRuleContexts<C_wspContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext c_wsp(int i) {
			return GetRuleContext<C_wspContext>(i);
		}
		public Defined_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterDefined_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitDefined_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefined_as(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Defined_asContext defined_as() {
		Defined_asContext _localctx = new Defined_asContext(Context, State);
		EnterRule(_localctx, 6, RULE_defined_as);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 98816L) != 0)) {
				{
				{
				State = 55;
				c_wsp();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 98816L) != 0)) {
				{
				{
				State = 62;
				c_wsp();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternationContext alternation() {
			return GetRuleContext<AlternationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WSP() { return GetTokens(AbnfParser.WSP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSP(int i) {
			return GetToken(AbnfParser.WSP, i);
		}
		public ElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementsContext elements() {
		ElementsContext _localctx = new ElementsContext(Context, State);
		EnterRule(_localctx, 8, RULE_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			alternation();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WSP) {
				{
				{
				State = 69;
				Match(WSP);
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_wspContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSP() { return GetToken(AbnfParser.WSP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public C_nlContext c_nl() {
			return GetRuleContext<C_nlContext>(0);
		}
		public C_wspContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_wsp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterC_wsp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitC_wsp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_wsp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_wspContext c_wsp() {
		C_wspContext _localctx = new C_wspContext(Context, State);
		EnterRule(_localctx, 10, RULE_c_wsp);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WSP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				Match(WSP);
				}
				break;
			case COMMENT:
			case CRLF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				c_nl();
				State = 77;
				Match(WSP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_nlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(AbnfParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRLF() { return GetToken(AbnfParser.CRLF, 0); }
		public C_nlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_nl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterC_nl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitC_nl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_nl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_nlContext c_nl() {
		C_nlContext _localctx = new C_nlContext(Context, State);
		EnterRule(_localctx, 12, RULE_c_nl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMENT || _la==CRLF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext[] c_wsp() {
			return GetRuleContexts<C_wspContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext c_wsp(int i) {
			return GetRuleContext<C_wspContext>(i);
		}
		public AlternationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterAlternation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitAlternation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternationContext alternation() {
		AlternationContext _localctx = new AlternationContext(Context, State);
		EnterRule(_localctx, 14, RULE_alternation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			concatenation();
			State = 100;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 87;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 98816L) != 0)) {
						{
						{
						State = 84;
						c_wsp();
						}
						}
						State = 89;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 90;
					Match(T__2);
					State = 94;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 98816L) != 0)) {
						{
						{
						State = 91;
						c_wsp();
						}
						}
						State = 96;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 97;
					concatenation();
					}
					} 
				}
				State = 102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepetitionContext[] repetition() {
			return GetRuleContexts<RepetitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepetitionContext repetition(int i) {
			return GetRuleContext<RepetitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext[] c_wsp() {
			return GetRuleContexts<C_wspContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext c_wsp(int i) {
			return GetRuleContext<C_wspContext>(i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterConcatenation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitConcatenation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatenationContext concatenation() {
		ConcatenationContext _localctx = new ConcatenationContext(Context, State);
		EnterRule(_localctx, 16, RULE_concatenation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			repetition();
			State = 113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 104;
						c_wsp();
						}
						}
						State = 107;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 98816L) != 0) );
					State = 109;
					repetition();
					}
					} 
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_Context repeat_() {
			return GetRuleContext<Repeat_Context>(0);
		}
		public RepetitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterRepetition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitRepetition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetitionContext repetition() {
		RepetitionContext _localctx = new RepetitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_repetition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==INT) {
				{
				State = 116;
				repeat_();
				}
			}

			State = 119;
			element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(AbnfParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(AbnfParser.INT, i);
		}
		public Repeat_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterRepeat_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitRepeat_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_Context repeat_() {
		Repeat_Context _localctx = new Repeat_Context(Context, State);
		EnterRule(_localctx, 20, RULE_repeat_);
		int _la;
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				Match(INT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INT) {
					{
					State = 122;
					Match(INT);
					}
				}

				State = 125;
				Match(T__3);
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INT) {
					{
					State = 126;
					Match(INT);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RulenameContext rulename() {
			return GetRuleContext<RulenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option() {
			return GetRuleContext<OptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_valContext char_val() {
			return GetRuleContext<Char_valContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Num_valContext num_val() {
			return GetRuleContext<Num_valContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prose_valContext prose_val() {
			return GetRuleContext<Prose_valContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 22, RULE_element);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				rulename();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				group();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				option();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134;
				char_val();
				}
				break;
			case NumberValue:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135;
				num_val();
				}
				break;
			case ProseValue:
				EnterOuterAlt(_localctx, 6);
				{
				State = 136;
				prose_val();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternationContext alternation() {
			return GetRuleContext<AlternationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext[] c_wsp() {
			return GetRuleContexts<C_wspContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext c_wsp(int i) {
			return GetRuleContext<C_wspContext>(i);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 24, RULE_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(T__4);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 98816L) != 0)) {
				{
				{
				State = 140;
				c_wsp();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 146;
			alternation();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 98816L) != 0)) {
				{
				{
				State = 147;
				c_wsp();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternationContext alternation() {
			return GetRuleContext<AlternationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext[] c_wsp() {
			return GetRuleContexts<C_wspContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_wspContext c_wsp(int i) {
			return GetRuleContext<C_wspContext>(i);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 26, RULE_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(T__6);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 98816L) != 0)) {
				{
				{
				State = 156;
				c_wsp();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162;
			alternation();
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 98816L) != 0)) {
				{
				{
				State = 163;
				c_wsp();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 169;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_valContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AbnfParser.STRING, 0); }
		public Char_valContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterChar_val(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitChar_val(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar_val(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_valContext char_val() {
		Char_valContext _localctx = new Char_valContext(Context, State);
		EnterRule(_localctx, 28, RULE_char_val);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Num_valContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberValue() { return GetToken(AbnfParser.NumberValue, 0); }
		public Num_valContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterNum_val(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitNum_val(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_val(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Num_valContext num_val() {
		Num_valContext _localctx = new Num_valContext(Context, State);
		EnterRule(_localctx, 30, RULE_num_val);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(NumberValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prose_valContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ProseValue() { return GetToken(AbnfParser.ProseValue, 0); }
		public Prose_valContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prose_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.EnterProse_val(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAbnfListener typedListener = listener as IAbnfListener;
			if (typedListener != null) typedListener.ExitProse_val(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAbnfVisitor<TResult> typedVisitor = visitor as IAbnfVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProse_val(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prose_valContext prose_val() {
		Prose_valContext _localctx = new Prose_valContext(Context, State);
		EnterRule(_localctx, 32, RULE_prose_val);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(ProseValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,16,178,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,5,0,37,8,0,10,0,12,0,40,9,0,1,0,4,0,43,8,0,
		11,0,12,0,44,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,5,3,57,8,3,10,3,12,
		3,60,9,3,1,3,1,3,5,3,64,8,3,10,3,12,3,67,9,3,1,4,1,4,5,4,71,8,4,10,4,12,
		4,74,9,4,1,5,1,5,1,5,1,5,3,5,80,8,5,1,6,1,6,1,7,1,7,5,7,86,8,7,10,7,12,
		7,89,9,7,1,7,1,7,5,7,93,8,7,10,7,12,7,96,9,7,1,7,5,7,99,8,7,10,7,12,7,
		102,9,7,1,8,1,8,4,8,106,8,8,11,8,12,8,107,1,8,1,8,5,8,112,8,8,10,8,12,
		8,115,9,8,1,9,3,9,118,8,9,1,9,1,9,1,10,1,10,3,10,124,8,10,1,10,1,10,3,
		10,128,8,10,3,10,130,8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,138,8,11,
		1,12,1,12,5,12,142,8,12,10,12,12,12,145,9,12,1,12,1,12,5,12,149,8,12,10,
		12,12,12,152,9,12,1,12,1,12,1,13,1,13,5,13,158,8,13,10,13,12,13,161,9,
		13,1,13,1,13,5,13,165,8,13,10,13,12,13,168,9,13,1,13,1,13,1,14,1,14,1,
		15,1,15,1,16,1,16,1,16,0,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,0,2,1,0,1,2,2,0,9,9,16,16,185,0,42,1,0,0,0,2,48,1,0,0,0,4,53,1,0,
		0,0,6,58,1,0,0,0,8,68,1,0,0,0,10,79,1,0,0,0,12,81,1,0,0,0,14,83,1,0,0,
		0,16,103,1,0,0,0,18,117,1,0,0,0,20,129,1,0,0,0,22,137,1,0,0,0,24,139,1,
		0,0,0,26,155,1,0,0,0,28,171,1,0,0,0,30,173,1,0,0,0,32,175,1,0,0,0,34,43,
		3,2,1,0,35,37,5,15,0,0,36,35,1,0,0,0,37,40,1,0,0,0,38,36,1,0,0,0,38,39,
		1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,0,41,43,3,12,6,0,42,34,1,0,0,0,42,38,
		1,0,0,0,43,44,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,46,1,0,0,0,46,47,
		5,0,0,1,47,1,1,0,0,0,48,49,3,4,2,0,49,50,3,6,3,0,50,51,3,8,4,0,51,52,3,
		12,6,0,52,3,1,0,0,0,53,54,5,14,0,0,54,5,1,0,0,0,55,57,3,10,5,0,56,55,1,
		0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,61,1,0,0,0,60,58,1,
		0,0,0,61,65,7,0,0,0,62,64,3,10,5,0,63,62,1,0,0,0,64,67,1,0,0,0,65,63,1,
		0,0,0,65,66,1,0,0,0,66,7,1,0,0,0,67,65,1,0,0,0,68,72,3,14,7,0,69,71,5,
		15,0,0,70,69,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,9,1,
		0,0,0,74,72,1,0,0,0,75,80,5,15,0,0,76,77,3,12,6,0,77,78,5,15,0,0,78,80,
		1,0,0,0,79,75,1,0,0,0,79,76,1,0,0,0,80,11,1,0,0,0,81,82,7,1,0,0,82,13,
		1,0,0,0,83,100,3,16,8,0,84,86,3,10,5,0,85,84,1,0,0,0,86,89,1,0,0,0,87,
		85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,90,94,5,3,0,0,91,
		93,3,10,5,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,
		97,1,0,0,0,96,94,1,0,0,0,97,99,3,16,8,0,98,87,1,0,0,0,99,102,1,0,0,0,100,
		98,1,0,0,0,100,101,1,0,0,0,101,15,1,0,0,0,102,100,1,0,0,0,103,113,3,18,
		9,0,104,106,3,10,5,0,105,104,1,0,0,0,106,107,1,0,0,0,107,105,1,0,0,0,107,
		108,1,0,0,0,108,109,1,0,0,0,109,110,3,18,9,0,110,112,1,0,0,0,111,105,1,
		0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,17,1,0,0,0,115,
		113,1,0,0,0,116,118,3,20,10,0,117,116,1,0,0,0,117,118,1,0,0,0,118,119,
		1,0,0,0,119,120,3,22,11,0,120,19,1,0,0,0,121,130,5,10,0,0,122,124,5,10,
		0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,127,5,4,0,0,126,
		128,5,10,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,121,1,
		0,0,0,129,123,1,0,0,0,130,21,1,0,0,0,131,138,3,4,2,0,132,138,3,24,12,0,
		133,138,3,26,13,0,134,138,3,28,14,0,135,138,3,30,15,0,136,138,3,32,16,
		0,137,131,1,0,0,0,137,132,1,0,0,0,137,133,1,0,0,0,137,134,1,0,0,0,137,
		135,1,0,0,0,137,136,1,0,0,0,138,23,1,0,0,0,139,143,5,5,0,0,140,142,3,10,
		5,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,
		146,1,0,0,0,145,143,1,0,0,0,146,150,3,14,7,0,147,149,3,10,5,0,148,147,
		1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,153,1,0,0,
		0,152,150,1,0,0,0,153,154,5,6,0,0,154,25,1,0,0,0,155,159,5,7,0,0,156,158,
		3,10,5,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,
		0,160,162,1,0,0,0,161,159,1,0,0,0,162,166,3,14,7,0,163,165,3,10,5,0,164,
		163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,
		0,0,0,168,166,1,0,0,0,169,170,5,8,0,0,170,27,1,0,0,0,171,172,5,11,0,0,
		172,29,1,0,0,0,173,174,5,12,0,0,174,31,1,0,0,0,175,176,5,13,0,0,176,33,
		1,0,0,0,21,38,42,44,58,65,72,79,87,94,100,107,113,117,123,127,129,137,
		143,150,159,166
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
