//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from pegen_v3_10Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class pegen_v3_10Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACTION=1, MEMO=2, OP=3, NAME=4, NUMBER=5, STRING=6, LPAR=7, RPAR=8, LSQB=9, 
		RSQB=10, COLON=11, COMMA=12, SEMI=13, PLUS=14, MINUS=15, STAR=16, SLASH=17, 
		VBAR=18, AMPER=19, LESS=20, GREATER=21, EQUAL=22, DOT=23, PERCENT=24, 
		RBRACE=25, EQEQUAL=26, NOTEQUAL=27, LESSEQUAL=28, GREATEREQUAL=29, TILDE=30, 
		CIRCUMFLEX=31, LEFTSHIFT=32, RIGHTSHIFT=33, DOUBLESTAR=34, PLUSEQUAL=35, 
		MINEQUAL=36, STAREQUAL=37, SLASHEQUAL=38, PERCENTEQUAL=39, AMPEREQUAL=40, 
		VBAREQUAL=41, CIRCUMFLEXEQUAL=42, LEFTSHIFTEQUAL=43, RIGHTSHIFTEQUAL=44, 
		DOUBLESTAREQUAL=45, DOUBLESLASH=46, DOUBLESLASHEQUAL=47, AT=48, ATEQUAL=49, 
		RARROW=50, ELLIPSIS=51, COLONEQUAL=52, DOLLAR=53, BANG=54, QUESTION=55, 
		SKIP_=56, UNTERMINATED_ACTION=57, STRING2=58, CHAR=59, LBRACE=60, STRINGESC=61;
	public const int
		RULE_start = 0, RULE_grammar_ = 1, RULE_metas = 2, RULE_meta = 3, RULE_rules = 4, 
		RULE_rule_ = 5, RULE_rulename = 6, RULE_attribute = 7, RULE_memoflag = 8, 
		RULE_alts = 9, RULE_more_alts = 10, RULE_alt = 11, RULE_items = 12, RULE_named_item = 13, 
		RULE_attribute_name = 14, RULE_forced_atom = 15, RULE_lookahead = 16, 
		RULE_item = 17, RULE_atom = 18, RULE_action = 19, RULE_name = 20, RULE_string = 21, 
		RULE_newline = 22, RULE_indent = 23, RULE_dedent = 24, RULE_number = 25;
	public static readonly string[] ruleNames = {
		"start", "grammar_", "metas", "meta", "rules", "rule_", "rulename", "attribute", 
		"memoflag", "alts", "more_alts", "alt", "items", "named_item", "attribute_name", 
		"forced_atom", "lookahead", "item", "atom", "action", "name", "string", 
		"newline", "indent", "dedent", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'memo'", "'op'", null, null, null, "'('", "')'", "'['", "']'", 
		"':'", "','", "';'", "'+'", "'-'", "'*'", "'/'", "'|'", "'&'", "'<'", 
		"'>'", "'='", "'.'", "'%'", "'}'", "'=='", "'!='", "'<='", "'>='", "'~'", 
		"'^'", "'<<'", "'>>'", "'**'", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//'", "'//='", "'@'", 
		"'@='", "'->'", "'...'", "':='", "'$'", "'!'", "'?'", null, null, "'\"'", 
		"'''", "'{'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACTION", "MEMO", "OP", "NAME", "NUMBER", "STRING", "LPAR", "RPAR", 
		"LSQB", "RSQB", "COLON", "COMMA", "SEMI", "PLUS", "MINUS", "STAR", "SLASH", 
		"VBAR", "AMPER", "LESS", "GREATER", "EQUAL", "DOT", "PERCENT", "RBRACE", 
		"EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "TILDE", "CIRCUMFLEX", 
		"LEFTSHIFT", "RIGHTSHIFT", "DOUBLESTAR", "PLUSEQUAL", "MINEQUAL", "STAREQUAL", 
		"SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", "VBAREQUAL", "CIRCUMFLEXEQUAL", 
		"LEFTSHIFTEQUAL", "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASH", 
		"DOUBLESLASHEQUAL", "AT", "ATEQUAL", "RARROW", "ELLIPSIS", "COLONEQUAL", 
		"DOLLAR", "BANG", "QUESTION", "SKIP_", "UNTERMINATED_ACTION", "STRING2", 
		"CHAR", "LBRACE", "STRINGESC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pegen_v3_10Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static pegen_v3_10Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public pegen_v3_10Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public pegen_v3_10Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_Context grammar_() {
			return GetRuleContext<Grammar_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(pegen_v3_10Parser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			grammar_();
			State = 53;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public Grammar_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitGrammar_(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_Context grammar_() {
		Grammar_Context _localctx = new Grammar_Context(Context, State);
		EnterRule(_localctx, 2, RULE_grammar_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 55;
				metas();
				}
			}

			State = 58;
			rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MetaContext[] meta() {
			return GetRuleContexts<MetaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetaContext meta(int i) {
			return GetRuleContext<MetaContext>(i);
		}
		public MetasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterMetas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitMetas(this);
		}
	}

	[RuleVersion(0)]
	public MetasContext metas() {
		MetasContext _localctx = new MetasContext(Context, State);
		EnterRule(_localctx, 4, RULE_metas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 60;
				meta();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(pegen_v3_10Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public MetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterMeta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitMeta(this);
		}
	}

	[RuleVersion(0)]
	public MetaContext meta() {
		MetaContext _localctx = new MetaContext(Context, State);
		EnterRule(_localctx, 6, RULE_meta);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				Match(AT);
				State = 66;
				name();
				State = 67;
				newline();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				Match(AT);
				State = 70;
				name();
				State = 71;
				name();
				State = 72;
				newline();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				Match(AT);
				State = 75;
				name();
				State = 76;
				@string();
				State = 77;
				newline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context[] rule_() {
			return GetRuleContexts<Rule_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_(int i) {
			return GetRuleContext<Rule_Context>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 8, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 81;
				rule_();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RulenameContext rulename() {
			return GetRuleContext<RulenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(pegen_v3_10Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltsContext alts() {
			return GetRuleContext<AltsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public More_altsContext more_alts() {
			return GetRuleContext<More_altsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DedentContext dedent() {
			return GetRuleContext<DedentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoflagContext memoflag() {
			return GetRuleContext<MemoflagContext>(0);
		}
		public Rule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitRule_(this);
		}
	}

	[RuleVersion(0)]
	public Rule_Context rule_() {
		Rule_Context _localctx = new Rule_Context(Context, State);
		EnterRule(_localctx, 10, RULE_rule_);
		int _la;
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				rulename();
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 87;
					memoflag();
					}
				}

				State = 90;
				Match(COLON);
				State = 91;
				alts();
				State = 92;
				newline();
				State = 93;
				indent();
				State = 94;
				more_alts();
				State = 95;
				dedent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				rulename();
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 98;
					memoflag();
					}
				}

				State = 101;
				Match(COLON);
				State = 102;
				newline();
				State = 103;
				indent();
				State = 104;
				more_alts();
				State = 105;
				dedent();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 107;
				rulename();
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 108;
					memoflag();
					}
				}

				State = 111;
				Match(COLON);
				State = 112;
				alts();
				State = 113;
				newline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public RulenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterRulename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitRulename(this);
		}
	}

	[RuleVersion(0)]
	public RulenameContext rulename() {
		RulenameContext _localctx = new RulenameContext(Context, State);
		EnterRule(_localctx, 12, RULE_rulename);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			name();
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSQB) {
				{
				State = 118;
				attribute();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(pegen_v3_10Parser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(pegen_v3_10Parser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(pegen_v3_10Parser.STAR, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 14, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 121;
			Match(LSQB);
			State = 122;
			name();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 123;
				Match(STAR);
				}
			}

			State = 126;
			Match(RSQB);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoflagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(pegen_v3_10Parser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMO() { return GetToken(pegen_v3_10Parser.MEMO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(pegen_v3_10Parser.RPAR, 0); }
		public MemoflagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoflag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterMemoflag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitMemoflag(this);
		}
	}

	[RuleVersion(0)]
	public MemoflagContext memoflag() {
		MemoflagContext _localctx = new MemoflagContext(Context, State);
		EnterRule(_localctx, 16, RULE_memoflag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(LPAR);
			State = 129;
			Match(MEMO);
			State = 130;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltContext[] alt() {
			return GetRuleContexts<AltContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltContext alt(int i) {
			return GetRuleContext<AltContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VBAR() { return GetTokens(pegen_v3_10Parser.VBAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR(int i) {
			return GetToken(pegen_v3_10Parser.VBAR, i);
		}
		public AltsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterAlts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitAlts(this);
		}
	}

	[RuleVersion(0)]
	public AltsContext alts() {
		AltsContext _localctx = new AltsContext(Context, State);
		EnterRule(_localctx, 18, RULE_alts);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			alt();
			State = 137;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 133;
					Match(VBAR);
					State = 134;
					alt();
					}
					} 
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class More_altsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VBAR() { return GetTokens(pegen_v3_10Parser.VBAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR(int i) {
			return GetToken(pegen_v3_10Parser.VBAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltsContext[] alts() {
			return GetRuleContexts<AltsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltsContext alts(int i) {
			return GetRuleContext<AltsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public More_altsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_more_alts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterMore_alts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitMore_alts(this);
		}
	}

	[RuleVersion(0)]
	public More_altsContext more_alts() {
		More_altsContext _localctx = new More_altsContext(Context, State);
		EnterRule(_localctx, 20, RULE_more_alts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 140;
				Match(VBAR);
				State = 141;
				alts();
				State = 142;
				newline();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VBAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemsContext items() {
			return GetRuleContext<ItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(pegen_v3_10Parser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public AltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitAlt(this);
		}
	}

	[RuleVersion(0)]
	public AltContext alt() {
		AltContext _localctx = new AltContext(Context, State);
		EnterRule(_localctx, 22, RULE_alt);
		int _la;
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				items();
				State = 149;
				Match(DOLLAR);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ACTION) {
					{
					State = 150;
					action();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				items();
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ACTION) {
					{
					State = 154;
					action();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_itemContext[] named_item() {
			return GetRuleContexts<Named_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_itemContext named_item(int i) {
			return GetRuleContext<Named_itemContext>(i);
		}
		public ItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitItems(this);
		}
	}

	[RuleVersion(0)]
	public ItemsContext items() {
		ItemsContext _localctx = new ItemsContext(Context, State);
		EnterRule(_localctx, 24, RULE_items);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 159;
					named_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forced_atomContext forced_atom() {
			return GetRuleContext<Forced_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LookaheadContext lookahead() {
			return GetRuleContext<LookaheadContext>(0);
		}
		public Named_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterNamed_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitNamed_item(this);
		}
	}

	[RuleVersion(0)]
	public Named_itemContext named_item() {
		Named_itemContext _localctx = new Named_itemContext(Context, State);
		EnterRule(_localctx, 26, RULE_named_item);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 164;
					attribute_name();
					}
					break;
				}
				State = 167;
				item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				forced_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				lookahead();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(pegen_v3_10Parser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(pegen_v3_10Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(pegen_v3_10Parser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(pegen_v3_10Parser.EQUAL, 0); }
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterAttribute_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitAttribute_name(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_attribute_name);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				name();
				State = 173;
				Match(LSQB);
				State = 174;
				name();
				State = 175;
				Match(STAR);
				State = 176;
				Match(RSQB);
				State = 177;
				Match(EQUAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				name();
				State = 180;
				Match(LSQB);
				State = 181;
				name();
				State = 182;
				Match(RSQB);
				State = 183;
				Match(EQUAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				name();
				State = 186;
				Match(EQUAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forced_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMPER() { return GetTokens(pegen_v3_10Parser.AMPER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPER(int i) {
			return GetToken(pegen_v3_10Parser.AMPER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Forced_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forced_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterForced_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitForced_atom(this);
		}
	}

	[RuleVersion(0)]
	public Forced_atomContext forced_atom() {
		Forced_atomContext _localctx = new Forced_atomContext(Context, State);
		EnterRule(_localctx, 30, RULE_forced_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(AMPER);
			State = 191;
			Match(AMPER);
			State = 192;
			atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LookaheadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPER() { return GetToken(pegen_v3_10Parser.AMPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(pegen_v3_10Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(pegen_v3_10Parser.TILDE, 0); }
		public LookaheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lookahead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterLookahead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitLookahead(this);
		}
	}

	[RuleVersion(0)]
	public LookaheadContext lookahead() {
		LookaheadContext _localctx = new LookaheadContext(Context, State);
		EnterRule(_localctx, 32, RULE_lookahead);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AMPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				Match(AMPER);
				State = 195;
				atom();
				}
				break;
			case BANG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				Match(BANG);
				State = 197;
				atom();
				}
				break;
			case TILDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 198;
				Match(TILDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(pegen_v3_10Parser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltsContext alts() {
			return GetRuleContext<AltsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(pegen_v3_10Parser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(pegen_v3_10Parser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(pegen_v3_10Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(pegen_v3_10Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pegen_v3_10Parser.DOT, 0); }
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 34, RULE_item);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				Match(LSQB);
				State = 202;
				alts();
				State = 203;
				Match(RSQB);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205;
				atom();
				State = 206;
				Match(QUESTION);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208;
				atom();
				State = 209;
				Match(STAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 211;
				atom();
				State = 212;
				Match(PLUS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 214;
				atom();
				State = 215;
				Match(DOT);
				State = 216;
				atom();
				State = 217;
				Match(PLUS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 219;
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(pegen_v3_10Parser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltsContext alts() {
			return GetRuleContext<AltsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(pegen_v3_10Parser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 36, RULE_atom);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				Match(LPAR);
				State = 223;
				alts();
				State = 224;
				Match(RPAR);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				name();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(pegen_v3_10Parser.ACTION, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 38, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(pegen_v3_10Parser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 40, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(pegen_v3_10Parser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 42, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitNewline(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 44, RULE_newline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : ParserRuleContext {
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterIndent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitIndent(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 46, RULE_indent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DedentContext : ParserRuleContext {
		public DedentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dedent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterDedent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitDedent(this);
		}
	}

	[RuleVersion(0)]
	public DedentContext dedent() {
		DedentContext _localctx = new DedentContext(Context, State);
		EnterRule(_localctx, 48, RULE_dedent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(pegen_v3_10Parser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Ipegen_v3_10ParserListener typedListener = listener as Ipegen_v3_10ParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 50, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,61,245,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,1,3,1,57,8,1,1,1,
		1,1,1,2,4,2,62,8,2,11,2,12,2,63,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,3,3,80,8,3,1,4,4,4,83,8,4,11,4,12,4,84,1,5,1,5,3,5,89,
		8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,100,8,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,3,5,110,8,5,1,5,1,5,1,5,1,5,3,5,116,8,5,1,6,1,6,3,6,120,
		8,6,1,7,1,7,1,7,3,7,125,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,5,9,136,
		8,9,10,9,12,9,139,9,9,1,10,1,10,1,10,1,10,4,10,145,8,10,11,10,12,10,146,
		1,11,1,11,1,11,3,11,152,8,11,1,11,1,11,3,11,156,8,11,3,11,158,8,11,1,12,
		4,12,161,8,12,11,12,12,12,162,1,13,3,13,166,8,13,1,13,1,13,1,13,3,13,171,
		8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,3,14,189,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
		16,3,16,200,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,221,8,17,1,18,1,18,1,18,1,
		18,1,18,1,18,3,18,229,8,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
		1,23,1,24,1,24,1,25,1,25,1,25,0,0,26,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,0,0,250,0,52,1,0,0,0,2,56,1,0,0,
		0,4,61,1,0,0,0,6,79,1,0,0,0,8,82,1,0,0,0,10,115,1,0,0,0,12,117,1,0,0,0,
		14,121,1,0,0,0,16,128,1,0,0,0,18,132,1,0,0,0,20,144,1,0,0,0,22,157,1,0,
		0,0,24,160,1,0,0,0,26,170,1,0,0,0,28,188,1,0,0,0,30,190,1,0,0,0,32,199,
		1,0,0,0,34,220,1,0,0,0,36,228,1,0,0,0,38,230,1,0,0,0,40,232,1,0,0,0,42,
		234,1,0,0,0,44,236,1,0,0,0,46,238,1,0,0,0,48,240,1,0,0,0,50,242,1,0,0,
		0,52,53,3,2,1,0,53,54,5,0,0,1,54,1,1,0,0,0,55,57,3,4,2,0,56,55,1,0,0,0,
		56,57,1,0,0,0,57,58,1,0,0,0,58,59,3,8,4,0,59,3,1,0,0,0,60,62,3,6,3,0,61,
		60,1,0,0,0,62,63,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,5,1,0,0,0,65,66,
		5,48,0,0,66,67,3,40,20,0,67,68,3,44,22,0,68,80,1,0,0,0,69,70,5,48,0,0,
		70,71,3,40,20,0,71,72,3,40,20,0,72,73,3,44,22,0,73,80,1,0,0,0,74,75,5,
		48,0,0,75,76,3,40,20,0,76,77,3,42,21,0,77,78,3,44,22,0,78,80,1,0,0,0,79,
		65,1,0,0,0,79,69,1,0,0,0,79,74,1,0,0,0,80,7,1,0,0,0,81,83,3,10,5,0,82,
		81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,9,1,0,0,0,86,88,
		3,12,6,0,87,89,3,16,8,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,
		5,11,0,0,91,92,3,18,9,0,92,93,3,44,22,0,93,94,3,46,23,0,94,95,3,20,10,
		0,95,96,3,48,24,0,96,116,1,0,0,0,97,99,3,12,6,0,98,100,3,16,8,0,99,98,
		1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,5,11,0,0,102,103,3,44,22,
		0,103,104,3,46,23,0,104,105,3,20,10,0,105,106,3,48,24,0,106,116,1,0,0,
		0,107,109,3,12,6,0,108,110,3,16,8,0,109,108,1,0,0,0,109,110,1,0,0,0,110,
		111,1,0,0,0,111,112,5,11,0,0,112,113,3,18,9,0,113,114,3,44,22,0,114,116,
		1,0,0,0,115,86,1,0,0,0,115,97,1,0,0,0,115,107,1,0,0,0,116,11,1,0,0,0,117,
		119,3,40,20,0,118,120,3,14,7,0,119,118,1,0,0,0,119,120,1,0,0,0,120,13,
		1,0,0,0,121,122,5,9,0,0,122,124,3,40,20,0,123,125,5,16,0,0,124,123,1,0,
		0,0,124,125,1,0,0,0,125,126,1,0,0,0,126,127,5,10,0,0,127,15,1,0,0,0,128,
		129,5,7,0,0,129,130,5,2,0,0,130,131,5,8,0,0,131,17,1,0,0,0,132,137,3,22,
		11,0,133,134,5,18,0,0,134,136,3,22,11,0,135,133,1,0,0,0,136,139,1,0,0,
		0,137,135,1,0,0,0,137,138,1,0,0,0,138,19,1,0,0,0,139,137,1,0,0,0,140,141,
		5,18,0,0,141,142,3,18,9,0,142,143,3,44,22,0,143,145,1,0,0,0,144,140,1,
		0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,21,1,0,0,0,148,
		149,3,24,12,0,149,151,5,53,0,0,150,152,3,38,19,0,151,150,1,0,0,0,151,152,
		1,0,0,0,152,158,1,0,0,0,153,155,3,24,12,0,154,156,3,38,19,0,155,154,1,
		0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,148,1,0,0,0,157,153,1,0,0,0,
		158,23,1,0,0,0,159,161,3,26,13,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,
		1,0,0,0,162,163,1,0,0,0,163,25,1,0,0,0,164,166,3,28,14,0,165,164,1,0,0,
		0,165,166,1,0,0,0,166,167,1,0,0,0,167,171,3,34,17,0,168,171,3,30,15,0,
		169,171,3,32,16,0,170,165,1,0,0,0,170,168,1,0,0,0,170,169,1,0,0,0,171,
		27,1,0,0,0,172,173,3,40,20,0,173,174,5,9,0,0,174,175,3,40,20,0,175,176,
		5,16,0,0,176,177,5,10,0,0,177,178,5,22,0,0,178,189,1,0,0,0,179,180,3,40,
		20,0,180,181,5,9,0,0,181,182,3,40,20,0,182,183,5,10,0,0,183,184,5,22,0,
		0,184,189,1,0,0,0,185,186,3,40,20,0,186,187,5,22,0,0,187,189,1,0,0,0,188,
		172,1,0,0,0,188,179,1,0,0,0,188,185,1,0,0,0,189,29,1,0,0,0,190,191,5,19,
		0,0,191,192,5,19,0,0,192,193,3,36,18,0,193,31,1,0,0,0,194,195,5,19,0,0,
		195,200,3,36,18,0,196,197,5,54,0,0,197,200,3,36,18,0,198,200,5,30,0,0,
		199,194,1,0,0,0,199,196,1,0,0,0,199,198,1,0,0,0,200,33,1,0,0,0,201,202,
		5,9,0,0,202,203,3,18,9,0,203,204,5,10,0,0,204,221,1,0,0,0,205,206,3,36,
		18,0,206,207,5,55,0,0,207,221,1,0,0,0,208,209,3,36,18,0,209,210,5,16,0,
		0,210,221,1,0,0,0,211,212,3,36,18,0,212,213,5,14,0,0,213,221,1,0,0,0,214,
		215,3,36,18,0,215,216,5,23,0,0,216,217,3,36,18,0,217,218,5,14,0,0,218,
		221,1,0,0,0,219,221,3,36,18,0,220,201,1,0,0,0,220,205,1,0,0,0,220,208,
		1,0,0,0,220,211,1,0,0,0,220,214,1,0,0,0,220,219,1,0,0,0,221,35,1,0,0,0,
		222,223,5,7,0,0,223,224,3,18,9,0,224,225,5,8,0,0,225,229,1,0,0,0,226,229,
		3,40,20,0,227,229,3,42,21,0,228,222,1,0,0,0,228,226,1,0,0,0,228,227,1,
		0,0,0,229,37,1,0,0,0,230,231,5,1,0,0,231,39,1,0,0,0,232,233,5,4,0,0,233,
		41,1,0,0,0,234,235,5,6,0,0,235,43,1,0,0,0,236,237,1,0,0,0,237,45,1,0,0,
		0,238,239,1,0,0,0,239,47,1,0,0,0,240,241,1,0,0,0,241,49,1,0,0,0,242,243,
		5,5,0,0,243,51,1,0,0,0,22,56,63,79,84,88,99,109,115,119,124,137,146,151,
		155,157,162,165,170,188,199,220,228
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
