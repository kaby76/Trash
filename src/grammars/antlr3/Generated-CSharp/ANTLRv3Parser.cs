//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ANTLRv3Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ANTLRv3Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOC_COMMENT=1, PARSER=2, LEXER=3, RULE=4, BLOCK=5, OPTIONAL=6, CLOSURE=7, 
		POSITIVE_CLOSURE=8, SYNPRED=9, RANGE=10, CHAR_RANGE=11, EPSILON=12, ALT=13, 
		EOR=14, EOB=15, EOA=16, ID=17, ARG=18, ARGLIST=19, RET=20, LEXER_GRAMMAR=21, 
		PARSER_GRAMMAR=22, TREE_GRAMMAR=23, COMBINED_GRAMMAR=24, INITACTION=25, 
		LABEL=26, TEMPLATE=27, SCOPE=28, SEMPRED=29, GATED_SEMPRED=30, SYN_SEMPRED=31, 
		BACKTRACK_SEMPRED=32, FRAGMENT=33, TREE_BEGIN=34, ROOT=35, BANG=36, REWRITE=37, 
		ACTION_CONTENT=38, SL_COMMENT=39, ML_COMMENT=40, INT=41, CHAR_LITERAL=42, 
		STRING_LITERAL=43, DOUBLE_QUOTE_STRING_LITERAL=44, DOUBLE_ANGLE_STRING_LITERAL=45, 
		BEGIN_ARGUMENT=46, BEGIN_ACTION=47, OPTIONS=48, TOKENS=49, CATCH=50, FINALLY=51, 
		GRAMMAR=52, PRIVATE=53, PROTECTED=54, PUBLIC=55, RETURNS=56, THROWS=57, 
		TREE=58, AT=59, CLOSE_ELEMENT_OPTION=60, COLON=61, COLONCOLON=62, COMMA=63, 
		DOT=64, EQUAL=65, LBRACE=66, LBRACK=67, LPAREN=68, OPEN_ELEMENT_OPTION=69, 
		OR=70, PLUS=71, QM=72, RBRACE=73, RBRACK=74, RPAREN=75, SEMI=76, SEMPREDOP=77, 
		STAR=78, DOLLAR=79, PEQ=80, NOT=81, WS=82, TOKEN_REF=83, RULE_REF=84, 
		END_ARGUMENT=85, UNTERMINATED_ARGUMENT=86, ARGUMENT_CONTENT=87, END_ACTION=88, 
		UNTERMINATED_ACTION=89, OPT_LBRACE=90, LEXER_CHAR_SET=91, UNTERMINATED_CHAR_SET=92;
	public const int
		RULE_grammarDef = 0, RULE_tokensSpec = 1, RULE_tokenSpec = 2, RULE_attrScope = 3, 
		RULE_action = 4, RULE_actionScopeName = 5, RULE_optionsSpec = 6, RULE_option = 7, 
		RULE_optionValue = 8, RULE_rules = 9, RULE_rule_ = 10, RULE_ruleAction = 11, 
		RULE_throwsSpec = 12, RULE_ruleScopeSpec = 13, RULE_block = 14, RULE_altList = 15, 
		RULE_alternative = 16, RULE_exceptionGroup = 17, RULE_exceptionHandler = 18, 
		RULE_finallyClause = 19, RULE_element = 20, RULE_elementNoOptionSpec = 21, 
		RULE_actionBlock = 22, RULE_argActionBlock = 23, RULE_atom = 24, RULE_notSet = 25, 
		RULE_treeSpec = 26, RULE_ebnf = 27, RULE_range_ = 28, RULE_terminal_ = 29, 
		RULE_elementOptions = 30, RULE_defaultNodeOption = 31, RULE_elementOption = 32, 
		RULE_elementOptionId = 33, RULE_notTerminal = 34, RULE_ebnfSuffix = 35, 
		RULE_rewrite = 36, RULE_rewrite_alternative = 37, RULE_rewrite_tree_block = 38, 
		RULE_rewrite_tree_alternative = 39, RULE_rewrite_tree_element = 40, RULE_rewrite_tree_atom = 41, 
		RULE_rewrite_tree_ebnf = 42, RULE_rewrite_tree = 43, RULE_rewrite_template = 44, 
		RULE_rewrite_template_ref = 45, RULE_rewrite_indirect_template_head = 46, 
		RULE_rewrite_template_args = 47, RULE_rewrite_template_arg = 48, RULE_id_ = 49;
	public static readonly string[] ruleNames = {
		"grammarDef", "tokensSpec", "tokenSpec", "attrScope", "action", "actionScopeName", 
		"optionsSpec", "option", "optionValue", "rules", "rule_", "ruleAction", 
		"throwsSpec", "ruleScopeSpec", "block", "altList", "alternative", "exceptionGroup", 
		"exceptionHandler", "finallyClause", "element", "elementNoOptionSpec", 
		"actionBlock", "argActionBlock", "atom", "notSet", "treeSpec", "ebnf", 
		"range_", "terminal_", "elementOptions", "defaultNodeOption", "elementOption", 
		"elementOptionId", "notTerminal", "ebnfSuffix", "rewrite", "rewrite_alternative", 
		"rewrite_tree_block", "rewrite_tree_alternative", "rewrite_tree_element", 
		"rewrite_tree_atom", "rewrite_tree_ebnf", "rewrite_tree", "rewrite_template", 
		"rewrite_template_ref", "rewrite_indirect_template_head", "rewrite_template_args", 
		"rewrite_template_arg", "id_"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'parser'", "'lexer'", null, null, null, null, null, null, 
		"'..'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'scope'", null, null, null, null, 
		"'fragment'", "'^('", "'^'", "'!'", null, null, null, null, null, null, 
		null, null, null, null, null, "'options'", "'tokens'", "'catch'", "'finally'", 
		"'grammar'", "'private'", "'protected'", "'public'", "'returns'", "'throws'", 
		"'tree'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOC_COMMENT", "PARSER", "LEXER", "RULE", "BLOCK", "OPTIONAL", "CLOSURE", 
		"POSITIVE_CLOSURE", "SYNPRED", "RANGE", "CHAR_RANGE", "EPSILON", "ALT", 
		"EOR", "EOB", "EOA", "ID", "ARG", "ARGLIST", "RET", "LEXER_GRAMMAR", "PARSER_GRAMMAR", 
		"TREE_GRAMMAR", "COMBINED_GRAMMAR", "INITACTION", "LABEL", "TEMPLATE", 
		"SCOPE", "SEMPRED", "GATED_SEMPRED", "SYN_SEMPRED", "BACKTRACK_SEMPRED", 
		"FRAGMENT", "TREE_BEGIN", "ROOT", "BANG", "REWRITE", "ACTION_CONTENT", 
		"SL_COMMENT", "ML_COMMENT", "INT", "CHAR_LITERAL", "STRING_LITERAL", "DOUBLE_QUOTE_STRING_LITERAL", 
		"DOUBLE_ANGLE_STRING_LITERAL", "BEGIN_ARGUMENT", "BEGIN_ACTION", "OPTIONS", 
		"TOKENS", "CATCH", "FINALLY", "GRAMMAR", "PRIVATE", "PROTECTED", "PUBLIC", 
		"RETURNS", "THROWS", "TREE", "AT", "CLOSE_ELEMENT_OPTION", "COLON", "COLONCOLON", 
		"COMMA", "DOT", "EQUAL", "LBRACE", "LBRACK", "LPAREN", "OPEN_ELEMENT_OPTION", 
		"OR", "PLUS", "QM", "RBRACE", "RBRACK", "RPAREN", "SEMI", "SEMPREDOP", 
		"STAR", "DOLLAR", "PEQ", "NOT", "WS", "TOKEN_REF", "RULE_REF", "END_ARGUMENT", 
		"UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
		"OPT_LBRACE", "LEXER_CHAR_SET", "UNTERMINATED_CHAR_SET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRv3Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ANTLRv3Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ANTLRv3Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ANTLRv3Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GrammarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMMAR() { return GetToken(ANTLRv3Parser.GRAMMAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ANTLRv3Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv3Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv3Parser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE() { return GetToken(ANTLRv3Parser.TREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv3Parser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrScopeContext[] attrScope() {
			return GetRuleContexts<AttrScopeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrScopeContext attrScope(int i) {
			return GetRuleContext<AttrScopeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public GrammarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterGrammarDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitGrammarDef(this);
		}
	}

	[RuleVersion(0)]
	public GrammarDefContext grammarDef() {
		GrammarDefContext _localctx = new GrammarDefContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 100;
				Match(DOC_COMMENT);
				}
			}

			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEXER:
				{
				State = 103;
				Match(LEXER);
				}
				break;
			case PARSER:
				{
				State = 104;
				Match(PARSER);
				}
				break;
			case TREE:
				{
				State = 105;
				Match(TREE);
				}
				break;
			case GRAMMAR:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 109;
			Match(GRAMMAR);
			State = 110;
			id_();
			State = 111;
			Match(SEMI);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 112;
				optionsSpec();
				}
			}

			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKENS) {
				{
				State = 115;
				tokensSpec();
				}
			}

			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOPE) {
				{
				{
				State = 118;
				attrScope();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 124;
				action();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130;
			rules();
			State = 131;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKENS() { return GetToken(ANTLRv3Parser.TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv3Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv3Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenSpecContext[] tokenSpec() {
			return GetRuleContexts<TokenSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenSpecContext tokenSpec(int i) {
			return GetRuleContext<TokenSpecContext>(i);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 2, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(TOKENS);
			State = 134;
			Match(LBRACE);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 135;
				tokenSpec();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TOKEN_REF );
			State = 140;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		public TokenSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterTokenSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitTokenSpec(this);
		}
	}

	[RuleVersion(0)]
	public TokenSpecContext tokenSpec() {
		TokenSpecContext _localctx = new TokenSpecContext(Context, State);
		EnterRule(_localctx, 4, RULE_tokenSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(TOKEN_REF);
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				{
				State = 143;
				Match(EQUAL);
				State = 144;
				_la = TokenStream.LA(1);
				if ( !(_la==CHAR_LITERAL || _la==STRING_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SEMI:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 148;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(ANTLRv3Parser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public AttrScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrScope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAttrScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAttrScope(this);
		}
	}

	[RuleVersion(0)]
	public AttrScopeContext attrScope() {
		AttrScopeContext _localctx = new AttrScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attrScope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(SCOPE);
			State = 151;
			id_();
			State = 152;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ANTLRv3Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(ANTLRv3Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 8, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(AT);
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 155;
				actionScopeName();
				State = 156;
				Match(COLONCOLON);
				}
				break;
			}
			State = 160;
			id_();
			State = 161;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv3Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv3Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_actionScopeName);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				id_();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv3Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv3Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv3Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(OPTIONS);
			State = 169;
			Match(LBRACE);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 170;
				option();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 176;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			id_();
			State = 179;
			Match(EQUAL);
			State = 180;
			optionValue();
			State = 181;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ANTLRv3Parser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ANTLRv3Parser.STAR, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_optionValue);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				id_();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(STRING_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				Match(CHAR_LITERAL);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 186;
				Match(INT);
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 187;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context[] rule_() {
			return GetRuleContexts<Rule_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_(int i) {
			return GetRuleContext<Rule_Context>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 18, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 190;
				rule_();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 63050403373121538L) != 0) || _la==TOKEN_REF || _la==RULE_REF );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv3Parser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv3Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext[] argActionBlock() {
			return GetRuleContexts<ArgActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock(int i) {
			return GetRuleContext<ArgActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(ANTLRv3Parser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleScopeSpecContext ruleScopeSpec() {
			return GetRuleContext<RuleScopeSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(ANTLRv3Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(ANTLRv3Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ANTLRv3Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAGMENT() { return GetToken(ANTLRv3Parser.FRAGMENT, 0); }
		public Rule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRule_(this);
		}
	}

	[RuleVersion(0)]
	public Rule_Context rule_() {
		Rule_Context _localctx = new Rule_Context(Context, State);
		EnterRule(_localctx, 20, RULE_rule_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 195;
				Match(DOC_COMMENT);
				}
			}

			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 63050403373121536L) != 0)) {
				{
				State = 198;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 63050403373121536L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 201;
			id_();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG) {
				{
				State = 202;
				Match(BANG);
				}
			}

			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 205;
				argActionBlock();
				}
			}

			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 208;
				Match(RETURNS);
				State = 209;
				argActionBlock();
				}
			}

			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 212;
				throwsSpec();
				}
			}

			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 215;
				optionsSpec();
				}
			}

			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SCOPE) {
				{
				State = 218;
				ruleScopeSpec();
				}
			}

			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 221;
				ruleAction();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227;
			Match(COLON);
			State = 228;
			altList();
			State = 229;
			Match(SEMI);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATCH || _la==FINALLY) {
				{
				State = 230;
				exceptionGroup();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ANTLRv3Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 22, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(AT);
			State = 234;
			id_();
			State = 235;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(ANTLRv3Parser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv3Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 24, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(THROWS);
			State = 238;
			id_();
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 239;
				Match(COMMA);
				State = 240;
				id_();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleScopeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOPE() { return GetTokens(ANTLRv3Parser.SCOPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE(int i) {
			return GetToken(ANTLRv3Parser.SCOPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv3Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv3Parser.COMMA, i);
		}
		public RuleScopeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleScopeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRuleScopeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRuleScopeSpec(this);
		}
	}

	[RuleVersion(0)]
	public RuleScopeSpecContext ruleScopeSpec() {
		RuleScopeSpecContext _localctx = new RuleScopeSpecContext(Context, State);
		EnterRule(_localctx, 26, RULE_ruleScopeSpec);
		int _la;
		try {
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				Match(SCOPE);
				State = 247;
				actionBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				Match(SCOPE);
				State = 249;
				id_();
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 250;
					Match(COMMA);
					State = 251;
					id_();
					}
					}
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 257;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 259;
				Match(SCOPE);
				State = 260;
				actionBlock();
				State = 261;
				Match(SCOPE);
				State = 262;
				id_();
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 263;
					Match(COMMA);
					State = 264;
					id_();
					}
					}
					State = 269;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 270;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv3Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteContext[] rewrite() {
			return GetRuleContexts<RewriteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteContext rewrite(int i) {
			return GetRuleContext<RewriteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv3Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv3Parser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(LPAREN);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS || _la==COLON) {
				{
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 275;
					optionsSpec();
					}
				}

				State = 278;
				Match(COLON);
				}
			}

			State = 281;
			alternative();
			State = 282;
			rewrite();
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 283;
				Match(OR);
				State = 284;
				alternative();
				State = 285;
				rewrite();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 292;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteContext[] rewrite() {
			return GetRuleContexts<RewriteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteContext rewrite(int i) {
			return GetRuleContext<RewriteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv3Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv3Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 30, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			alternative();
			State = 295;
			rewrite();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 296;
				Match(OR);
				State = 297;
				alternative();
				State = 298;
				rewrite();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 32, RULE_alternative);
		int _la;
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TREE_BEGIN:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case DOT:
			case LPAREN:
			case NOT:
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 305;
					element();
					}
					}
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 1829605602239233L) != 0) );
				}
				break;
			case REWRITE:
			case OR:
			case RPAREN:
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 34, RULE_exceptionGroup);
		int _la;
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CATCH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 313;
					exceptionHandler();
					}
					}
					State = 316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CATCH );
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FINALLY) {
					{
					State = 318;
					finallyClause();
					}
				}

				}
				break;
			case FINALLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				finallyClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ANTLRv3Parser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 36, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(CATCH);
			State = 325;
			argActionBlock();
			State = 326;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(ANTLRv3Parser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(FINALLY);
			State = 329;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementNoOptionSpecContext elementNoOptionSpec() {
			return GetRuleContext<ElementNoOptionSpecContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 40, RULE_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			elementNoOptionSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNoOptionSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEQ() { return GetToken(ANTLRv3Parser.PEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv3Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMPREDOP() { return GetToken(ANTLRv3Parser.SEMPREDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TreeSpecContext treeSpec() {
			return GetRuleContext<TreeSpecContext>(0);
		}
		public ElementNoOptionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementNoOptionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElementNoOptionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElementNoOptionSpec(this);
		}
	}

	[RuleVersion(0)]
	public ElementNoOptionSpecContext elementNoOptionSpec() {
		ElementNoOptionSpecContext _localctx = new ElementNoOptionSpecContext(Context, State);
		EnterRule(_localctx, 42, RULE_elementNoOptionSpec);
		int _la;
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				id_();
				State = 334;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==PEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 335;
				atom();
				State = 338;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 336;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				id_();
				State = 341;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==PEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 342;
				block();
				State = 345;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 343;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 347;
				atom();
				State = 350;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 348;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 352;
				ebnf();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 353;
				actionBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 354;
				actionBlock();
				State = 355;
				Match(QM);
				State = 358;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEMPREDOP:
					{
					State = 356;
					Match(SEMPREDOP);
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 360;
				treeSpec();
				State = 363;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 361;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ACTION() { return GetToken(ANTLRv3Parser.BEGIN_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ACTION() { return GetToken(ANTLRv3Parser.END_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ACTION_CONTENT() { return GetTokens(ANTLRv3Parser.ACTION_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_CONTENT(int i) {
			return GetToken(ANTLRv3Parser.ACTION_CONTENT, i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(BEGIN_ACTION);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ACTION_CONTENT) {
				{
				{
				State = 368;
				Match(ACTION_CONTENT);
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 374;
			Match(END_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ARGUMENT() { return GetToken(ANTLRv3Parser.BEGIN_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ARGUMENT() { return GetToken(ANTLRv3Parser.END_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(ANTLRv3Parser.ARGUMENT_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(ANTLRv3Parser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ArgActionBlockContext argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_argActionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(BEGIN_ARGUMENT);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARGUMENT_CONTENT) {
				{
				{
				State = 377;
				Match(ARGUMENT_CONTENT);
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 383;
			Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_Context range_() {
			return GetRuleContext<Range_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(ANTLRv3Parser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv3Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_Context terminal_() {
			return GetRuleContext<Terminal_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv3Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 48, RULE_atom);
		int _la;
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385;
				range_();
				State = 389;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ROOT:
					{
					State = 386;
					Match(ROOT);
					}
					break;
				case BANG:
					{
					State = 387;
					Match(BANG);
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case PLUS:
				case QM:
				case RPAREN:
				case SEMI:
				case STAR:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				terminal_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392;
				notSet();
				State = 396;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ROOT:
					{
					State = 393;
					Match(ROOT);
					}
					break;
				case BANG:
					{
					State = 394;
					Match(BANG);
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case PLUS:
				case QM:
				case RPAREN:
				case SEMI:
				case STAR:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 398;
				Match(RULE_REF);
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BEGIN_ARGUMENT) {
					{
					State = 399;
					argActionBlock();
					}
				}

				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROOT || _la==BANG) {
					{
					State = 402;
					_la = TokenStream.LA(1);
					if ( !(_la==ROOT || _la==BANG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ANTLRv3Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotTerminalContext notTerminal() {
			return GetRuleContext<NotTerminalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 50, RULE_notSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(NOT);
			State = 410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case TOKEN_REF:
				{
				State = 408;
				notTerminal();
				}
				break;
			case LPAREN:
				{
				State = 409;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE_BEGIN() { return GetToken(ANTLRv3Parser.TREE_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		public TreeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterTreeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitTreeSpec(this);
		}
	}

	[RuleVersion(0)]
	public TreeSpecContext treeSpec() {
		TreeSpecContext _localctx = new TreeSpecContext(Context, State);
		EnterRule(_localctx, 52, RULE_treeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(TREE_BEGIN);
			State = 413;
			element();
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 414;
				element();
				}
				}
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 1829605602239233L) != 0) );
			State = 419;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv3Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ANTLRv3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ANTLRv3Parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMPREDOP() { return GetToken(ANTLRv3Parser.SEMPREDOP, 0); }
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 54, RULE_ebnf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			block();
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QM:
				{
				State = 422;
				Match(QM);
				}
				break;
			case STAR:
				{
				State = 423;
				Match(STAR);
				}
				break;
			case PLUS:
				{
				State = 424;
				Match(PLUS);
				}
				break;
			case SEMPREDOP:
				{
				State = 425;
				Match(SEMPREDOP);
				}
				break;
			case TREE_BEGIN:
			case REWRITE:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case DOT:
			case LPAREN:
			case OR:
			case RPAREN:
			case SEMI:
			case NOT:
			case TOKEN_REF:
			case RULE_REF:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR_LITERAL() { return GetTokens(ANTLRv3Parser.CHAR_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL(int i) {
			return GetToken(ANTLRv3Parser.CHAR_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(ANTLRv3Parser.RANGE, 0); }
		public Range_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRange_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRange_(this);
		}
	}

	[RuleVersion(0)]
	public Range_Context range_() {
		Range_Context _localctx = new Range_Context(Context, State);
		EnterRule(_localctx, 56, RULE_range_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(CHAR_LITERAL);
			State = 430;
			Match(RANGE);
			State = 431;
			Match(CHAR_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ANTLRv3Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(ANTLRv3Parser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv3Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public Terminal_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterTerminal_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitTerminal_(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_Context terminal_() {
		Terminal_Context _localctx = new Terminal_Context(Context, State);
		EnterRule(_localctx, 58, RULE_terminal_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				{
				State = 433;
				Match(CHAR_LITERAL);
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 434;
					elementOptions();
					}
				}

				}
				break;
			case TOKEN_REF:
				{
				State = 437;
				Match(TOKEN_REF);
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 438;
					elementOptions();
					}
				}

				State = 443;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BEGIN_ARGUMENT:
					{
					State = 441;
					argActionBlock();
					}
					break;
				case TREE_BEGIN:
				case ROOT:
				case BANG:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case DOT:
				case LPAREN:
				case OR:
				case PLUS:
				case QM:
				case RPAREN:
				case SEMI:
				case STAR:
				case NOT:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case STRING_LITERAL:
				{
				State = 445;
				Match(STRING_LITERAL);
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 446;
					elementOptions();
					}
				}

				}
				break;
			case DOT:
				{
				State = 449;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROOT || _la==BANG) {
				{
				State = 452;
				_la = TokenStream.LA(1);
				if ( !(_la==ROOT || _la==BANG) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ELEMENT_OPTION() { return GetToken(ANTLRv3Parser.OPEN_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultNodeOptionContext defaultNodeOption() {
			return GetRuleContext<DefaultNodeOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ELEMENT_OPTION() { return GetToken(ANTLRv3Parser.CLOSE_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(ANTLRv3Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv3Parser.SEMI, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 60, RULE_elementOptions);
		int _la;
		try {
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				Match(OPEN_ELEMENT_OPTION);
				State = 456;
				defaultNodeOption();
				State = 457;
				Match(CLOSE_ELEMENT_OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				Match(OPEN_ELEMENT_OPTION);
				State = 460;
				elementOption();
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMI) {
					{
					{
					State = 461;
					Match(SEMI);
					State = 462;
					elementOption();
					}
					}
					State = 467;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 468;
				Match(CLOSE_ELEMENT_OPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultNodeOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionIdContext elementOptionId() {
			return GetRuleContext<ElementOptionIdContext>(0);
		}
		public DefaultNodeOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultNodeOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterDefaultNodeOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitDefaultNodeOption(this);
		}
	}

	[RuleVersion(0)]
	public DefaultNodeOptionContext defaultNodeOption() {
		DefaultNodeOptionContext _localctx = new DefaultNodeOptionContext(Context, State);
		EnterRule(_localctx, 62, RULE_defaultNodeOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			elementOptionId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionIdContext elementOptionId() {
			return GetRuleContext<ElementOptionIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_STRING_LITERAL() { return GetToken(ANTLRv3Parser.DOUBLE_QUOTE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_ANGLE_STRING_LITERAL() { return GetToken(ANTLRv3Parser.DOUBLE_ANGLE_STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 64, RULE_elementOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			id_();
			State = 475;
			Match(EQUAL);
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				{
				State = 476;
				elementOptionId();
				}
				break;
			case STRING_LITERAL:
				{
				State = 477;
				Match(STRING_LITERAL);
				}
				break;
			case DOUBLE_QUOTE_STRING_LITERAL:
				{
				State = 478;
				Match(DOUBLE_QUOTE_STRING_LITERAL);
				}
				break;
			case DOUBLE_ANGLE_STRING_LITERAL:
				{
				State = 479;
				Match(DOUBLE_ANGLE_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ANTLRv3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ANTLRv3Parser.DOT, i);
		}
		public ElementOptionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptionId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterElementOptionId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitElementOptionId(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionIdContext elementOptionId() {
		ElementOptionIdContext _localctx = new ElementOptionIdContext(Context, State);
		EnterRule(_localctx, 66, RULE_elementOptionId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			id_();
			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 483;
				Match(DOT);
				State = 484;
				id_();
				}
				}
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotTerminalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		public NotTerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notTerminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterNotTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitNotTerminal(this);
		}
	}

	[RuleVersion(0)]
	public NotTerminalContext notTerminal() {
		NotTerminalContext _localctx = new NotTerminalContext(Context, State);
		EnterRule(_localctx, 68, RULE_notTerminal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 2199023255555L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv3Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ANTLRv3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ANTLRv3Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 70, RULE_ebnfSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 131L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RewriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REWRITE() { return GetTokens(ANTLRv3Parser.REWRITE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REWRITE(int i) {
			return GetToken(ANTLRv3Parser.REWRITE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_alternativeContext[] rewrite_alternative() {
			return GetRuleContexts<Rewrite_alternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_alternativeContext rewrite_alternative(int i) {
			return GetRuleContext<Rewrite_alternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext[] actionBlock() {
			return GetRuleContexts<ActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock(int i) {
			return GetRuleContext<ActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QM() { return GetTokens(ANTLRv3Parser.QM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM(int i) {
			return GetToken(ANTLRv3Parser.QM, i);
		}
		public RewriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite(this);
		}
	}

	[RuleVersion(0)]
	public RewriteContext rewrite() {
		RewriteContext _localctx = new RewriteContext(Context, State);
		EnterRule(_localctx, 72, RULE_rewrite);
		try {
			int _alt;
			State = 507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REWRITE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 494;
						Match(REWRITE);
						State = 495;
						actionBlock();
						State = 496;
						Match(QM);
						State = 497;
						rewrite_alternative();
						}
						} 
					}
					State = 503;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				}
				State = 504;
				Match(REWRITE);
				State = 505;
				rewrite_alternative();
				}
				break;
			case OR:
			case RPAREN:
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_alternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_templateContext rewrite_template() {
			return GetRuleContext<Rewrite_templateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_alternativeContext rewrite_tree_alternative() {
			return GetRuleContext<Rewrite_tree_alternativeContext>(0);
		}
		public Rewrite_alternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_alternative(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_alternativeContext rewrite_alternative() {
		Rewrite_alternativeContext _localctx = new Rewrite_alternativeContext(Context, State);
		EnterRule(_localctx, 74, RULE_rewrite_alternative);
		try {
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509;
				rewrite_template();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				rewrite_tree_alternative();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv3Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_alternativeContext rewrite_tree_alternative() {
			return GetRuleContext<Rewrite_tree_alternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		public Rewrite_tree_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_block(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_blockContext rewrite_tree_block() {
		Rewrite_tree_blockContext _localctx = new Rewrite_tree_blockContext(Context, State);
		EnterRule(_localctx, 76, RULE_rewrite_tree_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(LPAREN);
			State = 515;
			rewrite_tree_alternative();
			State = 516;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_alternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_elementContext[] rewrite_tree_element() {
			return GetRuleContexts<Rewrite_tree_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_elementContext rewrite_tree_element(int i) {
			return GetRuleContext<Rewrite_tree_elementContext>(i);
		}
		public Rewrite_tree_alternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_alternative(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_alternativeContext rewrite_tree_alternative() {
		Rewrite_tree_alternativeContext _localctx = new Rewrite_tree_alternativeContext(Context, State);
		EnterRule(_localctx, 78, RULE_rewrite_tree_alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 518;
				rewrite_tree_element();
				}
				}
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 1724051412230913L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_atomContext rewrite_tree_atom() {
			return GetRuleContext<Rewrite_tree_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_treeContext rewrite_tree() {
			return GetRuleContext<Rewrite_treeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_ebnfContext rewrite_tree_ebnf() {
			return GetRuleContext<Rewrite_tree_ebnfContext>(0);
		}
		public Rewrite_tree_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_element(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_elementContext rewrite_tree_element() {
		Rewrite_tree_elementContext _localctx = new Rewrite_tree_elementContext(Context, State);
		EnterRule(_localctx, 80, RULE_rewrite_tree_element);
		try {
			State = 533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				rewrite_tree_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				rewrite_tree_atom();
				State = 525;
				ebnfSuffix();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 527;
				rewrite_tree();
				State = 530;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PLUS:
				case QM:
				case STAR:
					{
					State = 528;
					ebnfSuffix();
					}
					break;
				case TREE_BEGIN:
				case REWRITE:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case LPAREN:
				case OR:
				case RPAREN:
				case SEMI:
				case DOLLAR:
				case TOKEN_REF:
				case RULE_REF:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 532;
				rewrite_tree_ebnf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv3Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv3Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv3Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(ANTLRv3Parser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public Rewrite_tree_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_atom(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_atomContext rewrite_tree_atom() {
		Rewrite_tree_atomContext _localctx = new Rewrite_tree_atomContext(Context, State);
		EnterRule(_localctx, 82, RULE_rewrite_tree_atom);
		int _la;
		try {
			State = 554;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535;
				Match(CHAR_LITERAL);
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 536;
					elementOptions();
					}
				}

				}
				break;
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 539;
				Match(TOKEN_REF);
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 540;
					elementOptions();
					}
				}

				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BEGIN_ARGUMENT) {
					{
					State = 543;
					argActionBlock();
					}
				}

				}
				break;
			case RULE_REF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 546;
				Match(RULE_REF);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 547;
				Match(STRING_LITERAL);
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 548;
					elementOptions();
					}
				}

				}
				break;
			case DOLLAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 551;
				Match(DOLLAR);
				State = 552;
				id_();
				}
				break;
			case BEGIN_ACTION:
				EnterOuterAlt(_localctx, 6);
				{
				State = 553;
				actionBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_tree_ebnfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_blockContext rewrite_tree_block() {
			return GetRuleContext<Rewrite_tree_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public Rewrite_tree_ebnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree_ebnf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree_ebnf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree_ebnf(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_tree_ebnfContext rewrite_tree_ebnf() {
		Rewrite_tree_ebnfContext _localctx = new Rewrite_tree_ebnfContext(Context, State);
		EnterRule(_localctx, 84, RULE_rewrite_tree_ebnf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			rewrite_tree_block();
			State = 557;
			ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_treeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE_BEGIN() { return GetToken(ANTLRv3Parser.TREE_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_atomContext rewrite_tree_atom() {
			return GetRuleContext<Rewrite_tree_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_elementContext[] rewrite_tree_element() {
			return GetRuleContexts<Rewrite_tree_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_tree_elementContext rewrite_tree_element(int i) {
			return GetRuleContext<Rewrite_tree_elementContext>(i);
		}
		public Rewrite_treeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_tree; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_tree(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_tree(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_treeContext rewrite_tree() {
		Rewrite_treeContext _localctx = new Rewrite_treeContext(Context, State);
		EnterRule(_localctx, 86, RULE_rewrite_tree);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(TREE_BEGIN);
			State = 560;
			rewrite_tree_atom();
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 1724051412230913L) != 0)) {
				{
				{
				State = 561;
				rewrite_tree_element();
				}
				}
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 567;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_templateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv3Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argsContext rewrite_template_args() {
			return GetRuleContext<Rewrite_template_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_STRING_LITERAL() { return GetToken(ANTLRv3Parser.DOUBLE_QUOTE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_ANGLE_STRING_LITERAL() { return GetToken(ANTLRv3Parser.DOUBLE_ANGLE_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_refContext rewrite_template_ref() {
			return GetRuleContext<Rewrite_template_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_indirect_template_headContext rewrite_indirect_template_head() {
			return GetRuleContext<Rewrite_indirect_template_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public Rewrite_templateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_template(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_template(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_templateContext rewrite_template() {
		Rewrite_templateContext _localctx = new Rewrite_templateContext(Context, State);
		EnterRule(_localctx, 88, RULE_rewrite_template);
		int _la;
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 569;
				id_();
				State = 570;
				Match(LPAREN);
				State = 571;
				rewrite_template_args();
				State = 572;
				Match(RPAREN);
				State = 573;
				_la = TokenStream.LA(1);
				if ( !(_la==DOUBLE_QUOTE_STRING_LITERAL || _la==DOUBLE_ANGLE_STRING_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575;
				rewrite_template_ref();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 576;
				rewrite_indirect_template_head();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 577;
				actionBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_template_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv3Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argsContext rewrite_template_args() {
			return GetRuleContext<Rewrite_template_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv3Parser.RPAREN, 0); }
		public Rewrite_template_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_template_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_template_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_template_ref(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_template_refContext rewrite_template_ref() {
		Rewrite_template_refContext _localctx = new Rewrite_template_refContext(Context, State);
		EnterRule(_localctx, 90, RULE_rewrite_template_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			id_();
			State = 581;
			Match(LPAREN);
			State = 582;
			rewrite_template_args();
			State = 583;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_indirect_template_headContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(ANTLRv3Parser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(ANTLRv3Parser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(ANTLRv3Parser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(ANTLRv3Parser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argsContext rewrite_template_args() {
			return GetRuleContext<Rewrite_template_argsContext>(0);
		}
		public Rewrite_indirect_template_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_indirect_template_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_indirect_template_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_indirect_template_head(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_indirect_template_headContext rewrite_indirect_template_head() {
		Rewrite_indirect_template_headContext _localctx = new Rewrite_indirect_template_headContext(Context, State);
		EnterRule(_localctx, 92, RULE_rewrite_indirect_template_head);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(LPAREN);
			State = 586;
			actionBlock();
			State = 587;
			Match(RPAREN);
			State = 588;
			Match(LPAREN);
			State = 589;
			rewrite_template_args();
			State = 590;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_template_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argContext[] rewrite_template_arg() {
			return GetRuleContexts<Rewrite_template_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewrite_template_argContext rewrite_template_arg(int i) {
			return GetRuleContext<Rewrite_template_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv3Parser.COMMA, i);
		}
		public Rewrite_template_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_template_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_template_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_template_args(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_template_argsContext rewrite_template_args() {
		Rewrite_template_argsContext _localctx = new Rewrite_template_argsContext(Context, State);
		EnterRule(_localctx, 94, RULE_rewrite_template_args);
		int _la;
		try {
			State = 601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				rewrite_template_arg();
				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 593;
					Match(COMMA);
					State = 594;
					rewrite_template_arg();
					}
					}
					State = 599;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewrite_template_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv3Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public Rewrite_template_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewrite_template_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterRewrite_template_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitRewrite_template_arg(this);
		}
	}

	[RuleVersion(0)]
	public Rewrite_template_argContext rewrite_template_arg() {
		Rewrite_template_argContext _localctx = new Rewrite_template_argContext(Context, State);
		EnterRule(_localctx, 96, RULE_rewrite_template_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			id_();
			State = 604;
			Match(EQUAL);
			State = 605;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv3Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv3Parser.RULE_REF, 0); }
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv3ParserListener typedListener = listener as IANTLRv3ParserListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(Context, State);
		EnterRule(_localctx, 98, RULE_id_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = TokenStream.LA(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,92,610,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		1,0,3,0,102,8,0,1,0,1,0,1,0,1,0,3,0,108,8,0,1,0,1,0,1,0,1,0,3,0,114,8,
		0,1,0,3,0,117,8,0,1,0,5,0,120,8,0,10,0,12,0,123,9,0,1,0,5,0,126,8,0,10,
		0,12,0,129,9,0,1,0,1,0,1,0,1,1,1,1,1,1,4,1,137,8,1,11,1,12,1,138,1,1,1,
		1,1,2,1,2,1,2,1,2,3,2,147,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
		3,4,159,8,4,1,4,1,4,1,4,1,5,1,5,1,5,3,5,167,8,5,1,6,1,6,1,6,5,6,172,8,
		6,10,6,12,6,175,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,
		8,189,8,8,1,9,4,9,192,8,9,11,9,12,9,193,1,10,3,10,197,8,10,1,10,3,10,200,
		8,10,1,10,1,10,3,10,204,8,10,1,10,3,10,207,8,10,1,10,1,10,3,10,211,8,10,
		1,10,3,10,214,8,10,1,10,3,10,217,8,10,1,10,3,10,220,8,10,1,10,5,10,223,
		8,10,10,10,12,10,226,9,10,1,10,1,10,1,10,1,10,3,10,232,8,10,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,5,12,242,8,12,10,12,12,12,245,9,12,1,13,
		1,13,1,13,1,13,1,13,1,13,5,13,253,8,13,10,13,12,13,256,9,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,5,13,266,8,13,10,13,12,13,269,9,13,1,13,
		1,13,3,13,273,8,13,1,14,1,14,3,14,277,8,14,1,14,3,14,280,8,14,1,14,1,14,
		1,14,1,14,1,14,1,14,5,14,288,8,14,10,14,12,14,291,9,14,1,14,1,14,1,15,
		1,15,1,15,1,15,1,15,1,15,5,15,301,8,15,10,15,12,15,304,9,15,1,16,4,16,
		307,8,16,11,16,12,16,308,1,16,3,16,312,8,16,1,17,4,17,315,8,17,11,17,12,
		17,316,1,17,3,17,320,8,17,1,17,3,17,323,8,17,1,18,1,18,1,18,1,18,1,19,
		1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,339,8,21,1,21,1,21,1,
		21,1,21,1,21,3,21,346,8,21,1,21,1,21,1,21,3,21,351,8,21,1,21,1,21,1,21,
		1,21,1,21,1,21,3,21,359,8,21,1,21,1,21,1,21,3,21,364,8,21,3,21,366,8,21,
		1,22,1,22,5,22,370,8,22,10,22,12,22,373,9,22,1,22,1,22,1,23,1,23,5,23,
		379,8,23,10,23,12,23,382,9,23,1,23,1,23,1,24,1,24,1,24,1,24,3,24,390,8,
		24,1,24,1,24,1,24,1,24,1,24,3,24,397,8,24,1,24,1,24,3,24,401,8,24,1,24,
		3,24,404,8,24,3,24,406,8,24,1,25,1,25,1,25,3,25,411,8,25,1,26,1,26,1,26,
		4,26,416,8,26,11,26,12,26,417,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
		3,27,428,8,27,1,28,1,28,1,28,1,28,1,29,1,29,3,29,436,8,29,1,29,1,29,3,
		29,440,8,29,1,29,1,29,3,29,444,8,29,1,29,1,29,3,29,448,8,29,1,29,3,29,
		451,8,29,1,29,3,29,454,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,
		30,464,8,30,10,30,12,30,467,9,30,1,30,1,30,3,30,471,8,30,1,31,1,31,1,32,
		1,32,1,32,1,32,1,32,1,32,3,32,481,8,32,1,33,1,33,1,33,5,33,486,8,33,10,
		33,12,33,489,9,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,5,36,500,
		8,36,10,36,12,36,503,9,36,1,36,1,36,1,36,3,36,508,8,36,1,37,1,37,1,37,
		3,37,513,8,37,1,38,1,38,1,38,1,38,1,39,4,39,520,8,39,11,39,12,39,521,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,531,8,40,1,40,3,40,534,8,40,1,41,
		1,41,3,41,538,8,41,1,41,1,41,3,41,542,8,41,1,41,3,41,545,8,41,1,41,1,41,
		1,41,3,41,550,8,41,1,41,1,41,1,41,3,41,555,8,41,1,42,1,42,1,42,1,43,1,
		43,1,43,5,43,563,8,43,10,43,12,43,566,9,43,1,43,1,43,1,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,3,44,579,8,44,1,45,1,45,1,45,1,45,1,45,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,5,47,596,8,47,10,47,12,47,
		599,9,47,1,47,3,47,602,8,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,0,0,50,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,0,8,1,0,42,43,2,0,33,33,53,55,2,0,65,65,80,80,1,0,35,36,2,0,42,43,83,
		83,2,0,71,72,78,78,1,0,44,45,1,0,83,84,668,0,101,1,0,0,0,2,133,1,0,0,0,
		4,142,1,0,0,0,6,150,1,0,0,0,8,154,1,0,0,0,10,166,1,0,0,0,12,168,1,0,0,
		0,14,178,1,0,0,0,16,188,1,0,0,0,18,191,1,0,0,0,20,196,1,0,0,0,22,233,1,
		0,0,0,24,237,1,0,0,0,26,272,1,0,0,0,28,274,1,0,0,0,30,294,1,0,0,0,32,311,
		1,0,0,0,34,322,1,0,0,0,36,324,1,0,0,0,38,328,1,0,0,0,40,331,1,0,0,0,42,
		365,1,0,0,0,44,367,1,0,0,0,46,376,1,0,0,0,48,405,1,0,0,0,50,407,1,0,0,
		0,52,412,1,0,0,0,54,421,1,0,0,0,56,429,1,0,0,0,58,450,1,0,0,0,60,470,1,
		0,0,0,62,472,1,0,0,0,64,474,1,0,0,0,66,482,1,0,0,0,68,490,1,0,0,0,70,492,
		1,0,0,0,72,507,1,0,0,0,74,512,1,0,0,0,76,514,1,0,0,0,78,519,1,0,0,0,80,
		533,1,0,0,0,82,554,1,0,0,0,84,556,1,0,0,0,86,559,1,0,0,0,88,578,1,0,0,
		0,90,580,1,0,0,0,92,585,1,0,0,0,94,601,1,0,0,0,96,603,1,0,0,0,98,607,1,
		0,0,0,100,102,5,1,0,0,101,100,1,0,0,0,101,102,1,0,0,0,102,107,1,0,0,0,
		103,108,5,3,0,0,104,108,5,2,0,0,105,108,5,58,0,0,106,108,1,0,0,0,107,103,
		1,0,0,0,107,104,1,0,0,0,107,105,1,0,0,0,107,106,1,0,0,0,108,109,1,0,0,
		0,109,110,5,52,0,0,110,111,3,98,49,0,111,113,5,76,0,0,112,114,3,12,6,0,
		113,112,1,0,0,0,113,114,1,0,0,0,114,116,1,0,0,0,115,117,3,2,1,0,116,115,
		1,0,0,0,116,117,1,0,0,0,117,121,1,0,0,0,118,120,3,6,3,0,119,118,1,0,0,
		0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,127,1,0,0,0,123,
		121,1,0,0,0,124,126,3,8,4,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,
		0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,131,3,18,9,0,
		131,132,5,0,0,1,132,1,1,0,0,0,133,134,5,49,0,0,134,136,5,66,0,0,135,137,
		3,4,2,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,
		0,139,140,1,0,0,0,140,141,5,73,0,0,141,3,1,0,0,0,142,146,5,83,0,0,143,
		144,5,65,0,0,144,147,7,0,0,0,145,147,1,0,0,0,146,143,1,0,0,0,146,145,1,
		0,0,0,147,148,1,0,0,0,148,149,5,76,0,0,149,5,1,0,0,0,150,151,5,28,0,0,
		151,152,3,98,49,0,152,153,3,44,22,0,153,7,1,0,0,0,154,158,5,59,0,0,155,
		156,3,10,5,0,156,157,5,62,0,0,157,159,1,0,0,0,158,155,1,0,0,0,158,159,
		1,0,0,0,159,160,1,0,0,0,160,161,3,98,49,0,161,162,3,44,22,0,162,9,1,0,
		0,0,163,167,3,98,49,0,164,167,5,3,0,0,165,167,5,2,0,0,166,163,1,0,0,0,
		166,164,1,0,0,0,166,165,1,0,0,0,167,11,1,0,0,0,168,169,5,48,0,0,169,173,
		5,66,0,0,170,172,3,14,7,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,
		0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,173,1,0,0,0,176,177,5,73,0,0,177,
		13,1,0,0,0,178,179,3,98,49,0,179,180,5,65,0,0,180,181,3,16,8,0,181,182,
		5,76,0,0,182,15,1,0,0,0,183,189,3,98,49,0,184,189,5,43,0,0,185,189,5,42,
		0,0,186,189,5,41,0,0,187,189,5,78,0,0,188,183,1,0,0,0,188,184,1,0,0,0,
		188,185,1,0,0,0,188,186,1,0,0,0,188,187,1,0,0,0,189,17,1,0,0,0,190,192,
		3,20,10,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,
		0,0,194,19,1,0,0,0,195,197,5,1,0,0,196,195,1,0,0,0,196,197,1,0,0,0,197,
		199,1,0,0,0,198,200,7,1,0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,
		0,0,0,201,203,3,98,49,0,202,204,5,36,0,0,203,202,1,0,0,0,203,204,1,0,0,
		0,204,206,1,0,0,0,205,207,3,46,23,0,206,205,1,0,0,0,206,207,1,0,0,0,207,
		210,1,0,0,0,208,209,5,56,0,0,209,211,3,46,23,0,210,208,1,0,0,0,210,211,
		1,0,0,0,211,213,1,0,0,0,212,214,3,24,12,0,213,212,1,0,0,0,213,214,1,0,
		0,0,214,216,1,0,0,0,215,217,3,12,6,0,216,215,1,0,0,0,216,217,1,0,0,0,217,
		219,1,0,0,0,218,220,3,26,13,0,219,218,1,0,0,0,219,220,1,0,0,0,220,224,
		1,0,0,0,221,223,3,22,11,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,
		0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,5,61,0,0,228,
		229,3,30,15,0,229,231,5,76,0,0,230,232,3,34,17,0,231,230,1,0,0,0,231,232,
		1,0,0,0,232,21,1,0,0,0,233,234,5,59,0,0,234,235,3,98,49,0,235,236,3,44,
		22,0,236,23,1,0,0,0,237,238,5,57,0,0,238,243,3,98,49,0,239,240,5,63,0,
		0,240,242,3,98,49,0,241,239,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,
		244,1,0,0,0,244,25,1,0,0,0,245,243,1,0,0,0,246,247,5,28,0,0,247,273,3,
		44,22,0,248,249,5,28,0,0,249,254,3,98,49,0,250,251,5,63,0,0,251,253,3,
		98,49,0,252,250,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,
		0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,5,76,0,0,258,273,1,0,0,0,259,
		260,5,28,0,0,260,261,3,44,22,0,261,262,5,28,0,0,262,267,3,98,49,0,263,
		264,5,63,0,0,264,266,3,98,49,0,265,263,1,0,0,0,266,269,1,0,0,0,267,265,
		1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,5,76,0,
		0,271,273,1,0,0,0,272,246,1,0,0,0,272,248,1,0,0,0,272,259,1,0,0,0,273,
		27,1,0,0,0,274,279,5,68,0,0,275,277,3,12,6,0,276,275,1,0,0,0,276,277,1,
		0,0,0,277,278,1,0,0,0,278,280,5,61,0,0,279,276,1,0,0,0,279,280,1,0,0,0,
		280,281,1,0,0,0,281,282,3,32,16,0,282,289,3,72,36,0,283,284,5,70,0,0,284,
		285,3,32,16,0,285,286,3,72,36,0,286,288,1,0,0,0,287,283,1,0,0,0,288,291,
		1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,289,1,0,0,
		0,292,293,5,75,0,0,293,29,1,0,0,0,294,295,3,32,16,0,295,302,3,72,36,0,
		296,297,5,70,0,0,297,298,3,32,16,0,298,299,3,72,36,0,299,301,1,0,0,0,300,
		296,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,31,1,0,
		0,0,304,302,1,0,0,0,305,307,3,40,20,0,306,305,1,0,0,0,307,308,1,0,0,0,
		308,306,1,0,0,0,308,309,1,0,0,0,309,312,1,0,0,0,310,312,1,0,0,0,311,306,
		1,0,0,0,311,310,1,0,0,0,312,33,1,0,0,0,313,315,3,36,18,0,314,313,1,0,0,
		0,315,316,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,
		320,3,38,19,0,319,318,1,0,0,0,319,320,1,0,0,0,320,323,1,0,0,0,321,323,
		3,38,19,0,322,314,1,0,0,0,322,321,1,0,0,0,323,35,1,0,0,0,324,325,5,50,
		0,0,325,326,3,46,23,0,326,327,3,44,22,0,327,37,1,0,0,0,328,329,5,51,0,
		0,329,330,3,44,22,0,330,39,1,0,0,0,331,332,3,42,21,0,332,41,1,0,0,0,333,
		334,3,98,49,0,334,335,7,2,0,0,335,338,3,48,24,0,336,339,3,70,35,0,337,
		339,1,0,0,0,338,336,1,0,0,0,338,337,1,0,0,0,339,366,1,0,0,0,340,341,3,
		98,49,0,341,342,7,2,0,0,342,345,3,28,14,0,343,346,3,70,35,0,344,346,1,
		0,0,0,345,343,1,0,0,0,345,344,1,0,0,0,346,366,1,0,0,0,347,350,3,48,24,
		0,348,351,3,70,35,0,349,351,1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,0,351,
		366,1,0,0,0,352,366,3,54,27,0,353,366,3,44,22,0,354,355,3,44,22,0,355,
		358,5,72,0,0,356,359,5,77,0,0,357,359,1,0,0,0,358,356,1,0,0,0,358,357,
		1,0,0,0,359,366,1,0,0,0,360,363,3,52,26,0,361,364,3,70,35,0,362,364,1,
		0,0,0,363,361,1,0,0,0,363,362,1,0,0,0,364,366,1,0,0,0,365,333,1,0,0,0,
		365,340,1,0,0,0,365,347,1,0,0,0,365,352,1,0,0,0,365,353,1,0,0,0,365,354,
		1,0,0,0,365,360,1,0,0,0,366,43,1,0,0,0,367,371,5,47,0,0,368,370,5,38,0,
		0,369,368,1,0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,
		374,1,0,0,0,373,371,1,0,0,0,374,375,5,88,0,0,375,45,1,0,0,0,376,380,5,
		46,0,0,377,379,5,87,0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,
		0,380,381,1,0,0,0,381,383,1,0,0,0,382,380,1,0,0,0,383,384,5,85,0,0,384,
		47,1,0,0,0,385,389,3,56,28,0,386,390,5,35,0,0,387,390,5,36,0,0,388,390,
		1,0,0,0,389,386,1,0,0,0,389,387,1,0,0,0,389,388,1,0,0,0,390,406,1,0,0,
		0,391,406,3,58,29,0,392,396,3,50,25,0,393,397,5,35,0,0,394,397,5,36,0,
		0,395,397,1,0,0,0,396,393,1,0,0,0,396,394,1,0,0,0,396,395,1,0,0,0,397,
		406,1,0,0,0,398,400,5,84,0,0,399,401,3,46,23,0,400,399,1,0,0,0,400,401,
		1,0,0,0,401,403,1,0,0,0,402,404,7,3,0,0,403,402,1,0,0,0,403,404,1,0,0,
		0,404,406,1,0,0,0,405,385,1,0,0,0,405,391,1,0,0,0,405,392,1,0,0,0,405,
		398,1,0,0,0,406,49,1,0,0,0,407,410,5,81,0,0,408,411,3,68,34,0,409,411,
		3,28,14,0,410,408,1,0,0,0,410,409,1,0,0,0,411,51,1,0,0,0,412,413,5,34,
		0,0,413,415,3,40,20,0,414,416,3,40,20,0,415,414,1,0,0,0,416,417,1,0,0,
		0,417,415,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,420,5,75,0,0,420,
		53,1,0,0,0,421,427,3,28,14,0,422,428,5,72,0,0,423,428,5,78,0,0,424,428,
		5,71,0,0,425,428,5,77,0,0,426,428,1,0,0,0,427,422,1,0,0,0,427,423,1,0,
		0,0,427,424,1,0,0,0,427,425,1,0,0,0,427,426,1,0,0,0,428,55,1,0,0,0,429,
		430,5,42,0,0,430,431,5,10,0,0,431,432,5,42,0,0,432,57,1,0,0,0,433,435,
		5,42,0,0,434,436,3,60,30,0,435,434,1,0,0,0,435,436,1,0,0,0,436,451,1,0,
		0,0,437,439,5,83,0,0,438,440,3,60,30,0,439,438,1,0,0,0,439,440,1,0,0,0,
		440,443,1,0,0,0,441,444,3,46,23,0,442,444,1,0,0,0,443,441,1,0,0,0,443,
		442,1,0,0,0,444,451,1,0,0,0,445,447,5,43,0,0,446,448,3,60,30,0,447,446,
		1,0,0,0,447,448,1,0,0,0,448,451,1,0,0,0,449,451,5,64,0,0,450,433,1,0,0,
		0,450,437,1,0,0,0,450,445,1,0,0,0,450,449,1,0,0,0,451,453,1,0,0,0,452,
		454,7,3,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,59,1,0,0,0,455,456,5,69,
		0,0,456,457,3,62,31,0,457,458,5,60,0,0,458,471,1,0,0,0,459,460,5,69,0,
		0,460,465,3,64,32,0,461,462,5,76,0,0,462,464,3,64,32,0,463,461,1,0,0,0,
		464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,465,
		1,0,0,0,468,469,5,60,0,0,469,471,1,0,0,0,470,455,1,0,0,0,470,459,1,0,0,
		0,471,61,1,0,0,0,472,473,3,66,33,0,473,63,1,0,0,0,474,475,3,98,49,0,475,
		480,5,65,0,0,476,481,3,66,33,0,477,481,5,43,0,0,478,481,5,44,0,0,479,481,
		5,45,0,0,480,476,1,0,0,0,480,477,1,0,0,0,480,478,1,0,0,0,480,479,1,0,0,
		0,481,65,1,0,0,0,482,487,3,98,49,0,483,484,5,64,0,0,484,486,3,98,49,0,
		485,483,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,67,
		1,0,0,0,489,487,1,0,0,0,490,491,7,4,0,0,491,69,1,0,0,0,492,493,7,5,0,0,
		493,71,1,0,0,0,494,495,5,37,0,0,495,496,3,44,22,0,496,497,5,72,0,0,497,
		498,3,74,37,0,498,500,1,0,0,0,499,494,1,0,0,0,500,503,1,0,0,0,501,499,
		1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,5,37,0,
		0,505,508,3,74,37,0,506,508,1,0,0,0,507,501,1,0,0,0,507,506,1,0,0,0,508,
		73,1,0,0,0,509,513,3,88,44,0,510,513,3,78,39,0,511,513,1,0,0,0,512,509,
		1,0,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,75,1,0,0,0,514,515,5,68,0,
		0,515,516,3,78,39,0,516,517,5,75,0,0,517,77,1,0,0,0,518,520,3,80,40,0,
		519,518,1,0,0,0,520,521,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,79,
		1,0,0,0,523,534,3,82,41,0,524,525,3,82,41,0,525,526,3,70,35,0,526,534,
		1,0,0,0,527,530,3,86,43,0,528,531,3,70,35,0,529,531,1,0,0,0,530,528,1,
		0,0,0,530,529,1,0,0,0,531,534,1,0,0,0,532,534,3,84,42,0,533,523,1,0,0,
		0,533,524,1,0,0,0,533,527,1,0,0,0,533,532,1,0,0,0,534,81,1,0,0,0,535,537,
		5,42,0,0,536,538,3,60,30,0,537,536,1,0,0,0,537,538,1,0,0,0,538,555,1,0,
		0,0,539,541,5,83,0,0,540,542,3,60,30,0,541,540,1,0,0,0,541,542,1,0,0,0,
		542,544,1,0,0,0,543,545,3,46,23,0,544,543,1,0,0,0,544,545,1,0,0,0,545,
		555,1,0,0,0,546,555,5,84,0,0,547,549,5,43,0,0,548,550,3,60,30,0,549,548,
		1,0,0,0,549,550,1,0,0,0,550,555,1,0,0,0,551,552,5,79,0,0,552,555,3,98,
		49,0,553,555,3,44,22,0,554,535,1,0,0,0,554,539,1,0,0,0,554,546,1,0,0,0,
		554,547,1,0,0,0,554,551,1,0,0,0,554,553,1,0,0,0,555,83,1,0,0,0,556,557,
		3,76,38,0,557,558,3,70,35,0,558,85,1,0,0,0,559,560,5,34,0,0,560,564,3,
		82,41,0,561,563,3,80,40,0,562,561,1,0,0,0,563,566,1,0,0,0,564,562,1,0,
		0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,564,1,0,0,0,567,568,5,75,0,0,568,
		87,1,0,0,0,569,570,3,98,49,0,570,571,5,68,0,0,571,572,3,94,47,0,572,573,
		5,75,0,0,573,574,7,6,0,0,574,579,1,0,0,0,575,579,3,90,45,0,576,579,3,92,
		46,0,577,579,3,44,22,0,578,569,1,0,0,0,578,575,1,0,0,0,578,576,1,0,0,0,
		578,577,1,0,0,0,579,89,1,0,0,0,580,581,3,98,49,0,581,582,5,68,0,0,582,
		583,3,94,47,0,583,584,5,75,0,0,584,91,1,0,0,0,585,586,5,68,0,0,586,587,
		3,44,22,0,587,588,5,75,0,0,588,589,5,68,0,0,589,590,3,94,47,0,590,591,
		5,75,0,0,591,93,1,0,0,0,592,597,3,96,48,0,593,594,5,63,0,0,594,596,3,96,
		48,0,595,593,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,
		602,1,0,0,0,599,597,1,0,0,0,600,602,1,0,0,0,601,592,1,0,0,0,601,600,1,
		0,0,0,602,95,1,0,0,0,603,604,3,98,49,0,604,605,5,65,0,0,605,606,3,44,22,
		0,606,97,1,0,0,0,607,608,7,7,0,0,608,99,1,0,0,0,77,101,107,113,116,121,
		127,138,146,158,166,173,188,193,196,199,203,206,210,213,216,219,224,231,
		243,254,267,272,276,279,289,302,308,311,316,319,322,338,345,350,358,363,
		365,371,380,389,396,400,403,405,410,417,427,435,439,443,447,450,453,465,
		470,480,487,501,507,512,521,530,533,537,541,544,549,554,564,578,597,601
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
