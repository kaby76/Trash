//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ANTLRv2Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ANTLRv2Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOC_COMMENT=1, PARSER=2, LEXER=3, RULE=4, BLOCK=5, OPTIONAL=6, CLOSURE=7, 
		POSITIVE_CLOSURE=8, SYNPRED=9, RANGE=10, CHAR_RANGE=11, EPSILON=12, ALT=13, 
		EOR=14, EOB=15, EOA=16, ID=17, ARG=18, ARGLIST=19, RET=20, LEXER_GRAMMAR=21, 
		PARSER_GRAMMAR=22, TREE_GRAMMAR=23, COMBINED_GRAMMAR=24, INITACTION=25, 
		LABEL=26, TEMPLATE=27, SCOPE=28, SEMPRED=29, GATED_SEMPRED=30, SYN_SEMPRED=31, 
		BACKTRACK_SEMPRED=32, FRAGMENT=33, TREE_BEGIN=34, ROOT=35, BANG=36, REWRITE=37, 
		ACTION_CONTENT=38, SL_COMMENT=39, ML_COMMENT=40, INT=41, CHAR_LITERAL=42, 
		STRING_LITERAL=43, BEGIN_ARGUMENT=44, BEGIN_ACTION=45, OPTIONS=46, TOKENS=47, 
		HEADER=48, CLASS=49, EXTENDS=50, LEXCLASS=51, TREEPARSER=52, EXCEPTION=53, 
		CATCH=54, FINALLY=55, GRAMMAR=56, PRIVATE=57, PROTECTED=58, PUBLIC=59, 
		RETURNS=60, THROWS=61, TREE=62, OPEN_ELEMENT_OPTION=63, CLOSE_ELEMENT_OPTION=64, 
		AT=65, COLON=66, COLONCOLON=67, COMMA=68, DOT=69, EQUAL=70, LBRACE=71, 
		LBRACK=72, LPAREN=73, OR=74, PLUS=75, QM=76, RBRACE=77, RBRACK=78, RPAREN=79, 
		SEMI=80, SEMPREDOP=81, STAR=82, DOLLAR=83, PEQ=84, NOT=85, WS=86, TOKEN_REF=87, 
		RULE_REF=88, END_ARGUMENT=89, UNTERMINATED_ARGUMENT=90, ARGUMENT_CONTENT=91, 
		END_ACTION=92, UNTERMINATED_ACTION=93, OPT_LBRACE=94, LEXER_CHAR_SET=95, 
		UNTERMINATED_CHAR_SET=96;
	public const int
		RULE_grammar_ = 0, RULE_header_ = 1, RULE_classDef = 2, RULE_fileOptionsSpec = 3, 
		RULE_parserOptionsSpec = 4, RULE_treeParserOptionsSpec = 5, RULE_lexerOptionsSpec = 6, 
		RULE_subruleOptionsSpec = 7, RULE_option = 8, RULE_optionValue = 9, RULE_lexerOption = 10, 
		RULE_lexerOptionValue = 11, RULE_charSet = 12, RULE_setBlockElement = 13, 
		RULE_tokensSpec = 14, RULE_tokenEntry = 15, RULE_tokensSpecOptions = 16, 
		RULE_superClass = 17, RULE_parserSpec = 18, RULE_lexerSpec = 19, RULE_treeParserSpec = 20, 
		RULE_rules = 21, RULE_rule_ = 22, RULE_ruleOptionsSpec = 23, RULE_throwsSpec = 24, 
		RULE_block = 25, RULE_alternative = 26, RULE_exceptionGroup = 27, RULE_exceptionSpec = 28, 
		RULE_exceptionSpecNoLabel = 29, RULE_exceptionHandler = 30, RULE_element = 31, 
		RULE_elementOptionSpec = 32, RULE_elementNoOptionSpec = 33, RULE_rule_ref_or_keyword_as = 34, 
		RULE_tree_ = 35, RULE_rootNode = 36, RULE_ebnf = 37, RULE_ast_type_spec = 38, 
		RULE_range_ = 39, RULE_terminal_ = 40, RULE_notTerminal = 41, RULE_qualifiedID = 42, 
		RULE_id_ = 43, RULE_action = 44, RULE_actionScopeName = 45, RULE_ruleAction = 46, 
		RULE_altList = 47, RULE_actionBlock = 48, RULE_argActionBlock = 49;
	public static readonly string[] ruleNames = {
		"grammar_", "header_", "classDef", "fileOptionsSpec", "parserOptionsSpec", 
		"treeParserOptionsSpec", "lexerOptionsSpec", "subruleOptionsSpec", "option", 
		"optionValue", "lexerOption", "lexerOptionValue", "charSet", "setBlockElement", 
		"tokensSpec", "tokenEntry", "tokensSpecOptions", "superClass", "parserSpec", 
		"lexerSpec", "treeParserSpec", "rules", "rule_", "ruleOptionsSpec", "throwsSpec", 
		"block", "alternative", "exceptionGroup", "exceptionSpec", "exceptionSpecNoLabel", 
		"exceptionHandler", "element", "elementOptionSpec", "elementNoOptionSpec", 
		"rule_ref_or_keyword_as", "tree_", "rootNode", "ebnf", "ast_type_spec", 
		"range_", "terminal_", "notTerminal", "qualifiedID", "id_", "action", 
		"actionScopeName", "ruleAction", "altList", "actionBlock", "argActionBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'Parser'", "'Lexer'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'scope'", null, null, null, null, 
		"'fragment'", "'^('", "'^'", "'!'", null, null, null, null, null, null, 
		null, null, null, "'options'", "'tokens'", "'header'", "'class'", "'extends'", 
		"'lexclass'", "'treeparser'", "'exception'", "'catch'", "'finally'", "'grammar'", 
		"'private'", "'protected'", "'public'", "'returns'", "'throws'", "'tree'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOC_COMMENT", "PARSER", "LEXER", "RULE", "BLOCK", "OPTIONAL", "CLOSURE", 
		"POSITIVE_CLOSURE", "SYNPRED", "RANGE", "CHAR_RANGE", "EPSILON", "ALT", 
		"EOR", "EOB", "EOA", "ID", "ARG", "ARGLIST", "RET", "LEXER_GRAMMAR", "PARSER_GRAMMAR", 
		"TREE_GRAMMAR", "COMBINED_GRAMMAR", "INITACTION", "LABEL", "TEMPLATE", 
		"SCOPE", "SEMPRED", "GATED_SEMPRED", "SYN_SEMPRED", "BACKTRACK_SEMPRED", 
		"FRAGMENT", "TREE_BEGIN", "ROOT", "BANG", "REWRITE", "ACTION_CONTENT", 
		"SL_COMMENT", "ML_COMMENT", "INT", "CHAR_LITERAL", "STRING_LITERAL", "BEGIN_ARGUMENT", 
		"BEGIN_ACTION", "OPTIONS", "TOKENS", "HEADER", "CLASS", "EXTENDS", "LEXCLASS", 
		"TREEPARSER", "EXCEPTION", "CATCH", "FINALLY", "GRAMMAR", "PRIVATE", "PROTECTED", 
		"PUBLIC", "RETURNS", "THROWS", "TREE", "OPEN_ELEMENT_OPTION", "CLOSE_ELEMENT_OPTION", 
		"AT", "COLON", "COLONCOLON", "COMMA", "DOT", "EQUAL", "LBRACE", "LBRACK", 
		"LPAREN", "OR", "PLUS", "QM", "RBRACE", "RBRACK", "RPAREN", "SEMI", "SEMPREDOP", 
		"STAR", "DOLLAR", "PEQ", "NOT", "WS", "TOKEN_REF", "RULE_REF", "END_ARGUMENT", 
		"UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
		"OPT_LBRACE", "LEXER_CHAR_SET", "UNTERMINATED_CHAR_SET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRv2Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ANTLRv2Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ANTLRv2Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ANTLRv2Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Grammar_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ANTLRv2Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Header_Context[] header_() {
			return GetRuleContexts<Header_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Header_Context header_(int i) {
			return GetRuleContext<Header_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileOptionsSpecContext fileOptionsSpec() {
			return GetRuleContext<FileOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public Grammar_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitGrammar_(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_Context grammar_() {
		Grammar_Context _localctx = new Grammar_Context(Context, State);
		EnterRule(_localctx, 0, RULE_grammar_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HEADER) {
				{
				{
				State = 100;
				header_();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 106;
				fileOptionsSpec();
				}
			}

			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2849934139195394L) != 0)) {
				{
				{
				State = 109;
				classDef();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Header_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER() { return GetToken(ANTLRv2Parser.HEADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		public Header_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterHeader_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitHeader_(this);
		}
	}

	[RuleVersion(0)]
	public Header_Context header_() {
		Header_Context _localctx = new Header_Context(Context, State);
		EnterRule(_localctx, 2, RULE_header_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(HEADER);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_LITERAL) {
				{
				State = 118;
				Match(STRING_LITERAL);
				}
			}

			State = 121;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerSpecContext lexerSpec() {
			return GetRuleContext<LexerSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeParserSpecContext treeParserSpec() {
			return GetRuleContext<TreeParserSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParserSpecContext parserSpec() {
			return GetRuleContext<ParserSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv2Parser.DOC_COMMENT, 0); }
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ACTION) {
				{
				State = 123;
				actionBlock();
				}
			}

			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 126;
				Match(DOC_COMMENT);
				}
			}

			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 129;
				lexerSpec();
				}
				break;
			case 2:
				{
				State = 130;
				treeParserSpec();
				}
				break;
			case 3:
				{
				State = 131;
				parserSpec();
				}
				break;
			}
			State = 134;
			rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileOptionsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public FileOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterFileOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitFileOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public FileOptionsSpecContext fileOptionsSpec() {
		FileOptionsSpecContext _localctx = new FileOptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(OPTIONS);
			State = 137;
			Match(LBRACE);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 6442451009L) != 0)) {
				{
				{
				State = 138;
				option();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserOptionsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public ParserOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterParserOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitParserOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public ParserOptionsSpecContext parserOptionsSpec() {
		ParserOptionsSpecContext _localctx = new ParserOptionsSpecContext(Context, State);
		EnterRule(_localctx, 8, RULE_parserOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(OPTIONS);
			State = 147;
			Match(LBRACE);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 6442451009L) != 0)) {
				{
				{
				State = 148;
				option();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeParserOptionsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public TreeParserOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeParserOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTreeParserOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTreeParserOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public TreeParserOptionsSpecContext treeParserOptionsSpec() {
		TreeParserOptionsSpecContext _localctx = new TreeParserOptionsSpecContext(Context, State);
		EnterRule(_localctx, 10, RULE_treeParserOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(OPTIONS);
			State = 157;
			Match(LBRACE);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 6442451009L) != 0)) {
				{
				{
				State = 158;
				option();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 164;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerOptionsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerOptionContext[] lexerOption() {
			return GetRuleContexts<LexerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerOptionContext lexerOption(int i) {
			return GetRuleContext<LexerOptionContext>(i);
		}
		public LexerOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterLexerOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitLexerOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public LexerOptionsSpecContext lexerOptionsSpec() {
		LexerOptionsSpecContext _localctx = new LexerOptionsSpecContext(Context, State);
		EnterRule(_localctx, 12, RULE_lexerOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(OPTIONS);
			State = 167;
			Match(LBRACE);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 6442451009L) != 0)) {
				{
				{
				State = 168;
				lexerOption();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubruleOptionsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public SubruleOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subruleOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterSubruleOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitSubruleOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public SubruleOptionsSpecContext subruleOptionsSpec() {
		SubruleOptionsSpecContext _localctx = new SubruleOptionsSpecContext(Context, State);
		EnterRule(_localctx, 14, RULE_subruleOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(OPTIONS);
			State = 177;
			Match(LBRACE);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 6442451009L) != 0)) {
				{
				{
				State = 178;
				option();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv2Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 16, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			id_();
			State = 187;
			Match(EQUAL);
			State = 188;
			optionValue();
			State = 189;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIDContext qualifiedID() {
			return GetRuleContext<QualifiedIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv2Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ANTLRv2Parser.INT, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_optionValue);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRAMMAR:
			case TREE:
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				qualifiedID();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192;
				Match(STRING_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 193;
				Match(CHAR_LITERAL);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 194;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv2Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerOptionValueContext lexerOptionValue() {
			return GetRuleContext<LexerOptionValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		public LexerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterLexerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitLexerOption(this);
		}
	}

	[RuleVersion(0)]
	public LexerOptionContext lexerOption() {
		LexerOptionContext _localctx = new LexerOptionContext(Context, State);
		EnterRule(_localctx, 20, RULE_lexerOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			id_();
			State = 198;
			Match(EQUAL);
			State = 199;
			lexerOptionValue();
			State = 200;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerOptionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public LexerOptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerOptionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterLexerOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitLexerOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public LexerOptionValueContext lexerOptionValue() {
		LexerOptionValueContext _localctx = new LexerOptionValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_lexerOptionValue);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				charSet();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				optionValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetBlockElementContext[] setBlockElement() {
			return GetRuleContexts<SetBlockElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetBlockElementContext setBlockElement(int i) {
			return GetRuleContext<SetBlockElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv2Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv2Parser.OR, i);
		}
		public CharSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterCharSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitCharSet(this);
		}
	}

	[RuleVersion(0)]
	public CharSetContext charSet() {
		CharSetContext _localctx = new CharSetContext(Context, State);
		EnterRule(_localctx, 24, RULE_charSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			setBlockElement();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 207;
				Match(OR);
				State = 208;
				setBlockElement();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetBlockElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR_LITERAL() { return GetTokens(ANTLRv2Parser.CHAR_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL(int i) {
			return GetToken(ANTLRv2Parser.CHAR_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(ANTLRv2Parser.RANGE, 0); }
		public SetBlockElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setBlockElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterSetBlockElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitSetBlockElement(this);
		}
	}

	[RuleVersion(0)]
	public SetBlockElementContext setBlockElement() {
		SetBlockElementContext _localctx = new SetBlockElementContext(Context, State);
		EnterRule(_localctx, 26, RULE_setBlockElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(CHAR_LITERAL);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE) {
				{
				State = 215;
				Match(RANGE);
				State = 216;
				Match(CHAR_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKENS() { return GetToken(ANTLRv2Parser.TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenEntryContext[] tokenEntry() {
			return GetRuleContexts<TokenEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenEntryContext tokenEntry(int i) {
			return GetRuleContext<TokenEntryContext>(i);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 28, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(TOKENS);
			State = 220;
			Match(LBRACE);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 221;
				tokenEntry();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING_LITERAL || _la==TOKEN_REF );
			State = 226;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv2Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecOptionsContext tokensSpecOptions() {
			return GetRuleContext<TokensSpecOptionsContext>(0);
		}
		public TokenEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTokenEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTokenEntry(this);
		}
	}

	[RuleVersion(0)]
	public TokenEntryContext tokenEntry() {
		TokenEntryContext _localctx = new TokenEntryContext(Context, State);
		EnterRule(_localctx, 30, RULE_tokenEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
				{
				State = 228;
				Match(TOKEN_REF);
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL) {
					{
					State = 229;
					Match(EQUAL);
					State = 230;
					Match(STRING_LITERAL);
					}
				}

				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 233;
					tokensSpecOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				{
				State = 236;
				Match(STRING_LITERAL);
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_ELEMENT_OPTION) {
					{
					State = 237;
					tokensSpecOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 242;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ELEMENT_OPTION() { return GetToken(ANTLRv2Parser.OPEN_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(ANTLRv2Parser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(ANTLRv2Parser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext[] optionValue() {
			return GetRuleContexts<OptionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue(int i) {
			return GetRuleContext<OptionValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ELEMENT_OPTION() { return GetToken(ANTLRv2Parser.CLOSE_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(ANTLRv2Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv2Parser.SEMI, i);
		}
		public TokensSpecOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpecOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpecOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpecOptions(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecOptionsContext tokensSpecOptions() {
		TokensSpecOptionsContext _localctx = new TokensSpecOptionsContext(Context, State);
		EnterRule(_localctx, 32, RULE_tokensSpecOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(OPEN_ELEMENT_OPTION);
			State = 245;
			id_();
			State = 246;
			Match(EQUAL);
			State = 247;
			optionValue();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 248;
				Match(SEMI);
				State = 249;
				id_();
				State = 250;
				Match(EQUAL);
				State = 251;
				optionValue();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 258;
			Match(CLOSE_ELEMENT_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv2Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv2Parser.RPAREN, 0); }
		public SuperClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterSuperClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitSuperClass(this);
		}
	}

	[RuleVersion(0)]
	public SuperClassContext superClass() {
		SuperClassContext _localctx = new SuperClassContext(Context, State);
		EnterRule(_localctx, 34, RULE_superClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(LPAREN);
			State = 261;
			Match(STRING_LITERAL);
			State = 262;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ANTLRv2Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ANTLRv2Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv2Parser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParserOptionsSpecContext parserOptionsSpec() {
			return GetRuleContext<ParserOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		public ParserSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterParserSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitParserSpec(this);
		}
	}

	[RuleVersion(0)]
	public ParserSpecContext parserSpec() {
		ParserSpecContext _localctx = new ParserSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_parserSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(CLASS);
			State = 265;
			id_();
			State = 272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTENDS:
				{
				State = 266;
				Match(EXTENDS);
				State = 267;
				Match(PARSER);
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 268;
					superClass();
					}
				}

				}
				break;
			case SEMI:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 274;
			Match(SEMI);
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 275;
				parserOptionsSpec();
				}
			}

			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKENS) {
				{
				State = 278;
				tokensSpec();
				}
			}

			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ACTION) {
				{
				State = 281;
				actionBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXCLASS() { return GetToken(ANTLRv2Parser.LEXCLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ANTLRv2Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ANTLRv2Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv2Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerOptionsSpecContext lexerOptionsSpec() {
			return GetRuleContext<LexerOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		public LexerSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterLexerSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitLexerSpec(this);
		}
	}

	[RuleVersion(0)]
	public LexerSpecContext lexerSpec() {
		LexerSpecContext _localctx = new LexerSpecContext(Context, State);
		EnterRule(_localctx, 38, RULE_lexerSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEXCLASS:
				{
				State = 284;
				Match(LEXCLASS);
				State = 285;
				id_();
				}
				break;
			case CLASS:
				{
				State = 286;
				Match(CLASS);
				State = 287;
				id_();
				State = 288;
				Match(EXTENDS);
				State = 289;
				Match(LEXER);
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 290;
					superClass();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 295;
			Match(SEMI);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 296;
				lexerOptionsSpec();
				}
			}

			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKENS) {
				{
				State = 299;
				tokensSpec();
				}
			}

			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ACTION) {
				{
				State = 302;
				actionBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeParserSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(ANTLRv2Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(ANTLRv2Parser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREEPARSER() { return GetToken(ANTLRv2Parser.TREEPARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SuperClassContext superClass() {
			return GetRuleContext<SuperClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeParserOptionsSpecContext treeParserOptionsSpec() {
			return GetRuleContext<TreeParserOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public TreeParserSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeParserSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTreeParserSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTreeParserSpec(this);
		}
	}

	[RuleVersion(0)]
	public TreeParserSpecContext treeParserSpec() {
		TreeParserSpecContext _localctx = new TreeParserSpecContext(Context, State);
		EnterRule(_localctx, 40, RULE_treeParserSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(CLASS);
			State = 306;
			id_();
			State = 307;
			Match(EXTENDS);
			State = 308;
			Match(TREEPARSER);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 309;
				superClass();
				}
			}

			State = 312;
			Match(SEMI);
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 313;
				treeParserOptionsSpec();
				}
			}

			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKENS) {
				{
				State = 316;
				tokensSpec();
				}
			}

			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ACTION) {
				{
				State = 319;
				actionBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context[] rule_() {
			return GetRuleContexts<Rule_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_(int i) {
			return GetRuleContext<Rule_Context>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 42, RULE_rules);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 322;
					rule_();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv2Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv2Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv2Parser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext[] argActionBlock() {
			return GetRuleContexts<ArgActionBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock(int i) {
			return GetRuleContext<ArgActionBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(ANTLRv2Parser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleOptionsSpecContext ruleOptionsSpec() {
			return GetRuleContext<RuleOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(ANTLRv2Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(ANTLRv2Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ANTLRv2Parser.PRIVATE, 0); }
		public Rule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRule_(this);
		}
	}

	[RuleVersion(0)]
	public Rule_Context rule_() {
		Rule_Context _localctx = new Rule_Context(Context, State);
		EnterRule(_localctx, 44, RULE_rule_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 327;
				Match(DOC_COMMENT);
				}
			}

			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1008806316530991104L) != 0)) {
				{
				State = 330;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1008806316530991104L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 333;
			id_();
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG) {
				{
				State = 334;
				Match(BANG);
				}
			}

			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 337;
				argActionBlock();
				}
			}

			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 340;
				Match(RETURNS);
				State = 341;
				argActionBlock();
				}
			}

			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 344;
				throwsSpec();
				}
			}

			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 347;
				ruleOptionsSpec();
				}
			}

			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BEGIN_ACTION) {
				{
				{
				State = 350;
				ruleAction();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 356;
			Match(COLON);
			State = 357;
			altList();
			State = 358;
			Match(SEMI);
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCEPTION) {
				{
				State = 359;
				exceptionGroup();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleOptionsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv2Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ANTLRv2Parser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv2Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public RuleOptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleOptionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRuleOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRuleOptionsSpec(this);
		}
	}

	[RuleVersion(0)]
	public RuleOptionsSpecContext ruleOptionsSpec() {
		RuleOptionsSpecContext _localctx = new RuleOptionsSpecContext(Context, State);
		EnterRule(_localctx, 46, RULE_ruleOptionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(OPTIONS);
			State = 363;
			Match(LBRACE);
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 6442451009L) != 0)) {
				{
				{
				State = 364;
				option();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 370;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(ANTLRv2Parser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv2Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv2Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 48, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(THROWS);
			State = 373;
			id_();
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 374;
				Match(COMMA);
				State = 375;
				id_();
				}
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv2Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv2Parser.OR, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			alternative();
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 382;
				Match(OR);
				State = 383;
				alternative();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 52, RULE_alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BANG) {
				{
				State = 389;
				Match(BANG);
				}
			}

			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 29273981966093057L) != 0)) {
				{
				{
				State = 392;
				element();
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionSpecContext[] exceptionSpec() {
			return GetRuleContexts<ExceptionSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionSpecContext exceptionSpec(int i) {
			return GetRuleContext<ExceptionSpecContext>(i);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 54, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 398;
				exceptionSpec();
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXCEPTION );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(ANTLRv2Parser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public ExceptionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterExceptionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitExceptionSpec(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionSpecContext exceptionSpec() {
		ExceptionSpecContext _localctx = new ExceptionSpecContext(Context, State);
		EnterRule(_localctx, 56, RULE_exceptionSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(EXCEPTION);
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 404;
				argActionBlock();
				}
			}

			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 407;
				exceptionHandler();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionSpecNoLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(ANTLRv2Parser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public ExceptionSpecNoLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionSpecNoLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterExceptionSpecNoLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitExceptionSpecNoLabel(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionSpecNoLabelContext exceptionSpecNoLabel() {
		ExceptionSpecNoLabelContext _localctx = new ExceptionSpecNoLabelContext(Context, State);
		EnterRule(_localctx, 58, RULE_exceptionSpecNoLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(EXCEPTION);
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 414;
				exceptionHandler();
				}
				}
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ANTLRv2Parser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 60, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			Match(CATCH);
			State = 421;
			argActionBlock();
			State = 422;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementNoOptionSpecContext elementNoOptionSpec() {
			return GetRuleContext<ElementNoOptionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionSpecContext elementOptionSpec() {
			return GetRuleContext<ElementOptionSpecContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 62, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			elementNoOptionSpec();
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_ELEMENT_OPTION) {
				{
				State = 425;
				elementOptionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ELEMENT_OPTION() { return GetToken(ANTLRv2Parser.OPEN_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(ANTLRv2Parser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(ANTLRv2Parser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext[] optionValue() {
			return GetRuleContexts<OptionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue(int i) {
			return GetRuleContext<OptionValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ELEMENT_OPTION() { return GetToken(ANTLRv2Parser.CLOSE_ELEMENT_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(ANTLRv2Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv2Parser.SEMI, i);
		}
		public ElementOptionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterElementOptionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitElementOptionSpec(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionSpecContext elementOptionSpec() {
		ElementOptionSpecContext _localctx = new ElementOptionSpecContext(Context, State);
		EnterRule(_localctx, 64, RULE_elementOptionSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(OPEN_ELEMENT_OPTION);
			State = 429;
			id_();
			State = 430;
			Match(EQUAL);
			State = 431;
			optionValue();
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 432;
				Match(SEMI);
				State = 433;
				id_();
				State = 434;
				Match(EQUAL);
				State = 435;
				optionValue();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 442;
			Match(CLOSE_ELEMENT_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNoOptionSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ANTLRv2Parser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_ref_or_keyword_asContext rule_ref_or_keyword_as() {
			return GetRuleContext<Rule_ref_or_keyword_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv2Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Range_Context range_() {
			return GetRuleContext<Range_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_Context terminal_() {
			return GetRuleContext<Terminal_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ANTLRv2Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotTerminalContext notTerminal() {
			return GetRuleContext<NotTerminalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv2Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tree_Context tree_() {
			return GetRuleContext<Tree_Context>(0);
		}
		public ElementNoOptionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementNoOptionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterElementNoOptionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitElementNoOptionSpec(this);
		}
	}

	[RuleVersion(0)]
	public ElementNoOptionSpecContext elementNoOptionSpec() {
		ElementNoOptionSpecContext _localctx = new ElementNoOptionSpecContext(Context, State);
		EnterRule(_localctx, 66, RULE_elementNoOptionSpec);
		int _la;
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 444;
				id_();
				State = 445;
				Match(EQUAL);
				State = 449;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 446;
					id_();
					State = 447;
					Match(COLON);
					}
					break;
				}
				State = 462;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case GRAMMAR:
				case TREE:
				case RULE_REF:
					{
					State = 451;
					rule_ref_or_keyword_as();
					State = 453;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BEGIN_ARGUMENT) {
						{
						State = 452;
						argActionBlock();
						}
					}

					State = 456;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BANG) {
						{
						State = 455;
						Match(BANG);
						}
					}

					}
					break;
				case TOKEN_REF:
					{
					State = 458;
					Match(TOKEN_REF);
					State = 460;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BEGIN_ARGUMENT) {
						{
						State = 459;
						argActionBlock();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 467;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 464;
					id_();
					State = 465;
					Match(COLON);
					}
					break;
				}
				State = 484;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 469;
					rule_ref_or_keyword_as();
					State = 471;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BEGIN_ARGUMENT) {
						{
						State = 470;
						argActionBlock();
						}
					}

					State = 474;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BANG) {
						{
						State = 473;
						Match(BANG);
						}
					}

					}
					break;
				case 2:
					{
					State = 476;
					range_();
					}
					break;
				case 3:
					{
					State = 477;
					terminal_();
					}
					break;
				case 4:
					{
					State = 478;
					Match(NOT);
					State = 481;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CHAR_LITERAL:
					case TOKEN_REF:
						{
						State = 479;
						notTerminal();
						}
						break;
					case LPAREN:
						{
						State = 480;
						ebnf();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 5:
					{
					State = 483;
					ebnf();
					}
					break;
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 486;
				actionBlock();
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QM) {
					{
					State = 487;
					Match(QM);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 490;
				tree_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_ref_or_keyword_asContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv2Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMMAR() { return GetToken(ANTLRv2Parser.GRAMMAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE() { return GetToken(ANTLRv2Parser.TREE, 0); }
		public Rule_ref_or_keyword_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_ref_or_keyword_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRule_ref_or_keyword_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRule_ref_or_keyword_as(this);
		}
	}

	[RuleVersion(0)]
	public Rule_ref_or_keyword_asContext rule_ref_or_keyword_as() {
		Rule_ref_or_keyword_asContext _localctx = new Rule_ref_or_keyword_asContext(Context, State);
		EnterRule(_localctx, 68, RULE_rule_ref_or_keyword_as);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 4294967361L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tree_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE_BEGIN() { return GetToken(ANTLRv2Parser.TREE_BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RootNodeContext rootNode() {
			return GetRuleContext<RootNodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv2Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public Tree_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tree_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTree_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTree_(this);
		}
	}

	[RuleVersion(0)]
	public Tree_Context tree_() {
		Tree_Context _localctx = new Tree_Context(Context, State);
		EnterRule(_localctx, 70, RULE_tree_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(TREE_BEGIN);
			State = 496;
			rootNode();
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 497;
				element();
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 29273981966093057L) != 0) );
			State = 502;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_Context terminal_() {
			return GetRuleContext<Terminal_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv2Parser.COLON, 0); }
		public RootNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRootNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRootNode(this);
		}
	}

	[RuleVersion(0)]
	public RootNodeContext rootNode() {
		RootNodeContext _localctx = new RootNodeContext(Context, State);
		EnterRule(_localctx, 72, RULE_rootNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 504;
				id_();
				State = 505;
				Match(COLON);
				}
				break;
			}
			State = 509;
			terminal_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv2Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv2Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMPREDOP() { return GetToken(ANTLRv2Parser.SEMPREDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubruleOptionsSpecContext subruleOptionsSpec() {
			return GetRuleContext<SubruleOptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv2Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QM() { return GetToken(ANTLRv2Parser.QM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ANTLRv2Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ANTLRv2Parser.PLUS, 0); }
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 74, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(LPAREN);
			State = 521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 512;
				subruleOptionsSpec();
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BEGIN_ACTION) {
					{
					State = 513;
					actionBlock();
					}
				}

				State = 516;
				Match(COLON);
				}
				break;
			case 2:
				{
				State = 518;
				actionBlock();
				State = 519;
				Match(COLON);
				}
				break;
			}
			State = 523;
			block();
			State = 524;
			Match(RPAREN);
			State = 532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TREE_BEGIN:
			case BANG:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case GRAMMAR:
			case TREE:
			case OPEN_ELEMENT_OPTION:
			case DOT:
			case LPAREN:
			case OR:
			case PLUS:
			case QM:
			case RPAREN:
			case SEMI:
			case STAR:
			case NOT:
			case TOKEN_REF:
			case RULE_REF:
				{
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 131L) != 0)) {
					{
					State = 525;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 131L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 528;
					Match(BANG);
					}
				}

				}
				break;
			case SEMPREDOP:
				{
				State = 531;
				Match(SEMPREDOP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ast_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(ANTLRv2Parser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		public Ast_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ast_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterAst_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitAst_type_spec(this);
		}
	}

	[RuleVersion(0)]
	public Ast_type_specContext ast_type_spec() {
		Ast_type_specContext _localctx = new Ast_type_specContext(Context, State);
		EnterRule(_localctx, 76, RULE_ast_type_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROOT || _la==BANG) {
				{
				State = 534;
				_la = TokenStream.LA(1);
				if ( !(_la==ROOT || _la==BANG) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR_LITERAL() { return GetTokens(ANTLRv2Parser.CHAR_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL(int i) {
			return GetToken(ANTLRv2Parser.CHAR_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(ANTLRv2Parser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ast_type_specContext ast_type_spec() {
			return GetRuleContext<Ast_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		public Range_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRange_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRange_(this);
		}
	}

	[RuleVersion(0)]
	public Range_Context range_() {
		Range_Context _localctx = new Range_Context(Context, State);
		EnterRule(_localctx, 78, RULE_range_);
		int _la;
		try {
			State = 546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537;
				Match(CHAR_LITERAL);
				State = 538;
				Match(RANGE);
				State = 539;
				Match(CHAR_LITERAL);
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 540;
					Match(BANG);
					}
				}

				}
				break;
			case STRING_LITERAL:
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING_LITERAL || _la==TOKEN_REF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 544;
				Match(RANGE);
				State = 545;
				ast_type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv2Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ast_type_specContext ast_type_spec() {
			return GetRuleContext<Ast_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv2Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ANTLRv2Parser.DOT, 0); }
		public Terminal_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterTerminal_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitTerminal_(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_Context terminal_() {
		Terminal_Context _localctx = new Terminal_Context(Context, State);
		EnterRule(_localctx, 80, RULE_terminal_);
		int _la;
		try {
			State = 561;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548;
				Match(CHAR_LITERAL);
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 549;
					Match(BANG);
					}
				}

				}
				break;
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				Match(TOKEN_REF);
				State = 553;
				ast_type_spec();
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BEGIN_ARGUMENT) {
					{
					State = 554;
					argActionBlock();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 557;
				Match(STRING_LITERAL);
				State = 558;
				ast_type_spec();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 559;
				Match(DOT);
				State = 560;
				ast_type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotTerminalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(ANTLRv2Parser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(ANTLRv2Parser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ast_type_specContext ast_type_spec() {
			return GetRuleContext<Ast_type_specContext>(0);
		}
		public NotTerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notTerminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterNotTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitNotTerminal(this);
		}
	}

	[RuleVersion(0)]
	public NotTerminalContext notTerminal() {
		NotTerminalContext _localctx = new NotTerminalContext(Context, State);
		EnterRule(_localctx, 82, RULE_notTerminal);
		int _la;
		try {
			State = 569;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 563;
				Match(CHAR_LITERAL);
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 564;
					Match(BANG);
					}
				}

				}
				break;
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567;
				Match(TOKEN_REF);
				State = 568;
				ast_type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context[] id_() {
			return GetRuleContexts<Id_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_(int i) {
			return GetRuleContext<Id_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ANTLRv2Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ANTLRv2Parser.DOT, i);
		}
		public QualifiedIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterQualifiedID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitQualifiedID(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIDContext qualifiedID() {
		QualifiedIDContext _localctx = new QualifiedIDContext(Context, State);
		EnterRule(_localctx, 84, RULE_qualifiedID);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			id_();
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 572;
				Match(DOT);
				State = 573;
				id_();
				}
				}
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv2Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv2Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMMAR() { return GetToken(ANTLRv2Parser.GRAMMAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREE() { return GetToken(ANTLRv2Parser.TREE, 0); }
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(Context, State);
		EnterRule(_localctx, 86, RULE_id_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 6442451009L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ANTLRv2Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(ANTLRv2Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 88, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(AT);
			State = 585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 582;
				actionScopeName();
				State = 583;
				Match(COLONCOLON);
				}
				break;
			}
			State = 587;
			id_();
			State = 588;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv2Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv2Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_actionScopeName);
		try {
			State = 593;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRAMMAR:
			case TREE:
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 590;
				id_();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 591;
				Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 592;
				Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 92, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv2Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv2Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 94, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			alternative();
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 598;
				Match(OR);
				State = 599;
				alternative();
				}
				}
				State = 604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ACTION() { return GetToken(ANTLRv2Parser.BEGIN_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ACTION() { return GetToken(ANTLRv2Parser.END_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ACTION_CONTENT() { return GetTokens(ANTLRv2Parser.ACTION_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_CONTENT(int i) {
			return GetToken(ANTLRv2Parser.ACTION_CONTENT, i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 96, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(BEGIN_ACTION);
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ACTION_CONTENT) {
				{
				{
				State = 606;
				Match(ACTION_CONTENT);
				}
				}
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 612;
			Match(END_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ARGUMENT() { return GetToken(ANTLRv2Parser.BEGIN_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ARGUMENT() { return GetToken(ANTLRv2Parser.END_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(ANTLRv2Parser.ARGUMENT_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(ANTLRv2Parser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv2ParserListener typedListener = listener as IANTLRv2ParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ArgActionBlockContext argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
		EnterRule(_localctx, 98, RULE_argActionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			Match(BEGIN_ARGUMENT);
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARGUMENT_CONTENT) {
				{
				{
				State = 615;
				Match(ARGUMENT_CONTENT);
				}
				}
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 621;
			Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,96,624,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		1,0,5,0,102,8,0,10,0,12,0,105,9,0,1,0,3,0,108,8,0,1,0,5,0,111,8,0,10,0,
		12,0,114,9,0,1,0,1,0,1,1,1,1,3,1,120,8,1,1,1,1,1,1,2,3,2,125,8,2,1,2,3,
		2,128,8,2,1,2,1,2,1,2,3,2,133,8,2,1,2,1,2,1,3,1,3,1,3,5,3,140,8,3,10,3,
		12,3,143,9,3,1,3,1,3,1,4,1,4,1,4,5,4,150,8,4,10,4,12,4,153,9,4,1,4,1,4,
		1,5,1,5,1,5,5,5,160,8,5,10,5,12,5,163,9,5,1,5,1,5,1,6,1,6,1,6,5,6,170,
		8,6,10,6,12,6,173,9,6,1,6,1,6,1,7,1,7,1,7,5,7,180,8,7,10,7,12,7,183,9,
		7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,196,8,9,1,10,1,10,1,
		10,1,10,1,10,1,11,1,11,3,11,205,8,11,1,12,1,12,1,12,5,12,210,8,12,10,12,
		12,12,213,9,12,1,13,1,13,1,13,3,13,218,8,13,1,14,1,14,1,14,4,14,223,8,
		14,11,14,12,14,224,1,14,1,14,1,15,1,15,1,15,3,15,232,8,15,1,15,3,15,235,
		8,15,1,15,1,15,3,15,239,8,15,3,15,241,8,15,1,15,1,15,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,5,16,254,8,16,10,16,12,16,257,9,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,270,8,18,1,18,3,18,
		273,8,18,1,18,1,18,3,18,277,8,18,1,18,3,18,280,8,18,1,18,3,18,283,8,18,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,292,8,19,3,19,294,8,19,1,19,1,
		19,3,19,298,8,19,1,19,3,19,301,8,19,1,19,3,19,304,8,19,1,20,1,20,1,20,
		1,20,1,20,3,20,311,8,20,1,20,1,20,3,20,315,8,20,1,20,3,20,318,8,20,1,20,
		3,20,321,8,20,1,21,4,21,324,8,21,11,21,12,21,325,1,22,3,22,329,8,22,1,
		22,3,22,332,8,22,1,22,1,22,3,22,336,8,22,1,22,3,22,339,8,22,1,22,1,22,
		3,22,343,8,22,1,22,3,22,346,8,22,1,22,3,22,349,8,22,1,22,5,22,352,8,22,
		10,22,12,22,355,9,22,1,22,1,22,1,22,1,22,3,22,361,8,22,1,23,1,23,1,23,
		5,23,366,8,23,10,23,12,23,369,9,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,
		377,8,24,10,24,12,24,380,9,24,1,25,1,25,1,25,5,25,385,8,25,10,25,12,25,
		388,9,25,1,26,3,26,391,8,26,1,26,5,26,394,8,26,10,26,12,26,397,9,26,1,
		27,4,27,400,8,27,11,27,12,27,401,1,28,1,28,3,28,406,8,28,1,28,5,28,409,
		8,28,10,28,12,28,412,9,28,1,29,1,29,5,29,416,8,29,10,29,12,29,419,9,29,
		1,30,1,30,1,30,1,30,1,31,1,31,3,31,427,8,31,1,32,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,5,32,438,8,32,10,32,12,32,441,9,32,1,32,1,32,1,33,1,
		33,1,33,1,33,1,33,3,33,450,8,33,1,33,1,33,3,33,454,8,33,1,33,3,33,457,
		8,33,1,33,1,33,3,33,461,8,33,3,33,463,8,33,1,33,1,33,1,33,3,33,468,8,33,
		1,33,1,33,3,33,472,8,33,1,33,3,33,475,8,33,1,33,1,33,1,33,1,33,1,33,3,
		33,482,8,33,1,33,3,33,485,8,33,1,33,1,33,3,33,489,8,33,1,33,3,33,492,8,
		33,1,34,1,34,1,35,1,35,1,35,4,35,499,8,35,11,35,12,35,500,1,35,1,35,1,
		36,1,36,1,36,3,36,508,8,36,1,36,1,36,1,37,1,37,1,37,3,37,515,8,37,1,37,
		1,37,1,37,1,37,1,37,3,37,522,8,37,1,37,1,37,1,37,3,37,527,8,37,1,37,3,
		37,530,8,37,1,37,3,37,533,8,37,1,38,3,38,536,8,38,1,39,1,39,1,39,1,39,
		3,39,542,8,39,1,39,1,39,1,39,3,39,547,8,39,1,40,1,40,3,40,551,8,40,1,40,
		1,40,1,40,3,40,556,8,40,1,40,1,40,1,40,1,40,3,40,562,8,40,1,41,1,41,3,
		41,566,8,41,1,41,1,41,3,41,570,8,41,1,42,1,42,1,42,5,42,575,8,42,10,42,
		12,42,578,9,42,1,43,1,43,1,44,1,44,1,44,1,44,3,44,586,8,44,1,44,1,44,1,
		44,1,45,1,45,1,45,3,45,594,8,45,1,46,1,46,1,47,1,47,1,47,5,47,601,8,47,
		10,47,12,47,604,9,47,1,48,1,48,5,48,608,8,48,10,48,12,48,611,9,48,1,48,
		1,48,1,49,1,49,5,49,617,8,49,10,49,12,49,620,9,49,1,49,1,49,1,49,0,0,50,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,0,6,1,0,57,59,3,0,56,56,62,62,88,88,2,0,75,76,82,82,1,0,35,36,2,0,43,
		43,87,87,3,0,56,56,62,62,87,88,675,0,103,1,0,0,0,2,117,1,0,0,0,4,124,1,
		0,0,0,6,136,1,0,0,0,8,146,1,0,0,0,10,156,1,0,0,0,12,166,1,0,0,0,14,176,
		1,0,0,0,16,186,1,0,0,0,18,195,1,0,0,0,20,197,1,0,0,0,22,204,1,0,0,0,24,
		206,1,0,0,0,26,214,1,0,0,0,28,219,1,0,0,0,30,240,1,0,0,0,32,244,1,0,0,
		0,34,260,1,0,0,0,36,264,1,0,0,0,38,293,1,0,0,0,40,305,1,0,0,0,42,323,1,
		0,0,0,44,328,1,0,0,0,46,362,1,0,0,0,48,372,1,0,0,0,50,381,1,0,0,0,52,390,
		1,0,0,0,54,399,1,0,0,0,56,403,1,0,0,0,58,413,1,0,0,0,60,420,1,0,0,0,62,
		424,1,0,0,0,64,428,1,0,0,0,66,491,1,0,0,0,68,493,1,0,0,0,70,495,1,0,0,
		0,72,507,1,0,0,0,74,511,1,0,0,0,76,535,1,0,0,0,78,546,1,0,0,0,80,561,1,
		0,0,0,82,569,1,0,0,0,84,571,1,0,0,0,86,579,1,0,0,0,88,581,1,0,0,0,90,593,
		1,0,0,0,92,595,1,0,0,0,94,597,1,0,0,0,96,605,1,0,0,0,98,614,1,0,0,0,100,
		102,3,2,1,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,
		0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,106,108,3,6,3,0,107,106,1,0,0,0,
		107,108,1,0,0,0,108,112,1,0,0,0,109,111,3,4,2,0,110,109,1,0,0,0,111,114,
		1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,112,1,0,0,
		0,115,116,5,0,0,1,116,1,1,0,0,0,117,119,5,48,0,0,118,120,5,43,0,0,119,
		118,1,0,0,0,119,120,1,0,0,0,120,121,1,0,0,0,121,122,3,96,48,0,122,3,1,
		0,0,0,123,125,3,96,48,0,124,123,1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,
		0,126,128,5,1,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,132,1,0,0,0,129,
		133,3,38,19,0,130,133,3,40,20,0,131,133,3,36,18,0,132,129,1,0,0,0,132,
		130,1,0,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,135,3,42,21,0,135,5,1,
		0,0,0,136,137,5,46,0,0,137,141,5,71,0,0,138,140,3,16,8,0,139,138,1,0,0,
		0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,
		141,1,0,0,0,144,145,5,77,0,0,145,7,1,0,0,0,146,147,5,46,0,0,147,151,5,
		71,0,0,148,150,3,16,8,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,
		0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,5,77,0,0,155,
		9,1,0,0,0,156,157,5,46,0,0,157,161,5,71,0,0,158,160,3,16,8,0,159,158,1,
		0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,
		163,161,1,0,0,0,164,165,5,77,0,0,165,11,1,0,0,0,166,167,5,46,0,0,167,171,
		5,71,0,0,168,170,3,20,10,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,
		0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,5,77,0,0,175,
		13,1,0,0,0,176,177,5,46,0,0,177,181,5,71,0,0,178,180,3,16,8,0,179,178,
		1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,184,1,0,0,
		0,183,181,1,0,0,0,184,185,5,77,0,0,185,15,1,0,0,0,186,187,3,86,43,0,187,
		188,5,70,0,0,188,189,3,18,9,0,189,190,5,80,0,0,190,17,1,0,0,0,191,196,
		3,84,42,0,192,196,5,43,0,0,193,196,5,42,0,0,194,196,5,41,0,0,195,191,1,
		0,0,0,195,192,1,0,0,0,195,193,1,0,0,0,195,194,1,0,0,0,196,19,1,0,0,0,197,
		198,3,86,43,0,198,199,5,70,0,0,199,200,3,22,11,0,200,201,5,80,0,0,201,
		21,1,0,0,0,202,205,3,24,12,0,203,205,3,18,9,0,204,202,1,0,0,0,204,203,
		1,0,0,0,205,23,1,0,0,0,206,211,3,26,13,0,207,208,5,74,0,0,208,210,3,26,
		13,0,209,207,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,
		25,1,0,0,0,213,211,1,0,0,0,214,217,5,42,0,0,215,216,5,10,0,0,216,218,5,
		42,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,27,1,0,0,0,219,220,5,47,0,0,
		220,222,5,71,0,0,221,223,3,30,15,0,222,221,1,0,0,0,223,224,1,0,0,0,224,
		222,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,77,0,0,227,29,1,
		0,0,0,228,231,5,87,0,0,229,230,5,70,0,0,230,232,5,43,0,0,231,229,1,0,0,
		0,231,232,1,0,0,0,232,234,1,0,0,0,233,235,3,32,16,0,234,233,1,0,0,0,234,
		235,1,0,0,0,235,241,1,0,0,0,236,238,5,43,0,0,237,239,3,32,16,0,238,237,
		1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,228,1,0,0,0,240,236,1,0,0,
		0,241,242,1,0,0,0,242,243,5,80,0,0,243,31,1,0,0,0,244,245,5,63,0,0,245,
		246,3,86,43,0,246,247,5,70,0,0,247,255,3,18,9,0,248,249,5,80,0,0,249,250,
		3,86,43,0,250,251,5,70,0,0,251,252,3,18,9,0,252,254,1,0,0,0,253,248,1,
		0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,
		257,255,1,0,0,0,258,259,5,64,0,0,259,33,1,0,0,0,260,261,5,73,0,0,261,262,
		5,43,0,0,262,263,5,79,0,0,263,35,1,0,0,0,264,265,5,49,0,0,265,272,3,86,
		43,0,266,267,5,50,0,0,267,269,5,2,0,0,268,270,3,34,17,0,269,268,1,0,0,
		0,269,270,1,0,0,0,270,273,1,0,0,0,271,273,1,0,0,0,272,266,1,0,0,0,272,
		271,1,0,0,0,273,274,1,0,0,0,274,276,5,80,0,0,275,277,3,8,4,0,276,275,1,
		0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,280,3,28,14,0,279,278,1,0,0,
		0,279,280,1,0,0,0,280,282,1,0,0,0,281,283,3,96,48,0,282,281,1,0,0,0,282,
		283,1,0,0,0,283,37,1,0,0,0,284,285,5,51,0,0,285,294,3,86,43,0,286,287,
		5,49,0,0,287,288,3,86,43,0,288,289,5,50,0,0,289,291,5,3,0,0,290,292,3,
		34,17,0,291,290,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,284,1,0,0,
		0,293,286,1,0,0,0,294,295,1,0,0,0,295,297,5,80,0,0,296,298,3,12,6,0,297,
		296,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,301,3,28,14,0,300,299,
		1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,304,3,96,48,0,303,302,1,0,
		0,0,303,304,1,0,0,0,304,39,1,0,0,0,305,306,5,49,0,0,306,307,3,86,43,0,
		307,308,5,50,0,0,308,310,5,52,0,0,309,311,3,34,17,0,310,309,1,0,0,0,310,
		311,1,0,0,0,311,312,1,0,0,0,312,314,5,80,0,0,313,315,3,10,5,0,314,313,
		1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,318,3,28,14,0,317,316,1,0,
		0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,321,3,96,48,0,320,319,1,0,0,0,
		320,321,1,0,0,0,321,41,1,0,0,0,322,324,3,44,22,0,323,322,1,0,0,0,324,325,
		1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,43,1,0,0,0,327,329,5,1,0,0,
		328,327,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,332,7,0,0,0,331,330,
		1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,335,3,86,43,0,334,336,5,36,
		0,0,335,334,1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,339,3,98,49,0,
		338,337,1,0,0,0,338,339,1,0,0,0,339,342,1,0,0,0,340,341,5,60,0,0,341,343,
		3,98,49,0,342,340,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,346,3,48,
		24,0,345,344,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,349,3,46,23,0,
		348,347,1,0,0,0,348,349,1,0,0,0,349,353,1,0,0,0,350,352,3,92,46,0,351,
		350,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,356,1,
		0,0,0,355,353,1,0,0,0,356,357,5,66,0,0,357,358,3,94,47,0,358,360,5,80,
		0,0,359,361,3,54,27,0,360,359,1,0,0,0,360,361,1,0,0,0,361,45,1,0,0,0,362,
		363,5,46,0,0,363,367,5,71,0,0,364,366,3,16,8,0,365,364,1,0,0,0,366,369,
		1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,370,1,0,0,0,369,367,1,0,0,
		0,370,371,5,77,0,0,371,47,1,0,0,0,372,373,5,61,0,0,373,378,3,86,43,0,374,
		375,5,68,0,0,375,377,3,86,43,0,376,374,1,0,0,0,377,380,1,0,0,0,378,376,
		1,0,0,0,378,379,1,0,0,0,379,49,1,0,0,0,380,378,1,0,0,0,381,386,3,52,26,
		0,382,383,5,74,0,0,383,385,3,52,26,0,384,382,1,0,0,0,385,388,1,0,0,0,386,
		384,1,0,0,0,386,387,1,0,0,0,387,51,1,0,0,0,388,386,1,0,0,0,389,391,5,36,
		0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,395,1,0,0,0,392,394,3,62,31,0,
		393,392,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,53,
		1,0,0,0,397,395,1,0,0,0,398,400,3,56,28,0,399,398,1,0,0,0,400,401,1,0,
		0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,55,1,0,0,0,403,405,5,53,0,0,404,
		406,3,98,49,0,405,404,1,0,0,0,405,406,1,0,0,0,406,410,1,0,0,0,407,409,
		3,60,30,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,
		0,0,411,57,1,0,0,0,412,410,1,0,0,0,413,417,5,53,0,0,414,416,3,60,30,0,
		415,414,1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,59,
		1,0,0,0,419,417,1,0,0,0,420,421,5,54,0,0,421,422,3,98,49,0,422,423,3,96,
		48,0,423,61,1,0,0,0,424,426,3,66,33,0,425,427,3,64,32,0,426,425,1,0,0,
		0,426,427,1,0,0,0,427,63,1,0,0,0,428,429,5,63,0,0,429,430,3,86,43,0,430,
		431,5,70,0,0,431,439,3,18,9,0,432,433,5,80,0,0,433,434,3,86,43,0,434,435,
		5,70,0,0,435,436,3,18,9,0,436,438,1,0,0,0,437,432,1,0,0,0,438,441,1,0,
		0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,439,1,0,0,0,442,
		443,5,64,0,0,443,65,1,0,0,0,444,445,3,86,43,0,445,449,5,70,0,0,446,447,
		3,86,43,0,447,448,5,66,0,0,448,450,1,0,0,0,449,446,1,0,0,0,449,450,1,0,
		0,0,450,462,1,0,0,0,451,453,3,68,34,0,452,454,3,98,49,0,453,452,1,0,0,
		0,453,454,1,0,0,0,454,456,1,0,0,0,455,457,5,36,0,0,456,455,1,0,0,0,456,
		457,1,0,0,0,457,463,1,0,0,0,458,460,5,87,0,0,459,461,3,98,49,0,460,459,
		1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,451,1,0,0,0,462,458,1,0,0,
		0,463,492,1,0,0,0,464,465,3,86,43,0,465,466,5,66,0,0,466,468,1,0,0,0,467,
		464,1,0,0,0,467,468,1,0,0,0,468,484,1,0,0,0,469,471,3,68,34,0,470,472,
		3,98,49,0,471,470,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,475,5,36,
		0,0,474,473,1,0,0,0,474,475,1,0,0,0,475,485,1,0,0,0,476,485,3,78,39,0,
		477,485,3,80,40,0,478,481,5,85,0,0,479,482,3,82,41,0,480,482,3,74,37,0,
		481,479,1,0,0,0,481,480,1,0,0,0,482,485,1,0,0,0,483,485,3,74,37,0,484,
		469,1,0,0,0,484,476,1,0,0,0,484,477,1,0,0,0,484,478,1,0,0,0,484,483,1,
		0,0,0,485,492,1,0,0,0,486,488,3,96,48,0,487,489,5,76,0,0,488,487,1,0,0,
		0,488,489,1,0,0,0,489,492,1,0,0,0,490,492,3,70,35,0,491,444,1,0,0,0,491,
		467,1,0,0,0,491,486,1,0,0,0,491,490,1,0,0,0,492,67,1,0,0,0,493,494,7,1,
		0,0,494,69,1,0,0,0,495,496,5,34,0,0,496,498,3,72,36,0,497,499,3,62,31,
		0,498,497,1,0,0,0,499,500,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,
		502,1,0,0,0,502,503,5,79,0,0,503,71,1,0,0,0,504,505,3,86,43,0,505,506,
		5,66,0,0,506,508,1,0,0,0,507,504,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,
		0,509,510,3,80,40,0,510,73,1,0,0,0,511,521,5,73,0,0,512,514,3,14,7,0,513,
		515,3,96,48,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,517,
		5,66,0,0,517,522,1,0,0,0,518,519,3,96,48,0,519,520,5,66,0,0,520,522,1,
		0,0,0,521,512,1,0,0,0,521,518,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,
		523,524,3,50,25,0,524,532,5,79,0,0,525,527,7,2,0,0,526,525,1,0,0,0,526,
		527,1,0,0,0,527,529,1,0,0,0,528,530,5,36,0,0,529,528,1,0,0,0,529,530,1,
		0,0,0,530,533,1,0,0,0,531,533,5,81,0,0,532,526,1,0,0,0,532,531,1,0,0,0,
		533,75,1,0,0,0,534,536,7,3,0,0,535,534,1,0,0,0,535,536,1,0,0,0,536,77,
		1,0,0,0,537,538,5,42,0,0,538,539,5,10,0,0,539,541,5,42,0,0,540,542,5,36,
		0,0,541,540,1,0,0,0,541,542,1,0,0,0,542,547,1,0,0,0,543,544,7,4,0,0,544,
		545,5,10,0,0,545,547,3,76,38,0,546,537,1,0,0,0,546,543,1,0,0,0,547,79,
		1,0,0,0,548,550,5,42,0,0,549,551,5,36,0,0,550,549,1,0,0,0,550,551,1,0,
		0,0,551,562,1,0,0,0,552,553,5,87,0,0,553,555,3,76,38,0,554,556,3,98,49,
		0,555,554,1,0,0,0,555,556,1,0,0,0,556,562,1,0,0,0,557,558,5,43,0,0,558,
		562,3,76,38,0,559,560,5,69,0,0,560,562,3,76,38,0,561,548,1,0,0,0,561,552,
		1,0,0,0,561,557,1,0,0,0,561,559,1,0,0,0,562,81,1,0,0,0,563,565,5,42,0,
		0,564,566,5,36,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,570,1,0,0,0,567,
		568,5,87,0,0,568,570,3,76,38,0,569,563,1,0,0,0,569,567,1,0,0,0,570,83,
		1,0,0,0,571,576,3,86,43,0,572,573,5,69,0,0,573,575,3,86,43,0,574,572,1,
		0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,85,1,0,0,0,578,
		576,1,0,0,0,579,580,7,5,0,0,580,87,1,0,0,0,581,585,5,65,0,0,582,583,3,
		90,45,0,583,584,5,67,0,0,584,586,1,0,0,0,585,582,1,0,0,0,585,586,1,0,0,
		0,586,587,1,0,0,0,587,588,3,86,43,0,588,589,3,96,48,0,589,89,1,0,0,0,590,
		594,3,86,43,0,591,594,5,3,0,0,592,594,5,2,0,0,593,590,1,0,0,0,593,591,
		1,0,0,0,593,592,1,0,0,0,594,91,1,0,0,0,595,596,3,96,48,0,596,93,1,0,0,
		0,597,602,3,52,26,0,598,599,5,74,0,0,599,601,3,52,26,0,600,598,1,0,0,0,
		601,604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,95,1,0,0,0,604,602,
		1,0,0,0,605,609,5,45,0,0,606,608,5,38,0,0,607,606,1,0,0,0,608,611,1,0,
		0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,611,609,1,0,0,0,612,
		613,5,92,0,0,613,97,1,0,0,0,614,618,5,44,0,0,615,617,5,91,0,0,616,615,
		1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,
		0,620,618,1,0,0,0,621,622,5,89,0,0,622,99,1,0,0,0,90,103,107,112,119,124,
		127,132,141,151,161,171,181,195,204,211,217,224,231,234,238,240,255,269,
		272,276,279,282,291,293,297,300,303,310,314,317,320,325,328,331,335,338,
		342,345,348,353,360,367,378,386,390,395,401,405,410,417,426,439,449,453,
		456,460,462,467,471,474,481,484,488,491,500,507,514,521,526,529,532,535,
		541,546,550,555,561,565,569,576,585,593,602,609,618
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
