//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from lbnfParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class lbnfParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Surrogate_id_SYMB_0=1, Surrogate_id_SYMB_1=2, Surrogate_id_SYMB_2=3, Surrogate_id_SYMB_3=4, 
		Surrogate_id_SYMB_4=5, Surrogate_id_SYMB_5=6, Surrogate_id_SYMB_6=7, Surrogate_id_SYMB_7=8, 
		Surrogate_id_SYMB_8=9, Surrogate_id_SYMB_9=10, Surrogate_id_SYMB_10=11, 
		Surrogate_id_SYMB_11=12, Surrogate_id_SYMB_12=13, Surrogate_id_SYMB_13=14, 
		Surrogate_id_SYMB_14=15, Surrogate_id_SYMB_15=16, Surrogate_id_SYMB_16=17, 
		Surrogate_id_SYMB_17=18, Surrogate_id_SYMB_18=19, Surrogate_id_SYMB_19=20, 
		Surrogate_id_SYMB_20=21, Surrogate_id_SYMB_21=22, Surrogate_id_SYMB_22=23, 
		Surrogate_id_SYMB_23=24, Surrogate_id_SYMB_24=25, Surrogate_id_SYMB_25=26, 
		Surrogate_id_SYMB_26=27, Surrogate_id_SYMB_27=28, Surrogate_id_SYMB_28=29, 
		Surrogate_id_SYMB_29=30, Surrogate_id_SYMB_30=31, Surrogate_id_SYMB_31=32, 
		Surrogate_id_SYMB_32=33, Surrogate_id_SYMB_33=34, Surrogate_id_SYMB_34=35, 
		Surrogate_id_SYMB_35=36, Surrogate_id_SYMB_36=37, Surrogate_id_SYMB_37=38, 
		Surrogate_id_SYMB_38=39, Surrogate_id_SYMB_39=40, COMMENT_antlr_builtin=41, 
		MULTICOMMENT_antlr_builtin=42, Identifier=43, DOUBLE=44, INTEGER=45, WS=46, 
		ErrorToken=47, STRING=48, CHAR=49, STRINGESC=50;
	public const int
		RULE_start_LGrammar = 0, RULE_start_LDef = 1, RULE_start_ListLDef = 2, 
		RULE_start_ListIdentifier = 3, RULE_start_Grammar = 4, RULE_start_ListDef = 5, 
		RULE_start_Def = 6, RULE_start_Item = 7, RULE_start_ListItem = 8, RULE_start_Cat = 9, 
		RULE_start_Label = 10, RULE_start_LabelId = 11, RULE_start_ProfItem = 12, 
		RULE_start_IntList = 13, RULE_start_ListInteger = 14, RULE_start_ListIntList = 15, 
		RULE_start_ListProfItem = 16, RULE_start_Arg = 17, RULE_start_ListArg = 18, 
		RULE_start_Separation = 19, RULE_start_ListString = 20, RULE_start_Exp = 21, 
		RULE_start_Exp1 = 22, RULE_start_Exp2 = 23, RULE_start_ListExp = 24, RULE_start_ListExp2 = 25, 
		RULE_start_RHS = 26, RULE_start_ListRHS = 27, RULE_start_MinimumSize = 28, 
		RULE_start_Reg = 29, RULE_start_Reg1 = 30, RULE_start_Reg2 = 31, RULE_start_Reg3 = 32, 
		RULE_lGrammar = 33, RULE_lDef = 34, RULE_listLDef = 35, RULE_listIdentifier = 36, 
		RULE_grammar_ = 37, RULE_listDef = 38, RULE_def = 39, RULE_item = 40, 
		RULE_listItem = 41, RULE_cat = 42, RULE_label = 43, RULE_labelId = 44, 
		RULE_profItem = 45, RULE_intList = 46, RULE_listInteger = 47, RULE_listIntList = 48, 
		RULE_listProfItem = 49, RULE_arg = 50, RULE_listArg = 51, RULE_separation = 52, 
		RULE_listString = 53, RULE_exp = 54, RULE_exp1 = 55, RULE_exp2 = 56, RULE_listExp = 57, 
		RULE_listExp2 = 58, RULE_rHS = 59, RULE_listRHS = 60, RULE_minimumSize = 61, 
		RULE_reg = 62, RULE_reg1 = 63, RULE_reg2 = 64, RULE_reg3 = 65;
	public static readonly string[] ruleNames = {
		"start_LGrammar", "start_LDef", "start_ListLDef", "start_ListIdentifier", 
		"start_Grammar", "start_ListDef", "start_Def", "start_Item", "start_ListItem", 
		"start_Cat", "start_Label", "start_LabelId", "start_ProfItem", "start_IntList", 
		"start_ListInteger", "start_ListIntList", "start_ListProfItem", "start_Arg", 
		"start_ListArg", "start_Separation", "start_ListString", "start_Exp", 
		"start_Exp1", "start_Exp2", "start_ListExp", "start_ListExp2", "start_RHS", 
		"start_ListRHS", "start_MinimumSize", "start_Reg", "start_Reg1", "start_Reg2", 
		"start_Reg3", "lGrammar", "lDef", "listLDef", "listIdentifier", "grammar_", 
		"listDef", "def", "item", "listItem", "cat", "label", "labelId", "profItem", 
		"intList", "listInteger", "listIntList", "listProfItem", "arg", "listArg", 
		"separation", "listString", "exp", "exp1", "exp2", "listExp", "listExp2", 
		"rHS", "listRHS", "minimumSize", "reg", "reg1", "reg2", "reg3"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "';'", "','", "'.'", "'::='", "'['", "']'", "'_'", "'('", 
		"')'", "'='", "'|'", "'-'", "'*'", "'+'", "'?'", "'{'", "'}'", "'char'", 
		"'coercions'", "'comment'", "'define'", "'delimiters'", "'digit'", "'entrypoints'", 
		"'eps'", "'internal'", "'layout'", "'letter'", "'lower'", "'nonempty'", 
		"'position'", "'rules'", "'separator'", "'stop'", "'terminator'", "'token'", 
		"'toplevel'", "'upper'", "'views'", null, null, null, null, null, null, 
		null, "'\"'", "'''", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Surrogate_id_SYMB_0", "Surrogate_id_SYMB_1", "Surrogate_id_SYMB_2", 
		"Surrogate_id_SYMB_3", "Surrogate_id_SYMB_4", "Surrogate_id_SYMB_5", "Surrogate_id_SYMB_6", 
		"Surrogate_id_SYMB_7", "Surrogate_id_SYMB_8", "Surrogate_id_SYMB_9", "Surrogate_id_SYMB_10", 
		"Surrogate_id_SYMB_11", "Surrogate_id_SYMB_12", "Surrogate_id_SYMB_13", 
		"Surrogate_id_SYMB_14", "Surrogate_id_SYMB_15", "Surrogate_id_SYMB_16", 
		"Surrogate_id_SYMB_17", "Surrogate_id_SYMB_18", "Surrogate_id_SYMB_19", 
		"Surrogate_id_SYMB_20", "Surrogate_id_SYMB_21", "Surrogate_id_SYMB_22", 
		"Surrogate_id_SYMB_23", "Surrogate_id_SYMB_24", "Surrogate_id_SYMB_25", 
		"Surrogate_id_SYMB_26", "Surrogate_id_SYMB_27", "Surrogate_id_SYMB_28", 
		"Surrogate_id_SYMB_29", "Surrogate_id_SYMB_30", "Surrogate_id_SYMB_31", 
		"Surrogate_id_SYMB_32", "Surrogate_id_SYMB_33", "Surrogate_id_SYMB_34", 
		"Surrogate_id_SYMB_35", "Surrogate_id_SYMB_36", "Surrogate_id_SYMB_37", 
		"Surrogate_id_SYMB_38", "Surrogate_id_SYMB_39", "COMMENT_antlr_builtin", 
		"MULTICOMMENT_antlr_builtin", "Identifier", "DOUBLE", "INTEGER", "WS", 
		"ErrorToken", "STRING", "CHAR", "STRINGESC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "lbnfParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static lbnfParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public lbnfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public lbnfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Start_LGrammarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LGrammarContext lGrammar() {
			return GetRuleContext<LGrammarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_LGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_LGrammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_LGrammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_LGrammar(this);
		}
	}

	[RuleVersion(0)]
	public Start_LGrammarContext start_LGrammar() {
		Start_LGrammarContext _localctx = new Start_LGrammarContext(Context, State);
		EnterRule(_localctx, 0, RULE_start_LGrammar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			lGrammar();
			State = 133;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_LDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LDefContext lDef() {
			return GetRuleContext<LDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_LDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_LDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_LDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_LDef(this);
		}
	}

	[RuleVersion(0)]
	public Start_LDefContext start_LDef() {
		Start_LDefContext _localctx = new Start_LDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_start_LDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			lDef();
			State = 136;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListLDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListLDefContext listLDef() {
			return GetRuleContext<ListLDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListLDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListLDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListLDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListLDef(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListLDefContext start_ListLDef() {
		Start_ListLDefContext _localctx = new Start_ListLDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_start_ListLDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			listLDef();
			State = 139;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListIdentifierContext listIdentifier() {
			return GetRuleContext<ListIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListIdentifierContext start_ListIdentifier() {
		Start_ListIdentifierContext _localctx = new Start_ListIdentifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_start_ListIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			listIdentifier();
			State = 142;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_GrammarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grammar_Context grammar_() {
			return GetRuleContext<Grammar_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_GrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Grammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Grammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Grammar(this);
		}
	}

	[RuleVersion(0)]
	public Start_GrammarContext start_Grammar() {
		Start_GrammarContext _localctx = new Start_GrammarContext(Context, State);
		EnterRule(_localctx, 8, RULE_start_Grammar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			grammar_();
			State = 145;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListDefContext listDef() {
			return GetRuleContext<ListDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListDef(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListDefContext start_ListDef() {
		Start_ListDefContext _localctx = new Start_ListDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_start_ListDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			listDef();
			State = 148;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_DefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefContext def() {
			return GetRuleContext<DefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Def(this);
		}
	}

	[RuleVersion(0)]
	public Start_DefContext start_Def() {
		Start_DefContext _localctx = new Start_DefContext(Context, State);
		EnterRule(_localctx, 12, RULE_start_Def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			def();
			State = 151;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Item(this);
		}
	}

	[RuleVersion(0)]
	public Start_ItemContext start_Item() {
		Start_ItemContext _localctx = new Start_ItemContext(Context, State);
		EnterRule(_localctx, 14, RULE_start_Item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			item();
			State = 154;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListItemContext listItem() {
			return GetRuleContext<ListItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListItem(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListItemContext start_ListItem() {
		Start_ListItemContext _localctx = new Start_ListItemContext(Context, State);
		EnterRule(_localctx, 16, RULE_start_ListItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			listItem(0);
			State = 157;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_CatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CatContext cat() {
			return GetRuleContext<CatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_CatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Cat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Cat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Cat(this);
		}
	}

	[RuleVersion(0)]
	public Start_CatContext start_Cat() {
		Start_CatContext _localctx = new Start_CatContext(Context, State);
		EnterRule(_localctx, 18, RULE_start_Cat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			cat();
			State = 160;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Label(this);
		}
	}

	[RuleVersion(0)]
	public Start_LabelContext start_Label() {
		Start_LabelContext _localctx = new Start_LabelContext(Context, State);
		EnterRule(_localctx, 20, RULE_start_Label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			label();
			State = 163;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_LabelIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelIdContext labelId() {
			return GetRuleContext<LabelIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_LabelIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_LabelId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_LabelId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_LabelId(this);
		}
	}

	[RuleVersion(0)]
	public Start_LabelIdContext start_LabelId() {
		Start_LabelIdContext _localctx = new Start_LabelIdContext(Context, State);
		EnterRule(_localctx, 22, RULE_start_LabelId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			labelId();
			State = 166;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ProfItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProfItemContext profItem() {
			return GetRuleContext<ProfItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ProfItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ProfItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ProfItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ProfItem(this);
		}
	}

	[RuleVersion(0)]
	public Start_ProfItemContext start_ProfItem() {
		Start_ProfItemContext _localctx = new Start_ProfItemContext(Context, State);
		EnterRule(_localctx, 24, RULE_start_ProfItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			profItem();
			State = 169;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_IntListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntListContext intList() {
			return GetRuleContext<IntListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_IntListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_IntList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_IntList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_IntList(this);
		}
	}

	[RuleVersion(0)]
	public Start_IntListContext start_IntList() {
		Start_IntListContext _localctx = new Start_IntListContext(Context, State);
		EnterRule(_localctx, 26, RULE_start_IntList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			intList();
			State = 172;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListIntegerContext listInteger() {
			return GetRuleContext<ListIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListInteger(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListIntegerContext start_ListInteger() {
		Start_ListIntegerContext _localctx = new Start_ListIntegerContext(Context, State);
		EnterRule(_localctx, 28, RULE_start_ListInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			listInteger();
			State = 175;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListIntListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListIntListContext listIntList() {
			return GetRuleContext<ListIntListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListIntListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListIntList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListIntList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListIntList(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListIntListContext start_ListIntList() {
		Start_ListIntListContext _localctx = new Start_ListIntListContext(Context, State);
		EnterRule(_localctx, 30, RULE_start_ListIntList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			listIntList();
			State = 178;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListProfItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListProfItemContext listProfItem() {
			return GetRuleContext<ListProfItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListProfItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListProfItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListProfItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListProfItem(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListProfItemContext start_ListProfItem() {
		Start_ListProfItemContext _localctx = new Start_ListProfItemContext(Context, State);
		EnterRule(_localctx, 32, RULE_start_ListProfItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			listProfItem();
			State = 181;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Arg(this);
		}
	}

	[RuleVersion(0)]
	public Start_ArgContext start_Arg() {
		Start_ArgContext _localctx = new Start_ArgContext(Context, State);
		EnterRule(_localctx, 34, RULE_start_Arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			arg();
			State = 184;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListArgContext listArg() {
			return GetRuleContext<ListArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListArg(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListArgContext start_ListArg() {
		Start_ListArgContext _localctx = new Start_ListArgContext(Context, State);
		EnterRule(_localctx, 36, RULE_start_ListArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			listArg(0);
			State = 187;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_SeparationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeparationContext separation() {
			return GetRuleContext<SeparationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_SeparationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Separation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Separation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Separation(this);
		}
	}

	[RuleVersion(0)]
	public Start_SeparationContext start_Separation() {
		Start_SeparationContext _localctx = new Start_SeparationContext(Context, State);
		EnterRule(_localctx, 38, RULE_start_Separation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			separation();
			State = 190;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListStringContext listString() {
			return GetRuleContext<ListStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListString(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListStringContext start_ListString() {
		Start_ListStringContext _localctx = new Start_ListStringContext(Context, State);
		EnterRule(_localctx, 40, RULE_start_ListString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			listString();
			State = 193;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Exp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Exp(this);
		}
	}

	[RuleVersion(0)]
	public Start_ExpContext start_Exp() {
		Start_ExpContext _localctx = new Start_ExpContext(Context, State);
		EnterRule(_localctx, 42, RULE_start_Exp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			exp();
			State = 196;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_Exp1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exp1Context exp1() {
			return GetRuleContext<Exp1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_Exp1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Exp1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Exp1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Exp1(this);
		}
	}

	[RuleVersion(0)]
	public Start_Exp1Context start_Exp1() {
		Start_Exp1Context _localctx = new Start_Exp1Context(Context, State);
		EnterRule(_localctx, 44, RULE_start_Exp1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			exp1();
			State = 199;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_Exp2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exp2Context exp2() {
			return GetRuleContext<Exp2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_Exp2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Exp2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Exp2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Exp2(this);
		}
	}

	[RuleVersion(0)]
	public Start_Exp2Context start_Exp2() {
		Start_Exp2Context _localctx = new Start_Exp2Context(Context, State);
		EnterRule(_localctx, 46, RULE_start_Exp2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			exp2();
			State = 202;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListExpContext listExp() {
			return GetRuleContext<ListExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListExp(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListExpContext start_ListExp() {
		Start_ListExpContext _localctx = new Start_ListExpContext(Context, State);
		EnterRule(_localctx, 48, RULE_start_ListExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			listExp();
			State = 205;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListExp2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListExp2Context listExp2() {
			return GetRuleContext<ListExp2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListExp2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListExp2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListExp2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListExp2(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListExp2Context start_ListExp2() {
		Start_ListExp2Context _localctx = new Start_ListExp2Context(Context, State);
		EnterRule(_localctx, 50, RULE_start_ListExp2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			listExp2();
			State = 208;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_RHSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RHSContext rHS() {
			return GetRuleContext<RHSContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_RHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_RHS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_RHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_RHS(this);
		}
	}

	[RuleVersion(0)]
	public Start_RHSContext start_RHS() {
		Start_RHSContext _localctx = new Start_RHSContext(Context, State);
		EnterRule(_localctx, 52, RULE_start_RHS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			rHS();
			State = 211;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_ListRHSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListRHSContext listRHS() {
			return GetRuleContext<ListRHSContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_ListRHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_ListRHS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_ListRHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_ListRHS(this);
		}
	}

	[RuleVersion(0)]
	public Start_ListRHSContext start_ListRHS() {
		Start_ListRHSContext _localctx = new Start_ListRHSContext(Context, State);
		EnterRule(_localctx, 54, RULE_start_ListRHS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			listRHS();
			State = 214;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_MinimumSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MinimumSizeContext minimumSize() {
			return GetRuleContext<MinimumSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_MinimumSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_MinimumSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_MinimumSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_MinimumSize(this);
		}
	}

	[RuleVersion(0)]
	public Start_MinimumSizeContext start_MinimumSize() {
		Start_MinimumSizeContext _localctx = new Start_MinimumSizeContext(Context, State);
		EnterRule(_localctx, 56, RULE_start_MinimumSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			minimumSize();
			State = 217;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_RegContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_RegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Reg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Reg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Reg(this);
		}
	}

	[RuleVersion(0)]
	public Start_RegContext start_Reg() {
		Start_RegContext _localctx = new Start_RegContext(Context, State);
		EnterRule(_localctx, 58, RULE_start_Reg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			reg(0);
			State = 220;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_Reg1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reg1Context reg1() {
			return GetRuleContext<Reg1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_Reg1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Reg1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Reg1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Reg1(this);
		}
	}

	[RuleVersion(0)]
	public Start_Reg1Context start_Reg1() {
		Start_Reg1Context _localctx = new Start_Reg1Context(Context, State);
		EnterRule(_localctx, 60, RULE_start_Reg1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			reg1(0);
			State = 223;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_Reg2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reg2Context reg2() {
			return GetRuleContext<Reg2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_Reg2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Reg2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Reg2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Reg2(this);
		}
	}

	[RuleVersion(0)]
	public Start_Reg2Context start_Reg2() {
		Start_Reg2Context _localctx = new Start_Reg2Context(Context, State);
		EnterRule(_localctx, 62, RULE_start_Reg2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			reg2(0);
			State = 226;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_Reg3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reg3Context reg3() {
			return GetRuleContext<Reg3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(lbnfParser.Eof, 0); }
		public Start_Reg3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_Reg3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterStart_Reg3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitStart_Reg3(this);
		}
	}

	[RuleVersion(0)]
	public Start_Reg3Context start_Reg3() {
		Start_Reg3Context _localctx = new Start_Reg3Context(Context, State);
		EnterRule(_localctx, 64, RULE_start_Reg3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			reg3(0);
			State = 229;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LGrammarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListLDefContext listLDef() {
			return GetRuleContext<ListLDefContext>(0);
		}
		public LGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lGrammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterLGrammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitLGrammar(this);
		}
	}

	[RuleVersion(0)]
	public LGrammarContext lGrammar() {
		LGrammarContext _localctx = new LGrammarContext(Context, State);
		EnterRule(_localctx, 66, RULE_lGrammar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			listLDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefContext def() {
			return GetRuleContext<DefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListIdentifierContext listIdentifier() {
			return GetRuleContext<ListIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0() { return GetToken(lbnfParser.Surrogate_id_SYMB_0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_39() { return GetToken(lbnfParser.Surrogate_id_SYMB_39, 0); }
		public LDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterLDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitLDef(this);
		}
	}

	[RuleVersion(0)]
	public LDefContext lDef() {
		LDefContext _localctx = new LDefContext(Context, State);
		EnterRule(_localctx, 68, RULE_lDef);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				def();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				listIdentifier();
				State = 235;
				Match(Surrogate_id_SYMB_0);
				State = 236;
				def();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238;
				Match(Surrogate_id_SYMB_39);
				State = 239;
				listIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LDefContext lDef() {
			return GetRuleContext<LDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_1() { return GetToken(lbnfParser.Surrogate_id_SYMB_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListLDefContext listLDef() {
			return GetRuleContext<ListLDefContext>(0);
		}
		public ListLDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListLDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListLDef(this);
		}
	}

	[RuleVersion(0)]
	public ListLDefContext listLDef() {
		ListLDefContext _localctx = new ListLDefContext(Context, State);
		EnterRule(_localctx, 70, RULE_listLDef);
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243;
				lDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244;
				lDef();
				State = 245;
				Match(Surrogate_id_SYMB_1);
				State = 246;
				listLDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 248;
				Match(Surrogate_id_SYMB_1);
				State = 249;
				listLDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(lbnfParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(lbnfParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListIdentifierContext listIdentifier() {
			return GetRuleContext<ListIdentifierContext>(0);
		}
		public ListIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public ListIdentifierContext listIdentifier() {
		ListIdentifierContext _localctx = new ListIdentifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_listIdentifier);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				Match(Identifier);
				State = 254;
				Match(Surrogate_id_SYMB_2);
				State = 255;
				listIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListDefContext listDef() {
			return GetRuleContext<ListDefContext>(0);
		}
		public Grammar_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitGrammar_(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_Context grammar_() {
		Grammar_Context _localctx = new Grammar_Context(Context, State);
		EnterRule(_localctx, 74, RULE_grammar_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			listDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefContext def() {
			return GetRuleContext<DefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_1() { return GetToken(lbnfParser.Surrogate_id_SYMB_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListDefContext listDef() {
			return GetRuleContext<ListDefContext>(0);
		}
		public ListDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListDef(this);
		}
	}

	[RuleVersion(0)]
	public ListDefContext listDef() {
		ListDefContext _localctx = new ListDefContext(Context, State);
		EnterRule(_localctx, 76, RULE_listDef);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				def();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 262;
				def();
				State = 263;
				Match(Surrogate_id_SYMB_1);
				State = 264;
				listDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 266;
				Match(Surrogate_id_SYMB_1);
				State = 267;
				listDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_3() { return GetToken(lbnfParser.Surrogate_id_SYMB_3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CatContext cat() {
			return GetRuleContext<CatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_4() { return GetToken(lbnfParser.Surrogate_id_SYMB_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListItemContext listItem() {
			return GetRuleContext<ListItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_20() { return GetToken(lbnfParser.Surrogate_id_SYMB_20, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(lbnfParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(lbnfParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_26() { return GetToken(lbnfParser.Surrogate_id_SYMB_26, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_36() { return GetToken(lbnfParser.Surrogate_id_SYMB_36, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(lbnfParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_31() { return GetToken(lbnfParser.Surrogate_id_SYMB_31, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_24() { return GetToken(lbnfParser.Surrogate_id_SYMB_24, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListIdentifierContext listIdentifier() {
			return GetRuleContext<ListIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_33() { return GetToken(lbnfParser.Surrogate_id_SYMB_33, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MinimumSizeContext minimumSize() {
			return GetRuleContext<MinimumSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_35() { return GetToken(lbnfParser.Surrogate_id_SYMB_35, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_22() { return GetToken(lbnfParser.Surrogate_id_SYMB_22, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeparationContext separation() {
			return GetRuleContext<SeparationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_19() { return GetToken(lbnfParser.Surrogate_id_SYMB_19, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(lbnfParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_32() { return GetToken(lbnfParser.Surrogate_id_SYMB_32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListRHSContext listRHS() {
			return GetRuleContext<ListRHSContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_21() { return GetToken(lbnfParser.Surrogate_id_SYMB_21, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListArgContext listArg() {
			return GetRuleContext<ListArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_10() { return GetToken(lbnfParser.Surrogate_id_SYMB_10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_27() { return GetToken(lbnfParser.Surrogate_id_SYMB_27, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListStringContext listString() {
			return GetRuleContext<ListStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_34() { return GetToken(lbnfParser.Surrogate_id_SYMB_34, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_37() { return GetToken(lbnfParser.Surrogate_id_SYMB_37, 0); }
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitDef(this);
		}
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 78, RULE_def);
		try {
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				label();
				State = 271;
				Match(Surrogate_id_SYMB_3);
				State = 272;
				cat();
				State = 273;
				Match(Surrogate_id_SYMB_4);
				State = 274;
				listItem(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				Match(Surrogate_id_SYMB_20);
				State = 277;
				Match(STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				Match(Surrogate_id_SYMB_20);
				State = 279;
				Match(STRING);
				State = 280;
				Match(STRING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 281;
				Match(Surrogate_id_SYMB_26);
				State = 282;
				label();
				State = 283;
				Match(Surrogate_id_SYMB_3);
				State = 284;
				cat();
				State = 285;
				Match(Surrogate_id_SYMB_4);
				State = 286;
				listItem(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 288;
				Match(Surrogate_id_SYMB_36);
				State = 289;
				Match(Identifier);
				State = 290;
				reg(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 291;
				Match(Surrogate_id_SYMB_31);
				State = 292;
				Match(Surrogate_id_SYMB_36);
				State = 293;
				Match(Identifier);
				State = 294;
				reg(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 295;
				Match(Surrogate_id_SYMB_24);
				State = 296;
				listIdentifier();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 297;
				Match(Surrogate_id_SYMB_33);
				State = 298;
				minimumSize();
				State = 299;
				cat();
				State = 300;
				Match(STRING);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 302;
				Match(Surrogate_id_SYMB_35);
				State = 303;
				minimumSize();
				State = 304;
				cat();
				State = 305;
				Match(STRING);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 307;
				Match(Surrogate_id_SYMB_22);
				State = 308;
				cat();
				State = 309;
				Match(STRING);
				State = 310;
				Match(STRING);
				State = 311;
				separation();
				State = 312;
				minimumSize();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 314;
				Match(Surrogate_id_SYMB_19);
				State = 315;
				Match(Identifier);
				State = 316;
				Match(INTEGER);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 317;
				Match(Surrogate_id_SYMB_32);
				State = 318;
				Match(Identifier);
				State = 319;
				Match(Surrogate_id_SYMB_4);
				State = 320;
				listRHS();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 321;
				Match(Surrogate_id_SYMB_21);
				State = 322;
				Match(Identifier);
				State = 323;
				listArg(0);
				State = 324;
				Match(Surrogate_id_SYMB_10);
				State = 325;
				exp();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 327;
				Match(Surrogate_id_SYMB_27);
				State = 328;
				listString();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 329;
				Match(Surrogate_id_SYMB_27);
				State = 330;
				Match(Surrogate_id_SYMB_34);
				State = 331;
				listString();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 332;
				Match(Surrogate_id_SYMB_27);
				State = 333;
				Match(Surrogate_id_SYMB_37);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(lbnfParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CatContext cat() {
			return GetRuleContext<CatContext>(0);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 80, RULE_item);
		try {
			State = 338;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 336;
				Match(STRING);
				}
				break;
			case Surrogate_id_SYMB_5:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337;
				cat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListItemContext listItem() {
			return GetRuleContext<ListItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		public ListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListItem(this);
		}
	}

	[RuleVersion(0)]
	public ListItemContext listItem() {
		return listItem(0);
	}

	private ListItemContext listItem(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ListItemContext _localctx = new ListItemContext(Context, _parentState);
		ListItemContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_listItem, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ListItemContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_listItem);
					State = 341;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 342;
					item();
					}
					} 
				}
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(lbnfParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CatContext cat() {
			return GetRuleContext<CatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(lbnfParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(lbnfParser.Identifier, 0); }
		public CatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterCat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitCat(this);
		}
	}

	[RuleVersion(0)]
	public CatContext cat() {
		CatContext _localctx = new CatContext(Context, State);
		EnterRule(_localctx, 84, RULE_cat);
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Surrogate_id_SYMB_5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				Match(Surrogate_id_SYMB_5);
				State = 349;
				cat();
				State = 350;
				Match(Surrogate_id_SYMB_6);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 352;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelIdContext[] labelId() {
			return GetRuleContexts<LabelIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelIdContext labelId(int i) {
			return GetRuleContext<LabelIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListProfItemContext listProfItem() {
			return GetRuleContext<ListProfItemContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 86, RULE_label);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				labelId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				labelId();
				State = 357;
				listProfItem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359;
				labelId();
				State = 360;
				labelId();
				State = 361;
				listProfItem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 363;
				labelId();
				State = 364;
				labelId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(lbnfParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_7() { return GetToken(lbnfParser.Surrogate_id_SYMB_7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(lbnfParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(lbnfParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_8() { return GetToken(lbnfParser.Surrogate_id_SYMB_8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0() { return GetToken(lbnfParser.Surrogate_id_SYMB_0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_9() { return GetToken(lbnfParser.Surrogate_id_SYMB_9, 0); }
		public LabelIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterLabelId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitLabelId(this);
		}
	}

	[RuleVersion(0)]
	public LabelIdContext labelId() {
		LabelIdContext _localctx = new LabelIdContext(Context, State);
		EnterRule(_localctx, 88, RULE_labelId);
		try {
			State = 380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369;
				Match(Surrogate_id_SYMB_7);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 370;
				Match(Surrogate_id_SYMB_5);
				State = 371;
				Match(Surrogate_id_SYMB_6);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 372;
				Match(Surrogate_id_SYMB_8);
				State = 373;
				Match(Surrogate_id_SYMB_0);
				State = 374;
				Match(Surrogate_id_SYMB_9);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 375;
				Match(Surrogate_id_SYMB_8);
				State = 376;
				Match(Surrogate_id_SYMB_0);
				State = 377;
				Match(Surrogate_id_SYMB_5);
				State = 378;
				Match(Surrogate_id_SYMB_6);
				State = 379;
				Match(Surrogate_id_SYMB_9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_8() { return GetToken(lbnfParser.Surrogate_id_SYMB_8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_5() { return GetTokens(lbnfParser.Surrogate_id_SYMB_5); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5(int i) {
			return GetToken(lbnfParser.Surrogate_id_SYMB_5, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListIntListContext listIntList() {
			return GetRuleContext<ListIntListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Surrogate_id_SYMB_6() { return GetTokens(lbnfParser.Surrogate_id_SYMB_6); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6(int i) {
			return GetToken(lbnfParser.Surrogate_id_SYMB_6, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(lbnfParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListIntegerContext listInteger() {
			return GetRuleContext<ListIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_9() { return GetToken(lbnfParser.Surrogate_id_SYMB_9, 0); }
		public ProfItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterProfItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitProfItem(this);
		}
	}

	[RuleVersion(0)]
	public ProfItemContext profItem() {
		ProfItemContext _localctx = new ProfItemContext(Context, State);
		EnterRule(_localctx, 90, RULE_profItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(Surrogate_id_SYMB_8);
			State = 383;
			Match(Surrogate_id_SYMB_5);
			State = 384;
			listIntList();
			State = 385;
			Match(Surrogate_id_SYMB_6);
			State = 386;
			Match(Surrogate_id_SYMB_2);
			State = 387;
			Match(Surrogate_id_SYMB_5);
			State = 388;
			listInteger();
			State = 389;
			Match(Surrogate_id_SYMB_6);
			State = 390;
			Match(Surrogate_id_SYMB_9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(lbnfParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListIntegerContext listInteger() {
			return GetRuleContext<ListIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(lbnfParser.Surrogate_id_SYMB_6, 0); }
		public IntListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterIntList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitIntList(this);
		}
	}

	[RuleVersion(0)]
	public IntListContext intList() {
		IntListContext _localctx = new IntListContext(Context, State);
		EnterRule(_localctx, 92, RULE_intList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(Surrogate_id_SYMB_5);
			State = 393;
			listInteger();
			State = 394;
			Match(Surrogate_id_SYMB_6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(lbnfParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(lbnfParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListIntegerContext listInteger() {
			return GetRuleContext<ListIntegerContext>(0);
		}
		public ListIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListInteger(this);
		}
	}

	[RuleVersion(0)]
	public ListIntegerContext listInteger() {
		ListIntegerContext _localctx = new ListIntegerContext(Context, State);
		EnterRule(_localctx, 94, RULE_listInteger);
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 397;
				Match(INTEGER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 398;
				Match(INTEGER);
				State = 399;
				Match(Surrogate_id_SYMB_2);
				State = 400;
				listInteger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListIntListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntListContext intList() {
			return GetRuleContext<IntListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(lbnfParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListIntListContext listIntList() {
			return GetRuleContext<ListIntListContext>(0);
		}
		public ListIntListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listIntList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListIntList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListIntList(this);
		}
	}

	[RuleVersion(0)]
	public ListIntListContext listIntList() {
		ListIntListContext _localctx = new ListIntListContext(Context, State);
		EnterRule(_localctx, 96, RULE_listIntList);
		try {
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				intList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 405;
				intList();
				State = 406;
				Match(Surrogate_id_SYMB_2);
				State = 407;
				listIntList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListProfItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProfItemContext profItem() {
			return GetRuleContext<ProfItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListProfItemContext listProfItem() {
			return GetRuleContext<ListProfItemContext>(0);
		}
		public ListProfItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listProfItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListProfItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListProfItem(this);
		}
	}

	[RuleVersion(0)]
	public ListProfItemContext listProfItem() {
		ListProfItemContext _localctx = new ListProfItemContext(Context, State);
		EnterRule(_localctx, 98, RULE_listProfItem);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411;
				profItem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412;
				profItem();
				State = 413;
				listProfItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(lbnfParser.Identifier, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 100, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListArgContext listArg() {
			return GetRuleContext<ListArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public ListArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListArg(this);
		}
	}

	[RuleVersion(0)]
	public ListArgContext listArg() {
		return listArg(0);
	}

	private ListArgContext listArg(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ListArgContext _localctx = new ListArgContext(Context, _parentState);
		ListArgContext _prevctx = _localctx;
		int _startState = 102;
		EnterRecursionRule(_localctx, 102, RULE_listArg, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 424;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ListArgContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_listArg);
					State = 420;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 421;
					arg();
					}
					} 
				}
				State = 426;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SeparationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_35() { return GetToken(lbnfParser.Surrogate_id_SYMB_35, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(lbnfParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_33() { return GetToken(lbnfParser.Surrogate_id_SYMB_33, 0); }
		public SeparationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterSeparation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitSeparation(this);
		}
	}

	[RuleVersion(0)]
	public SeparationContext separation() {
		SeparationContext _localctx = new SeparationContext(Context, State);
		EnterRule(_localctx, 104, RULE_separation);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case Surrogate_id_SYMB_1:
			case Surrogate_id_SYMB_30:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case Surrogate_id_SYMB_35:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428;
				Match(Surrogate_id_SYMB_35);
				State = 429;
				Match(STRING);
				}
				break;
			case Surrogate_id_SYMB_33:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430;
				Match(Surrogate_id_SYMB_33);
				State = 431;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(lbnfParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(lbnfParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListStringContext listString() {
			return GetRuleContext<ListStringContext>(0);
		}
		public ListStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListString(this);
		}
	}

	[RuleVersion(0)]
	public ListStringContext listString() {
		ListStringContext _localctx = new ListStringContext(Context, State);
		EnterRule(_localctx, 106, RULE_listString);
		try {
			State = 438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				Match(STRING);
				State = 436;
				Match(Surrogate_id_SYMB_2);
				State = 437;
				listString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exp1Context exp1() {
			return GetRuleContext<Exp1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_0() { return GetToken(lbnfParser.Surrogate_id_SYMB_0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 108, RULE_exp);
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440;
				exp1();
				State = 441;
				Match(Surrogate_id_SYMB_0);
				State = 442;
				exp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444;
				exp1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(lbnfParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListExp2Context listExp2() {
			return GetRuleContext<ListExp2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exp2Context exp2() {
			return GetRuleContext<Exp2Context>(0);
		}
		public Exp1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterExp1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitExp1(this);
		}
	}

	[RuleVersion(0)]
	public Exp1Context exp1() {
		Exp1Context _localctx = new Exp1Context(Context, State);
		EnterRule(_localctx, 110, RULE_exp1);
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				Match(Identifier);
				State = 448;
				listExp2();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449;
				exp2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(lbnfParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(lbnfParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(lbnfParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(lbnfParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(lbnfParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(lbnfParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListExpContext listExp() {
			return GetRuleContext<ListExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(lbnfParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_8() { return GetToken(lbnfParser.Surrogate_id_SYMB_8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_9() { return GetToken(lbnfParser.Surrogate_id_SYMB_9, 0); }
		public Exp2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterExp2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitExp2(this);
		}
	}

	[RuleVersion(0)]
	public Exp2Context exp2() {
		Exp2Context _localctx = new Exp2Context(Context, State);
		EnterRule(_localctx, 112, RULE_exp2);
		try {
			State = 465;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 452;
				Match(Identifier);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 453;
				Match(INTEGER);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 454;
				Match(CHAR);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 455;
				Match(STRING);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 456;
				Match(DOUBLE);
				}
				break;
			case Surrogate_id_SYMB_5:
				EnterOuterAlt(_localctx, 6);
				{
				State = 457;
				Match(Surrogate_id_SYMB_5);
				State = 458;
				listExp();
				State = 459;
				Match(Surrogate_id_SYMB_6);
				}
				break;
			case Surrogate_id_SYMB_8:
				EnterOuterAlt(_localctx, 7);
				{
				State = 461;
				Match(Surrogate_id_SYMB_8);
				State = 462;
				exp();
				State = 463;
				Match(Surrogate_id_SYMB_9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_2() { return GetToken(lbnfParser.Surrogate_id_SYMB_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListExpContext listExp() {
			return GetRuleContext<ListExpContext>(0);
		}
		public ListExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListExp(this);
		}
	}

	[RuleVersion(0)]
	public ListExpContext listExp() {
		ListExpContext _localctx = new ListExpContext(Context, State);
		EnterRule(_localctx, 114, RULE_listExp);
		try {
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468;
				exp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 469;
				exp();
				State = 470;
				Match(Surrogate_id_SYMB_2);
				State = 471;
				listExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListExp2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exp2Context exp2() {
			return GetRuleContext<Exp2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListExp2Context listExp2() {
			return GetRuleContext<ListExp2Context>(0);
		}
		public ListExp2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listExp2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListExp2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListExp2(this);
		}
	}

	[RuleVersion(0)]
	public ListExp2Context listExp2() {
		ListExp2Context _localctx = new ListExp2Context(Context, State);
		EnterRule(_localctx, 116, RULE_listExp2);
		try {
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				exp2();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				exp2();
				State = 477;
				listExp2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RHSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListItemContext listItem() {
			return GetRuleContext<ListItemContext>(0);
		}
		public RHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rHS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterRHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitRHS(this);
		}
	}

	[RuleVersion(0)]
	public RHSContext rHS() {
		RHSContext _localctx = new RHSContext(Context, State);
		EnterRule(_localctx, 118, RULE_rHS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			listItem(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListRHSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RHSContext rHS() {
			return GetRuleContext<RHSContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_11() { return GetToken(lbnfParser.Surrogate_id_SYMB_11, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListRHSContext listRHS() {
			return GetRuleContext<ListRHSContext>(0);
		}
		public ListRHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listRHS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterListRHS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitListRHS(this);
		}
	}

	[RuleVersion(0)]
	public ListRHSContext listRHS() {
		ListRHSContext _localctx = new ListRHSContext(Context, State);
		EnterRule(_localctx, 120, RULE_listRHS);
		try {
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483;
				rHS();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484;
				rHS();
				State = 485;
				Match(Surrogate_id_SYMB_11);
				State = 486;
				listRHS();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinimumSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_30() { return GetToken(lbnfParser.Surrogate_id_SYMB_30, 0); }
		public MinimumSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minimumSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterMinimumSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitMinimumSize(this);
		}
	}

	[RuleVersion(0)]
	public MinimumSizeContext minimumSize() {
		MinimumSizeContext _localctx = new MinimumSizeContext(Context, State);
		EnterRule(_localctx, 122, RULE_minimumSize);
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Surrogate_id_SYMB_30:
				EnterOuterAlt(_localctx, 1);
				{
				State = 490;
				Match(Surrogate_id_SYMB_30);
				}
				break;
			case Eof:
			case Surrogate_id_SYMB_1:
			case Surrogate_id_SYMB_5:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reg1Context reg1() {
			return GetRuleContext<Reg1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_11() { return GetToken(lbnfParser.Surrogate_id_SYMB_11, 0); }
		public RegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterReg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitReg(this);
		}
	}

	[RuleVersion(0)]
	public RegContext reg() {
		return reg(0);
	}

	private RegContext reg(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RegContext _localctx = new RegContext(Context, _parentState);
		RegContext _prevctx = _localctx;
		int _startState = 124;
		EnterRecursionRule(_localctx, 124, RULE_reg, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 495;
			reg1(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 502;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RegContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_reg);
					State = 497;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 498;
					Match(Surrogate_id_SYMB_11);
					State = 499;
					reg1(0);
					}
					} 
				}
				State = 504;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Reg1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reg2Context reg2() {
			return GetRuleContext<Reg2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reg1Context reg1() {
			return GetRuleContext<Reg1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_12() { return GetToken(lbnfParser.Surrogate_id_SYMB_12, 0); }
		public Reg1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterReg1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitReg1(this);
		}
	}

	[RuleVersion(0)]
	public Reg1Context reg1() {
		return reg1(0);
	}

	private Reg1Context reg1(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Reg1Context _localctx = new Reg1Context(Context, _parentState);
		Reg1Context _prevctx = _localctx;
		int _startState = 126;
		EnterRecursionRule(_localctx, 126, RULE_reg1, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 506;
			reg2(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 513;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reg1Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_reg1);
					State = 508;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 509;
					Match(Surrogate_id_SYMB_12);
					State = 510;
					reg2(0);
					}
					} 
				}
				State = 515;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Reg2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reg3Context reg3() {
			return GetRuleContext<Reg3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reg2Context reg2() {
			return GetRuleContext<Reg2Context>(0);
		}
		public Reg2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterReg2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitReg2(this);
		}
	}

	[RuleVersion(0)]
	public Reg2Context reg2() {
		return reg2(0);
	}

	private Reg2Context reg2(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Reg2Context _localctx = new Reg2Context(Context, _parentState);
		Reg2Context _prevctx = _localctx;
		int _startState = 128;
		EnterRecursionRule(_localctx, 128, RULE_reg2, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 517;
			reg3(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 523;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Reg2Context(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_reg2);
					State = 519;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 520;
					reg3(0);
					}
					} 
				}
				State = 525;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Reg3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_25() { return GetToken(lbnfParser.Surrogate_id_SYMB_25, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(lbnfParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_5() { return GetToken(lbnfParser.Surrogate_id_SYMB_5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(lbnfParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_6() { return GetToken(lbnfParser.Surrogate_id_SYMB_6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_16() { return GetToken(lbnfParser.Surrogate_id_SYMB_16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_17() { return GetToken(lbnfParser.Surrogate_id_SYMB_17, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_23() { return GetToken(lbnfParser.Surrogate_id_SYMB_23, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_28() { return GetToken(lbnfParser.Surrogate_id_SYMB_28, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_38() { return GetToken(lbnfParser.Surrogate_id_SYMB_38, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_29() { return GetToken(lbnfParser.Surrogate_id_SYMB_29, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_18() { return GetToken(lbnfParser.Surrogate_id_SYMB_18, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_8() { return GetToken(lbnfParser.Surrogate_id_SYMB_8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_9() { return GetToken(lbnfParser.Surrogate_id_SYMB_9, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reg3Context reg3() {
			return GetRuleContext<Reg3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_13() { return GetToken(lbnfParser.Surrogate_id_SYMB_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_14() { return GetToken(lbnfParser.Surrogate_id_SYMB_14, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Surrogate_id_SYMB_15() { return GetToken(lbnfParser.Surrogate_id_SYMB_15, 0); }
		public Reg3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.EnterReg3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlbnfParserListener typedListener = listener as IlbnfParserListener;
			if (typedListener != null) typedListener.ExitReg3(this);
		}
	}

	[RuleVersion(0)]
	public Reg3Context reg3() {
		return reg3(0);
	}

	private Reg3Context reg3(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Reg3Context _localctx = new Reg3Context(Context, _parentState);
		Reg3Context _prevctx = _localctx;
		int _startState = 130;
		EnterRecursionRule(_localctx, 130, RULE_reg3, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Surrogate_id_SYMB_25:
				{
				State = 527;
				Match(Surrogate_id_SYMB_25);
				}
				break;
			case CHAR:
				{
				State = 528;
				Match(CHAR);
				}
				break;
			case Surrogate_id_SYMB_5:
				{
				State = 529;
				Match(Surrogate_id_SYMB_5);
				State = 530;
				Match(STRING);
				State = 531;
				Match(Surrogate_id_SYMB_6);
				}
				break;
			case Surrogate_id_SYMB_16:
				{
				State = 532;
				Match(Surrogate_id_SYMB_16);
				State = 533;
				Match(STRING);
				State = 534;
				Match(Surrogate_id_SYMB_17);
				}
				break;
			case Surrogate_id_SYMB_23:
				{
				State = 535;
				Match(Surrogate_id_SYMB_23);
				}
				break;
			case Surrogate_id_SYMB_28:
				{
				State = 536;
				Match(Surrogate_id_SYMB_28);
				}
				break;
			case Surrogate_id_SYMB_38:
				{
				State = 537;
				Match(Surrogate_id_SYMB_38);
				}
				break;
			case Surrogate_id_SYMB_29:
				{
				State = 538;
				Match(Surrogate_id_SYMB_29);
				}
				break;
			case Surrogate_id_SYMB_18:
				{
				State = 539;
				Match(Surrogate_id_SYMB_18);
				}
				break;
			case Surrogate_id_SYMB_8:
				{
				State = 540;
				Match(Surrogate_id_SYMB_8);
				State = 541;
				reg(0);
				State = 542;
				Match(Surrogate_id_SYMB_9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 554;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 552;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new Reg3Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_reg3);
						State = 546;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 547;
						Match(Surrogate_id_SYMB_13);
						}
						break;
					case 2:
						{
						_localctx = new Reg3Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_reg3);
						State = 548;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 549;
						Match(Surrogate_id_SYMB_14);
						}
						break;
					case 3:
						{
						_localctx = new Reg3Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_reg3);
						State = 550;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 551;
						Match(Surrogate_id_SYMB_15);
						}
						break;
					}
					} 
				}
				State = 556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 41: return listItem_sempred((ListItemContext)_localctx, predIndex);
		case 51: return listArg_sempred((ListArgContext)_localctx, predIndex);
		case 62: return reg_sempred((RegContext)_localctx, predIndex);
		case 63: return reg1_sempred((Reg1Context)_localctx, predIndex);
		case 64: return reg2_sempred((Reg2Context)_localctx, predIndex);
		case 65: return reg3_sempred((Reg3Context)_localctx, predIndex);
		}
		return true;
	}
	private bool listItem_sempred(ListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool listArg_sempred(ListArgContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool reg_sempred(RegContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool reg1_sempred(Reg1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool reg2_sempred(Reg2Context _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool reg3_sempred(Reg3Context _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,50,558,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
		4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,
		1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
		1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
		1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,
		1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
		1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,
		1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,241,8,34,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,3,35,251,8,35,1,36,1,36,1,36,1,36,3,36,257,8,36,
		1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,269,8,38,1,39,1,
		39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,335,8,39,1,40,1,40,3,40,339,8,40,
		1,41,1,41,1,41,5,41,344,8,41,10,41,12,41,347,9,41,1,42,1,42,1,42,1,42,
		1,42,3,42,354,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,3,43,367,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,3,44,381,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
		46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,3,47,402,8,47,1,48,1,48,1,48,
		1,48,1,48,1,48,3,48,410,8,48,1,49,1,49,1,49,1,49,3,49,416,8,49,1,50,1,
		50,1,51,1,51,1,51,5,51,423,8,51,10,51,12,51,426,9,51,1,52,1,52,1,52,1,
		52,1,52,3,52,433,8,52,1,53,1,53,1,53,1,53,3,53,439,8,53,1,54,1,54,1,54,
		1,54,1,54,3,54,446,8,54,1,55,1,55,1,55,3,55,451,8,55,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,466,8,56,1,57,1,57,
		1,57,1,57,1,57,1,57,3,57,474,8,57,1,58,1,58,1,58,1,58,3,58,480,8,58,1,
		59,1,59,1,60,1,60,1,60,1,60,1,60,3,60,489,8,60,1,61,1,61,3,61,493,8,61,
		1,62,1,62,1,62,1,62,1,62,1,62,5,62,501,8,62,10,62,12,62,504,9,62,1,63,
		1,63,1,63,1,63,1,63,1,63,5,63,512,8,63,10,63,12,63,515,9,63,1,64,1,64,
		1,64,1,64,1,64,5,64,522,8,64,10,64,12,64,525,9,64,1,65,1,65,1,65,1,65,
		1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
		3,65,545,8,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,553,8,65,10,65,12,65,
		556,9,65,1,65,0,6,82,102,124,126,128,130,66,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,0,0,562,0,132,1,0,0,0,2,135,1,0,0,
		0,4,138,1,0,0,0,6,141,1,0,0,0,8,144,1,0,0,0,10,147,1,0,0,0,12,150,1,0,
		0,0,14,153,1,0,0,0,16,156,1,0,0,0,18,159,1,0,0,0,20,162,1,0,0,0,22,165,
		1,0,0,0,24,168,1,0,0,0,26,171,1,0,0,0,28,174,1,0,0,0,30,177,1,0,0,0,32,
		180,1,0,0,0,34,183,1,0,0,0,36,186,1,0,0,0,38,189,1,0,0,0,40,192,1,0,0,
		0,42,195,1,0,0,0,44,198,1,0,0,0,46,201,1,0,0,0,48,204,1,0,0,0,50,207,1,
		0,0,0,52,210,1,0,0,0,54,213,1,0,0,0,56,216,1,0,0,0,58,219,1,0,0,0,60,222,
		1,0,0,0,62,225,1,0,0,0,64,228,1,0,0,0,66,231,1,0,0,0,68,240,1,0,0,0,70,
		250,1,0,0,0,72,256,1,0,0,0,74,258,1,0,0,0,76,268,1,0,0,0,78,334,1,0,0,
		0,80,338,1,0,0,0,82,340,1,0,0,0,84,353,1,0,0,0,86,366,1,0,0,0,88,380,1,
		0,0,0,90,382,1,0,0,0,92,392,1,0,0,0,94,401,1,0,0,0,96,409,1,0,0,0,98,415,
		1,0,0,0,100,417,1,0,0,0,102,419,1,0,0,0,104,432,1,0,0,0,106,438,1,0,0,
		0,108,445,1,0,0,0,110,450,1,0,0,0,112,465,1,0,0,0,114,473,1,0,0,0,116,
		479,1,0,0,0,118,481,1,0,0,0,120,488,1,0,0,0,122,492,1,0,0,0,124,494,1,
		0,0,0,126,505,1,0,0,0,128,516,1,0,0,0,130,544,1,0,0,0,132,133,3,66,33,
		0,133,134,5,0,0,1,134,1,1,0,0,0,135,136,3,68,34,0,136,137,5,0,0,1,137,
		3,1,0,0,0,138,139,3,70,35,0,139,140,5,0,0,1,140,5,1,0,0,0,141,142,3,72,
		36,0,142,143,5,0,0,1,143,7,1,0,0,0,144,145,3,74,37,0,145,146,5,0,0,1,146,
		9,1,0,0,0,147,148,3,76,38,0,148,149,5,0,0,1,149,11,1,0,0,0,150,151,3,78,
		39,0,151,152,5,0,0,1,152,13,1,0,0,0,153,154,3,80,40,0,154,155,5,0,0,1,
		155,15,1,0,0,0,156,157,3,82,41,0,157,158,5,0,0,1,158,17,1,0,0,0,159,160,
		3,84,42,0,160,161,5,0,0,1,161,19,1,0,0,0,162,163,3,86,43,0,163,164,5,0,
		0,1,164,21,1,0,0,0,165,166,3,88,44,0,166,167,5,0,0,1,167,23,1,0,0,0,168,
		169,3,90,45,0,169,170,5,0,0,1,170,25,1,0,0,0,171,172,3,92,46,0,172,173,
		5,0,0,1,173,27,1,0,0,0,174,175,3,94,47,0,175,176,5,0,0,1,176,29,1,0,0,
		0,177,178,3,96,48,0,178,179,5,0,0,1,179,31,1,0,0,0,180,181,3,98,49,0,181,
		182,5,0,0,1,182,33,1,0,0,0,183,184,3,100,50,0,184,185,5,0,0,1,185,35,1,
		0,0,0,186,187,3,102,51,0,187,188,5,0,0,1,188,37,1,0,0,0,189,190,3,104,
		52,0,190,191,5,0,0,1,191,39,1,0,0,0,192,193,3,106,53,0,193,194,5,0,0,1,
		194,41,1,0,0,0,195,196,3,108,54,0,196,197,5,0,0,1,197,43,1,0,0,0,198,199,
		3,110,55,0,199,200,5,0,0,1,200,45,1,0,0,0,201,202,3,112,56,0,202,203,5,
		0,0,1,203,47,1,0,0,0,204,205,3,114,57,0,205,206,5,0,0,1,206,49,1,0,0,0,
		207,208,3,116,58,0,208,209,5,0,0,1,209,51,1,0,0,0,210,211,3,118,59,0,211,
		212,5,0,0,1,212,53,1,0,0,0,213,214,3,120,60,0,214,215,5,0,0,1,215,55,1,
		0,0,0,216,217,3,122,61,0,217,218,5,0,0,1,218,57,1,0,0,0,219,220,3,124,
		62,0,220,221,5,0,0,1,221,59,1,0,0,0,222,223,3,126,63,0,223,224,5,0,0,1,
		224,61,1,0,0,0,225,226,3,128,64,0,226,227,5,0,0,1,227,63,1,0,0,0,228,229,
		3,130,65,0,229,230,5,0,0,1,230,65,1,0,0,0,231,232,3,70,35,0,232,67,1,0,
		0,0,233,241,3,78,39,0,234,235,3,72,36,0,235,236,5,1,0,0,236,237,3,78,39,
		0,237,241,1,0,0,0,238,239,5,40,0,0,239,241,3,72,36,0,240,233,1,0,0,0,240,
		234,1,0,0,0,240,238,1,0,0,0,241,69,1,0,0,0,242,251,1,0,0,0,243,251,3,68,
		34,0,244,245,3,68,34,0,245,246,5,2,0,0,246,247,3,70,35,0,247,251,1,0,0,
		0,248,249,5,2,0,0,249,251,3,70,35,0,250,242,1,0,0,0,250,243,1,0,0,0,250,
		244,1,0,0,0,250,248,1,0,0,0,251,71,1,0,0,0,252,257,5,43,0,0,253,254,5,
		43,0,0,254,255,5,3,0,0,255,257,3,72,36,0,256,252,1,0,0,0,256,253,1,0,0,
		0,257,73,1,0,0,0,258,259,3,76,38,0,259,75,1,0,0,0,260,269,1,0,0,0,261,
		269,3,78,39,0,262,263,3,78,39,0,263,264,5,2,0,0,264,265,3,76,38,0,265,
		269,1,0,0,0,266,267,5,2,0,0,267,269,3,76,38,0,268,260,1,0,0,0,268,261,
		1,0,0,0,268,262,1,0,0,0,268,266,1,0,0,0,269,77,1,0,0,0,270,271,3,86,43,
		0,271,272,5,4,0,0,272,273,3,84,42,0,273,274,5,5,0,0,274,275,3,82,41,0,
		275,335,1,0,0,0,276,277,5,21,0,0,277,335,5,48,0,0,278,279,5,21,0,0,279,
		280,5,48,0,0,280,335,5,48,0,0,281,282,5,27,0,0,282,283,3,86,43,0,283,284,
		5,4,0,0,284,285,3,84,42,0,285,286,5,5,0,0,286,287,3,82,41,0,287,335,1,
		0,0,0,288,289,5,37,0,0,289,290,5,43,0,0,290,335,3,124,62,0,291,292,5,32,
		0,0,292,293,5,37,0,0,293,294,5,43,0,0,294,335,3,124,62,0,295,296,5,25,
		0,0,296,335,3,72,36,0,297,298,5,34,0,0,298,299,3,122,61,0,299,300,3,84,
		42,0,300,301,5,48,0,0,301,335,1,0,0,0,302,303,5,36,0,0,303,304,3,122,61,
		0,304,305,3,84,42,0,305,306,5,48,0,0,306,335,1,0,0,0,307,308,5,23,0,0,
		308,309,3,84,42,0,309,310,5,48,0,0,310,311,5,48,0,0,311,312,3,104,52,0,
		312,313,3,122,61,0,313,335,1,0,0,0,314,315,5,20,0,0,315,316,5,43,0,0,316,
		335,5,45,0,0,317,318,5,33,0,0,318,319,5,43,0,0,319,320,5,5,0,0,320,335,
		3,120,60,0,321,322,5,22,0,0,322,323,5,43,0,0,323,324,3,102,51,0,324,325,
		5,11,0,0,325,326,3,108,54,0,326,335,1,0,0,0,327,328,5,28,0,0,328,335,3,
		106,53,0,329,330,5,28,0,0,330,331,5,35,0,0,331,335,3,106,53,0,332,333,
		5,28,0,0,333,335,5,38,0,0,334,270,1,0,0,0,334,276,1,0,0,0,334,278,1,0,
		0,0,334,281,1,0,0,0,334,288,1,0,0,0,334,291,1,0,0,0,334,295,1,0,0,0,334,
		297,1,0,0,0,334,302,1,0,0,0,334,307,1,0,0,0,334,314,1,0,0,0,334,317,1,
		0,0,0,334,321,1,0,0,0,334,327,1,0,0,0,334,329,1,0,0,0,334,332,1,0,0,0,
		335,79,1,0,0,0,336,339,5,48,0,0,337,339,3,84,42,0,338,336,1,0,0,0,338,
		337,1,0,0,0,339,81,1,0,0,0,340,345,6,41,-1,0,341,342,10,1,0,0,342,344,
		3,80,40,0,343,341,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,
		0,0,346,83,1,0,0,0,347,345,1,0,0,0,348,349,5,6,0,0,349,350,3,84,42,0,350,
		351,5,7,0,0,351,354,1,0,0,0,352,354,5,43,0,0,353,348,1,0,0,0,353,352,1,
		0,0,0,354,85,1,0,0,0,355,367,3,88,44,0,356,357,3,88,44,0,357,358,3,98,
		49,0,358,367,1,0,0,0,359,360,3,88,44,0,360,361,3,88,44,0,361,362,3,98,
		49,0,362,367,1,0,0,0,363,364,3,88,44,0,364,365,3,88,44,0,365,367,1,0,0,
		0,366,355,1,0,0,0,366,356,1,0,0,0,366,359,1,0,0,0,366,363,1,0,0,0,367,
		87,1,0,0,0,368,381,5,43,0,0,369,381,5,8,0,0,370,371,5,6,0,0,371,381,5,
		7,0,0,372,373,5,9,0,0,373,374,5,1,0,0,374,381,5,10,0,0,375,376,5,9,0,0,
		376,377,5,1,0,0,377,378,5,6,0,0,378,379,5,7,0,0,379,381,5,10,0,0,380,368,
		1,0,0,0,380,369,1,0,0,0,380,370,1,0,0,0,380,372,1,0,0,0,380,375,1,0,0,
		0,381,89,1,0,0,0,382,383,5,9,0,0,383,384,5,6,0,0,384,385,3,96,48,0,385,
		386,5,7,0,0,386,387,5,3,0,0,387,388,5,6,0,0,388,389,3,94,47,0,389,390,
		5,7,0,0,390,391,5,10,0,0,391,91,1,0,0,0,392,393,5,6,0,0,393,394,3,94,47,
		0,394,395,5,7,0,0,395,93,1,0,0,0,396,402,1,0,0,0,397,402,5,45,0,0,398,
		399,5,45,0,0,399,400,5,3,0,0,400,402,3,94,47,0,401,396,1,0,0,0,401,397,
		1,0,0,0,401,398,1,0,0,0,402,95,1,0,0,0,403,410,1,0,0,0,404,410,3,92,46,
		0,405,406,3,92,46,0,406,407,5,3,0,0,407,408,3,96,48,0,408,410,1,0,0,0,
		409,403,1,0,0,0,409,404,1,0,0,0,409,405,1,0,0,0,410,97,1,0,0,0,411,416,
		3,90,45,0,412,413,3,90,45,0,413,414,3,98,49,0,414,416,1,0,0,0,415,411,
		1,0,0,0,415,412,1,0,0,0,416,99,1,0,0,0,417,418,5,43,0,0,418,101,1,0,0,
		0,419,424,6,51,-1,0,420,421,10,1,0,0,421,423,3,100,50,0,422,420,1,0,0,
		0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,103,1,0,0,0,426,
		424,1,0,0,0,427,433,1,0,0,0,428,429,5,36,0,0,429,433,5,48,0,0,430,431,
		5,34,0,0,431,433,5,48,0,0,432,427,1,0,0,0,432,428,1,0,0,0,432,430,1,0,
		0,0,433,105,1,0,0,0,434,439,5,48,0,0,435,436,5,48,0,0,436,437,5,3,0,0,
		437,439,3,106,53,0,438,434,1,0,0,0,438,435,1,0,0,0,439,107,1,0,0,0,440,
		441,3,110,55,0,441,442,5,1,0,0,442,443,3,108,54,0,443,446,1,0,0,0,444,
		446,3,110,55,0,445,440,1,0,0,0,445,444,1,0,0,0,446,109,1,0,0,0,447,448,
		5,43,0,0,448,451,3,116,58,0,449,451,3,112,56,0,450,447,1,0,0,0,450,449,
		1,0,0,0,451,111,1,0,0,0,452,466,5,43,0,0,453,466,5,45,0,0,454,466,5,49,
		0,0,455,466,5,48,0,0,456,466,5,44,0,0,457,458,5,6,0,0,458,459,3,114,57,
		0,459,460,5,7,0,0,460,466,1,0,0,0,461,462,5,9,0,0,462,463,3,108,54,0,463,
		464,5,10,0,0,464,466,1,0,0,0,465,452,1,0,0,0,465,453,1,0,0,0,465,454,1,
		0,0,0,465,455,1,0,0,0,465,456,1,0,0,0,465,457,1,0,0,0,465,461,1,0,0,0,
		466,113,1,0,0,0,467,474,1,0,0,0,468,474,3,108,54,0,469,470,3,108,54,0,
		470,471,5,3,0,0,471,472,3,114,57,0,472,474,1,0,0,0,473,467,1,0,0,0,473,
		468,1,0,0,0,473,469,1,0,0,0,474,115,1,0,0,0,475,480,3,112,56,0,476,477,
		3,112,56,0,477,478,3,116,58,0,478,480,1,0,0,0,479,475,1,0,0,0,479,476,
		1,0,0,0,480,117,1,0,0,0,481,482,3,82,41,0,482,119,1,0,0,0,483,489,3,118,
		59,0,484,485,3,118,59,0,485,486,5,12,0,0,486,487,3,120,60,0,487,489,1,
		0,0,0,488,483,1,0,0,0,488,484,1,0,0,0,489,121,1,0,0,0,490,493,5,31,0,0,
		491,493,1,0,0,0,492,490,1,0,0,0,492,491,1,0,0,0,493,123,1,0,0,0,494,495,
		6,62,-1,0,495,496,3,126,63,0,496,502,1,0,0,0,497,498,10,2,0,0,498,499,
		5,12,0,0,499,501,3,126,63,0,500,497,1,0,0,0,501,504,1,0,0,0,502,500,1,
		0,0,0,502,503,1,0,0,0,503,125,1,0,0,0,504,502,1,0,0,0,505,506,6,63,-1,
		0,506,507,3,128,64,0,507,513,1,0,0,0,508,509,10,2,0,0,509,510,5,13,0,0,
		510,512,3,128,64,0,511,508,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,513,
		514,1,0,0,0,514,127,1,0,0,0,515,513,1,0,0,0,516,517,6,64,-1,0,517,518,
		3,130,65,0,518,523,1,0,0,0,519,520,10,2,0,0,520,522,3,130,65,0,521,519,
		1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,129,1,0,0,
		0,525,523,1,0,0,0,526,527,6,65,-1,0,527,545,5,26,0,0,528,545,5,49,0,0,
		529,530,5,6,0,0,530,531,5,48,0,0,531,545,5,7,0,0,532,533,5,17,0,0,533,
		534,5,48,0,0,534,545,5,18,0,0,535,545,5,24,0,0,536,545,5,29,0,0,537,545,
		5,39,0,0,538,545,5,30,0,0,539,545,5,19,0,0,540,541,5,9,0,0,541,542,3,124,
		62,0,542,543,5,10,0,0,543,545,1,0,0,0,544,526,1,0,0,0,544,528,1,0,0,0,
		544,529,1,0,0,0,544,532,1,0,0,0,544,535,1,0,0,0,544,536,1,0,0,0,544,537,
		1,0,0,0,544,538,1,0,0,0,544,539,1,0,0,0,544,540,1,0,0,0,545,554,1,0,0,
		0,546,547,10,13,0,0,547,553,5,14,0,0,548,549,10,12,0,0,549,553,5,15,0,
		0,550,551,10,11,0,0,551,553,5,16,0,0,552,546,1,0,0,0,552,548,1,0,0,0,552,
		550,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,131,1,
		0,0,0,556,554,1,0,0,0,29,240,250,256,268,334,338,345,353,366,380,401,409,
		415,424,432,438,445,450,465,473,479,488,492,502,513,523,544,552,554
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
