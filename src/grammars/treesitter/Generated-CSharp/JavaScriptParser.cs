//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavaScriptParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : JavaScriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HashBangLine=1, MultiLineComment=2, SingleLineComment=3, RegularExpressionLiteral=4, 
		OpenBracket=5, CloseBracket=6, OpenParen=7, CloseParen=8, OpenBrace=9, 
		TemplateCloseBrace=10, CloseBrace=11, SemiColon=12, Comma=13, Assign=14, 
		QuestionMark=15, Colon=16, Ellipsis=17, Dot=18, PlusPlus=19, MinusMinus=20, 
		Plus=21, Minus=22, BitNot=23, Not=24, Multiply=25, Divide=26, Modulus=27, 
		Power=28, NullCoalesce=29, Hashtag=30, RightShiftArithmetic=31, LeftShiftArithmetic=32, 
		RightShiftLogical=33, LessThan=34, MoreThan=35, LessThanEquals=36, GreaterThanEquals=37, 
		Equals_=38, NotEquals=39, IdentityEquals=40, IdentityNotEquals=41, BitAnd=42, 
		BitXOr=43, BitOr=44, And=45, Or=46, MultiplyAssign=47, DivideAssign=48, 
		ModulusAssign=49, PlusAssign=50, MinusAssign=51, LeftShiftArithmeticAssign=52, 
		RightShiftArithmeticAssign=53, RightShiftLogicalAssign=54, BitAndAssign=55, 
		BitXorAssign=56, BitOrAssign=57, PowerAssign=58, ARROW=59, NullLiteral=60, 
		BooleanLiteral=61, DecimalLiteral=62, HexIntegerLiteral=63, OctalIntegerLiteral=64, 
		OctalIntegerLiteral2=65, BinaryIntegerLiteral=66, BigHexIntegerLiteral=67, 
		BigOctalIntegerLiteral=68, BigBinaryIntegerLiteral=69, BigDecimalIntegerLiteral=70, 
		Break=71, Do=72, Instanceof=73, Typeof=74, Case=75, Else=76, New=77, Var=78, 
		Catch=79, Finally=80, Return=81, Void=82, Continue=83, For=84, Switch=85, 
		While=86, Debugger=87, Function_=88, This=89, With=90, Default=91, If=92, 
		Throw=93, Delete=94, In=95, Try=96, As=97, From=98, Class=99, Enum=100, 
		Extends=101, Super=102, Const=103, Export=104, Import=105, Async=106, 
		Await=107, Implements=108, StrictLet=109, NonStrictLet=110, Private=111, 
		Public=112, Interface=113, Package=114, Protected=115, Static=116, Yield=117, 
		Identifier=118, StringLiteral=119, BackTick=120, WhiteSpaces=121, LineTerminator=122, 
		HtmlComment=123, CDataComment=124, UnexpectedCharacter=125, TemplateStringStartExpression=126, 
		TemplateStringAtom=127;
	public const int
		RULE_program = 0, RULE_sourceElement = 1, RULE_statement = 2, RULE_block = 3, 
		RULE_statementList = 4, RULE_importStatement = 5, RULE_importFromBlock = 6, 
		RULE_moduleItems = 7, RULE_importDefault = 8, RULE_importNamespace = 9, 
		RULE_importFrom = 10, RULE_aliasName = 11, RULE_exportStatement = 12, 
		RULE_exportFromBlock = 13, RULE_declaration = 14, RULE_variableStatement = 15, 
		RULE_variableDeclarationList = 16, RULE_variableDeclaration = 17, RULE_emptyStatement = 18, 
		RULE_expressionStatement = 19, RULE_ifStatement = 20, RULE_iterationStatement = 21, 
		RULE_varModifier = 22, RULE_continueStatement = 23, RULE_breakStatement = 24, 
		RULE_returnStatement = 25, RULE_yieldStatement = 26, RULE_withStatement = 27, 
		RULE_switchStatement = 28, RULE_caseBlock = 29, RULE_caseClauses = 30, 
		RULE_caseClause = 31, RULE_defaultClause = 32, RULE_labelledStatement = 33, 
		RULE_throwStatement = 34, RULE_tryStatement = 35, RULE_catchProduction = 36, 
		RULE_finallyProduction = 37, RULE_debuggerStatement = 38, RULE_functionDeclaration = 39, 
		RULE_classDeclaration = 40, RULE_classTail = 41, RULE_classElement = 42, 
		RULE_methodDefinition = 43, RULE_formalParameterList = 44, RULE_formalParameterArg = 45, 
		RULE_lastFormalParameterArg = 46, RULE_functionBody = 47, RULE_sourceElements = 48, 
		RULE_arrayLiteral = 49, RULE_elementList = 50, RULE_arrayElement = 51, 
		RULE_propertyAssignment = 52, RULE_propertyName = 53, RULE_arguments = 54, 
		RULE_argument = 55, RULE_expressionSequence = 56, RULE_singleExpression = 57, 
		RULE_assignable = 58, RULE_objectLiteral = 59, RULE_anonymousFunction = 60, 
		RULE_arrowFunctionParameters = 61, RULE_arrowFunctionBody = 62, RULE_assignmentOperator = 63, 
		RULE_literal = 64, RULE_templateStringLiteral = 65, RULE_templateStringAtom = 66, 
		RULE_numericLiteral = 67, RULE_bigintLiteral = 68, RULE_getter = 69, RULE_setter = 70, 
		RULE_identifierName = 71, RULE_identifier = 72, RULE_reservedWord = 73, 
		RULE_keyword = 74, RULE_let_ = 75, RULE_eos = 76;
	public static readonly string[] ruleNames = {
		"program", "sourceElement", "statement", "block", "statementList", "importStatement", 
		"importFromBlock", "moduleItems", "importDefault", "importNamespace", 
		"importFrom", "aliasName", "exportStatement", "exportFromBlock", "declaration", 
		"variableStatement", "variableDeclarationList", "variableDeclaration", 
		"emptyStatement", "expressionStatement", "ifStatement", "iterationStatement", 
		"varModifier", "continueStatement", "breakStatement", "returnStatement", 
		"yieldStatement", "withStatement", "switchStatement", "caseBlock", "caseClauses", 
		"caseClause", "defaultClause", "labelledStatement", "throwStatement", 
		"tryStatement", "catchProduction", "finallyProduction", "debuggerStatement", 
		"functionDeclaration", "classDeclaration", "classTail", "classElement", 
		"methodDefinition", "formalParameterList", "formalParameterArg", "lastFormalParameterArg", 
		"functionBody", "sourceElements", "arrayLiteral", "elementList", "arrayElement", 
		"propertyAssignment", "propertyName", "arguments", "argument", "expressionSequence", 
		"singleExpression", "assignable", "objectLiteral", "anonymousFunction", 
		"arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator", 
		"literal", "templateStringLiteral", "templateStringAtom", "numericLiteral", 
		"bigintLiteral", "getter", "setter", "identifierName", "identifier", "reservedWord", 
		"keyword", "let_", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'['", "']'", "'('", "')'", "'{'", null, 
		"'}'", "';'", "','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", 
		"'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", 
		"'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", 
		"'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", 
		"'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", 
		"'**='", "'=>'", "'null'", null, null, null, null, null, null, null, null, 
		null, null, "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", "'else'", 
		"'new'", "'var'", "'catch'", "'finally'", "'return'", "'void'", "'continue'", 
		"'for'", "'switch'", "'while'", "'debugger'", "'function'", "'this'", 
		"'with'", "'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", 
		"'as'", "'from'", "'class'", "'enum'", "'extends'", "'super'", "'const'", 
		"'export'", "'import'", "'async'", "'await'", "'implements'", null, null, 
		"'private'", "'public'", "'interface'", "'package'", "'protected'", "'static'", 
		"'yield'", null, null, null, null, null, null, null, null, "'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
		"Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", 
		"BitNot", "Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", 
		"Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", 
		"LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", 
		"NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", 
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", 
		"Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", 
		"For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default", 
		"If", "Throw", "Delete", "In", "Try", "As", "From", "Class", "Enum", "Extends", 
		"Super", "Const", "Export", "Import", "Async", "Await", "Implements", 
		"StrictLet", "NonStrictLet", "Private", "Public", "Interface", "Package", 
		"Protected", "Static", "Yield", "Identifier", "StringLiteral", "BackTick", 
		"WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", 
		"TemplateStringStartExpression", "TemplateStringAtom"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JavaScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HashBangLine() { return GetToken(JavaScriptParser.HashBangLine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 154;
				Match(HashBangLine);
				}
				break;
			}
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 157;
				sourceElements();
				}
				break;
			}
			State = 160;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElement(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				variableStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 166;
				importStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 167;
				exportStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 168;
				emptyStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 169;
				classDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 170;
				expressionStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 171;
				ifStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 172;
				iterationStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 173;
				continueStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 174;
				breakStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 175;
				returnStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 176;
				yieldStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 177;
				withStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 178;
				labelledStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 179;
				switchStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 180;
				throwStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 181;
				tryStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 182;
				debuggerStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 183;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(OpenBrace);
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 187;
				statementList();
				}
				break;
			}
			State = 190;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 8, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 192;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(Import);
			State = 198;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleItemsContext moduleItems() {
			return GetRuleContext<ModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFromBlock(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_importFromBlock);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 200;
					importDefault();
					}
					break;
				}
				State = 205;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case BooleanLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Typeof:
				case Case:
				case Else:
				case New:
				case Var:
				case Catch:
				case Finally:
				case Return:
				case Void:
				case Continue:
				case For:
				case Switch:
				case While:
				case Debugger:
				case Function_:
				case This:
				case With:
				case Default:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case As:
				case From:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Const:
				case Export:
				case Import:
				case Async:
				case Await:
				case Implements:
				case StrictLet:
				case NonStrictLet:
				case Private:
				case Public:
				case Interface:
				case Package:
				case Protected:
				case Static:
				case Yield:
				case Identifier:
					{
					State = 203;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 204;
					moduleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 207;
				importFrom();
				State = 208;
				eos();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				Match(StringLiteral);
				State = 211;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext[] aliasName() {
			return GetRuleContexts<AliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName(int i) {
			return GetRuleContext<AliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterModuleItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitModuleItems(this);
		}
	}

	[RuleVersion(0)]
	public ModuleItemsContext moduleItems() {
		ModuleItemsContext _localctx = new ModuleItemsContext(Context, State);
		EnterRule(_localctx, 14, RULE_moduleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(OpenBrace);
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 215;
					aliasName();
					State = 216;
					Match(Comma);
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 576460752303421443L) != 0)) {
				{
				State = 223;
				aliasName();
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 224;
					Match(Comma);
					}
				}

				}
			}

			State = 229;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(JavaScriptParser.Comma, 0); }
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportDefault(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 16, RULE_importDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			aliasName();
			State = 232;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportNamespace(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 18, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 234;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				{
				State = 235;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 238;
				Match(As);
				State = 239;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFrom(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 20, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(From);
			State = 243;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAliasName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAliasName(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			identifierName();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 246;
				Match(As);
				State = 247;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDefaultDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDefaultDeclaration(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_exportStatement);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 250;
				Match(Export);
				State = 253;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 251;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 252;
					declaration();
					}
					break;
				}
				State = 255;
				eos();
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				Match(Export);
				State = 258;
				Match(Default);
				State = 259;
				singleExpression(0);
				State = 260;
				eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleItemsContext moduleItems() {
			return GetRuleContext<ModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportFromBlock(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_exportFromBlock);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				importNamespace();
				State = 265;
				importFrom();
				State = 266;
				eos();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				moduleItems();
				State = 270;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 269;
					importFrom();
					}
					break;
				}
				State = 272;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_declaration);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
			case Const:
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				variableStatement();
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				classDeclaration();
				}
				break;
			case Function_:
			case Async:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableStatement(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_variableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			variableDeclarationList();
			State = 282;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			varModifier();
			State = 285;
			variableDeclaration();
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 286;
					Match(Comma);
					State = 287;
					variableDeclaration();
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			assignable();
			State = 296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 294;
				Match(Assign);
				State = 295;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			if (!(this.notOpenBraceAndNotFunction())) throw new FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
			State = 301;
			expressionSequence();
			State = 302;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(If);
			State = 305;
			Match(OpenParen);
			State = 306;
			expressionSequence();
			State = 307;
			Match(CloseParen);
			State = 308;
			statement();
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 309;
				Match(Else);
				State = 310;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(JavaScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(JavaScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_iterationStatement);
		int _la;
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313;
				Match(Do);
				State = 314;
				statement();
				State = 315;
				Match(While);
				State = 316;
				Match(OpenParen);
				State = 317;
				expressionSequence();
				State = 318;
				Match(CloseParen);
				State = 319;
				eos();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				Match(While);
				State = 322;
				Match(OpenParen);
				State = 323;
				expressionSequence();
				State = 324;
				Match(CloseParen);
				State = 325;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 327;
				Match(For);
				State = 328;
				Match(OpenParen);
				State = 331;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 329;
					expressionSequence();
					}
					break;
				case 2:
					{
					State = 330;
					variableDeclarationList();
					}
					break;
				}
				State = 333;
				Match(SemiColon);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921504573816144L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 135194061090071679L) != 0)) {
					{
					State = 334;
					expressionSequence();
					}
				}

				State = 337;
				Match(SemiColon);
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921504573816144L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 135194061090071679L) != 0)) {
					{
					State = 338;
					expressionSequence();
					}
				}

				State = 341;
				Match(CloseParen);
				State = 342;
				statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 343;
				Match(For);
				State = 344;
				Match(OpenParen);
				State = 347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 345;
					singleExpression(0);
					}
					break;
				case 2:
					{
					State = 346;
					variableDeclarationList();
					}
					break;
				}
				State = 349;
				Match(In);
				State = 350;
				expressionSequence();
				State = 351;
				Match(CloseParen);
				State = 352;
				statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 354;
				Match(For);
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Await) {
					{
					State = 355;
					Match(Await);
					}
				}

				State = 358;
				Match(OpenParen);
				State = 361;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 359;
					singleExpression(0);
					}
					break;
				case 2:
					{
					State = 360;
					variableDeclarationList();
					}
					break;
				}
				State = 363;
				identifier();
				State = 364;
				if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
				State = 365;
				expressionSequence();
				State = 366;
				Match(CloseParen);
				State = 367;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Let_Context let_() {
			return GetRuleContext<Let_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_varModifier);
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				EnterOuterAlt(_localctx, 1);
				{
				State = 371;
				Match(Var);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 2);
				{
				State = 372;
				let_();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 3);
				{
				State = 373;
				Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(Continue);
			State = 379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 377;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 378;
				identifier();
				}
				break;
			}
			State = 381;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(Break);
			State = 386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 384;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 385;
				identifier();
				}
				break;
			}
			State = 388;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(Return);
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 391;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 392;
				expressionSequence();
				}
				break;
			}
			State = 395;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(Yield);
			State = 400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 398;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 399;
				expressionSequence();
				}
				break;
			}
			State = 402;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			Match(With);
			State = 405;
			Match(OpenParen);
			State = 406;
			expressionSequence();
			State = 407;
			Match(CloseParen);
			State = 408;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(Switch);
			State = 411;
			Match(OpenParen);
			State = 412;
			expressionSequence();
			State = 413;
			Match(CloseParen);
			State = 414;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(OpenBrace);
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 417;
				caseClauses();
				}
			}

			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 420;
				defaultClause();
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 421;
					caseClauses();
					}
				}

				}
			}

			State = 426;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 60, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 428;
				caseClause();
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 62, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(Case);
			State = 434;
			expressionSequence();
			State = 435;
			Match(Colon);
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 436;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultClause(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 64, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(Default);
			State = 440;
			Match(Colon);
			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 441;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLabelledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			identifier();
			State = 445;
			Match(Colon);
			State = 446;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(Throw);
			State = 449;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 450;
			expressionSequence();
			State = 451;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(Try);
			State = 454;
			block();
			State = 460;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 455;
				catchProduction();
				State = 457;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 456;
					finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 459;
				finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCatchProduction(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 72, RULE_catchProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(Catch);
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 463;
				Match(OpenParen);
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracket || _la==OpenBrace || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4113L) != 0)) {
					{
					State = 464;
					assignable();
					}
				}

				State = 467;
				Match(CloseParen);
				}
			}

			State = 470;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyProduction(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 74, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(Finally);
			State = 473;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(Debugger);
			State = 476;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 478;
				Match(Async);
				}
			}

			State = 481;
			Match(Function_);
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 482;
				Match(Multiply);
				}
			}

			State = 485;
			identifier();
			State = 486;
			Match(OpenParen);
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131616L) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4113L) != 0)) {
				{
				State = 487;
				formalParameterList();
				}
			}

			State = 490;
			Match(CloseParen);
			State = 491;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(Class);
			State = 494;
			identifier();
			State = 495;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassTail(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 82, RULE_classTail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 497;
				Match(Extends);
				State = 498;
				singleExpression(0);
				}
			}

			State = 501;
			Match(OpenBrace);
			State = 505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 502;
					classElement();
					}
					} 
				}
				State = 507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			State = 508;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Static() { return GetTokens(JavaScriptParser.Static); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static(int i) {
			return GetToken(JavaScriptParser.Static, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Async() { return GetTokens(JavaScriptParser.Async); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async(int i) {
			return GetToken(JavaScriptParser.Async, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElement(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 84, RULE_classElement);
		int _la;
		try {
			int _alt;
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 514;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
						case 1:
							{
							State = 510;
							Match(Static);
							}
							break;
						case 2:
							{
							State = 511;
							if (!(this.n("static"))) throw new FailedPredicateException(this, "this.n(\"static\")");
							State = 512;
							identifier();
							}
							break;
						case 3:
							{
							State = 513;
							Match(Async);
							}
							break;
						}
						} 
					}
					State = 518;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				}
				State = 525;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 519;
					methodDefinition();
					}
					break;
				case 2:
					{
					State = 520;
					assignable();
					State = 521;
					Match(Assign);
					State = 522;
					objectLiteral();
					State = 523;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527;
				emptyStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Hashtag) {
					{
					State = 528;
					Match(Hashtag);
					}
				}

				State = 531;
				propertyName();
				State = 532;
				Match(Assign);
				State = 533;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_methodDefinition);
		int _la;
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 537;
					Match(Multiply);
					}
				}

				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Hashtag) {
					{
					State = 540;
					Match(Hashtag);
					}
				}

				State = 543;
				propertyName();
				State = 544;
				Match(OpenParen);
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131616L) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4113L) != 0)) {
					{
					State = 545;
					formalParameterList();
					}
				}

				State = 548;
				Match(CloseParen);
				State = 549;
				functionBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 551;
					Match(Multiply);
					}
					break;
				}
				State = 555;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 554;
					Match(Hashtag);
					}
					break;
				}
				State = 557;
				getter();
				State = 558;
				Match(OpenParen);
				State = 559;
				Match(CloseParen);
				State = 560;
				functionBody();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 563;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 562;
					Match(Multiply);
					}
					break;
				}
				State = 566;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 565;
					Match(Hashtag);
					}
					break;
				}
				State = 568;
				setter();
				State = 569;
				Match(OpenParen);
				State = 571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131616L) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4113L) != 0)) {
					{
					State = 570;
					formalParameterList();
					}
				}

				State = 573;
				Match(CloseParen);
				State = 574;
				functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 88, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenBrace:
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				formalParameterArg();
				State = 583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 579;
						Match(Comma);
						State = 580;
						formalParameterArg();
						}
						} 
					}
					State = 585;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 586;
					Match(Comma);
					State = 587;
					lastFormalParameterArg();
					}
				}

				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 590;
				lastFormalParameterArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterArg(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 90, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			assignable();
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 594;
				Match(Assign);
				State = 595;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameterArg(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 92, RULE_lastFormalParameterArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(Ellipsis);
			State = 599;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 94, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(OpenBrace);
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 602;
				sourceElements();
				}
				break;
			}
			State = 605;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElements(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 96, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 607;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 610;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 612;
			Match(OpenBracket);
			State = 613;
			elementList();
			State = 614;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 100, RULE_elementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 616;
					Match(Comma);
					}
					} 
				}
				State = 621;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			State = 623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921504573685072L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 135194061090071679L) != 0)) {
				{
				State = 622;
				arrayElement();
				}
			}

			State = 633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 626;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 625;
						Match(Comma);
						}
						}
						State = 628;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Comma );
					State = 630;
					arrayElement();
					}
					} 
				}
				State = 635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 636;
				Match(Comma);
				}
				}
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 102, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 642;
				Match(Ellipsis);
				}
			}

			State = 645;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyAssignment(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 104, RULE_propertyAssignment);
		int _la;
		try {
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 647;
				propertyName();
				State = 648;
				Match(Colon);
				State = 649;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 651;
				Match(OpenBracket);
				State = 652;
				singleExpression(0);
				State = 653;
				Match(CloseBracket);
				State = 654;
				Match(Colon);
				State = 655;
				singleExpression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 658;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 657;
					Match(Async);
					}
					break;
				}
				State = 661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 660;
					Match(Multiply);
					}
				}

				State = 663;
				propertyName();
				State = 664;
				Match(OpenParen);
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131616L) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4113L) != 0)) {
					{
					State = 665;
					formalParameterList();
					}
				}

				State = 668;
				Match(CloseParen);
				State = 669;
				functionBody();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 671;
				getter();
				State = 672;
				Match(OpenParen);
				State = 673;
				Match(CloseParen);
				State = 674;
				functionBody();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 676;
				setter();
				State = 677;
				Match(OpenParen);
				State = 678;
				formalParameterArg();
				State = 679;
				Match(CloseParen);
				State = 680;
				functionBody();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 682;
					Match(Ellipsis);
					}
				}

				State = 685;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 106, RULE_propertyName);
		try {
			State = 695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 688;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 689;
				Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 690;
				numericLiteral();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 4);
				{
				State = 691;
				Match(OpenBracket);
				State = 692;
				singleExpression(0);
				State = 693;
				Match(CloseBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 108, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(OpenParen);
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921504573685072L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 135194061090071679L) != 0)) {
				{
				State = 698;
				argument();
				State = 703;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 699;
						Match(Comma);
						State = 700;
						argument();
						}
						} 
					}
					State = 705;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
				}
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 706;
					Match(Comma);
					}
				}

				}
			}

			State = 711;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 110, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 713;
				Match(Ellipsis);
				}
			}

			State = 718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 716;
				singleExpression(0);
				}
				break;
			case 2:
				{
				State = 717;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 112, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			singleExpression(0);
			State = 725;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 721;
					Match(Comma);
					State = 722;
					singleExpression(0);
					}
					} 
				}
				State = 727;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnonymousFunctionContext anonymousFunction() {
			return GetRuleContext<AnonymousFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JavaScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(JavaScriptParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(JavaScriptParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(JavaScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(JavaScriptParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(JavaScriptParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(JavaScriptParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(JavaScriptParser.Power, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(JavaScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(JavaScriptParser.Modulus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(JavaScriptParser.NullCoalesce, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(JavaScriptParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(JavaScriptParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(JavaScriptParser.RightShiftLogical, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(JavaScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(JavaScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(JavaScriptParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(JavaScriptParser.GreaterThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(JavaScriptParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(JavaScriptParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(JavaScriptParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(JavaScriptParser.IdentityNotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(JavaScriptParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(JavaScriptParser.BitXOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(JavaScriptParser.BitOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(JavaScriptParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(JavaScriptParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(JavaScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSingleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSingleExpression(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 729;
				anonymousFunction();
				}
				break;
			case 2:
				{
				State = 730;
				Match(Class);
				State = 732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4113L) != 0)) {
					{
					State = 731;
					identifier();
					}
				}

				State = 734;
				classTail();
				}
				break;
			case 3:
				{
				State = 735;
				Match(New);
				State = 736;
				singleExpression(0);
				State = 737;
				arguments();
				}
				break;
			case 4:
				{
				State = 739;
				Match(New);
				State = 740;
				singleExpression(42);
				}
				break;
			case 5:
				{
				State = 741;
				Match(New);
				State = 742;
				Match(Dot);
				State = 743;
				identifier();
				}
				break;
			case 6:
				{
				State = 744;
				Match(Delete);
				State = 745;
				singleExpression(37);
				}
				break;
			case 7:
				{
				State = 746;
				Match(Void);
				State = 747;
				singleExpression(36);
				}
				break;
			case 8:
				{
				State = 748;
				Match(Typeof);
				State = 749;
				singleExpression(35);
				}
				break;
			case 9:
				{
				State = 750;
				Match(PlusPlus);
				State = 751;
				singleExpression(34);
				}
				break;
			case 10:
				{
				State = 752;
				Match(MinusMinus);
				State = 753;
				singleExpression(33);
				}
				break;
			case 11:
				{
				State = 754;
				Match(Plus);
				State = 755;
				singleExpression(32);
				}
				break;
			case 12:
				{
				State = 756;
				Match(Minus);
				State = 757;
				singleExpression(31);
				}
				break;
			case 13:
				{
				State = 758;
				Match(BitNot);
				State = 759;
				singleExpression(30);
				}
				break;
			case 14:
				{
				State = 760;
				Match(Not);
				State = 761;
				singleExpression(29);
				}
				break;
			case 15:
				{
				State = 762;
				Match(Await);
				State = 763;
				singleExpression(28);
				}
				break;
			case 16:
				{
				State = 764;
				Match(Import);
				State = 765;
				Match(OpenParen);
				State = 766;
				singleExpression(0);
				State = 767;
				Match(CloseParen);
				}
				break;
			case 17:
				{
				State = 769;
				yieldStatement();
				}
				break;
			case 18:
				{
				State = 770;
				Match(This);
				}
				break;
			case 19:
				{
				State = 771;
				identifier();
				}
				break;
			case 20:
				{
				State = 772;
				Match(Super);
				}
				break;
			case 21:
				{
				State = 773;
				literal();
				}
				break;
			case 22:
				{
				State = 774;
				arrayLiteral();
				}
				break;
			case 23:
				{
				State = 775;
				objectLiteral();
				}
				break;
			case 24:
				{
				State = 776;
				Match(OpenParen);
				State = 777;
				expressionSequence();
				State = 778;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 863;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 861;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
					case 1:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 782;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 783;
						Match(Power);
						State = 784;
						singleExpression(27);
						}
						break;
					case 2:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 785;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 786;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 234881024L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 787;
						singleExpression(27);
						}
						break;
					case 3:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 788;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 789;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 790;
						singleExpression(26);
						}
						break;
					case 4:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 791;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 792;
						Match(NullCoalesce);
						State = 793;
						singleExpression(25);
						}
						break;
					case 5:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 794;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 795;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385536L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 796;
						singleExpression(24);
						}
						break;
					case 6:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 797;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 798;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 257698037760L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 799;
						singleExpression(23);
						}
						break;
					case 7:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 800;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 801;
						Match(Instanceof);
						State = 802;
						singleExpression(22);
						}
						break;
					case 8:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 803;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 804;
						Match(In);
						State = 805;
						singleExpression(21);
						}
						break;
					case 9:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 806;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 807;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4123168604160L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 808;
						singleExpression(20);
						}
						break;
					case 10:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 809;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 810;
						Match(BitAnd);
						State = 811;
						singleExpression(19);
						}
						break;
					case 11:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 812;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 813;
						Match(BitXOr);
						State = 814;
						singleExpression(18);
						}
						break;
					case 12:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 815;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 816;
						Match(BitOr);
						State = 817;
						singleExpression(17);
						}
						break;
					case 13:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 818;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 819;
						Match(And);
						State = 820;
						singleExpression(16);
						}
						break;
					case 14:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 821;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 822;
						Match(Or);
						State = 823;
						singleExpression(15);
						}
						break;
					case 15:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 824;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 825;
						Match(QuestionMark);
						State = 826;
						singleExpression(0);
						State = 827;
						Match(Colon);
						State = 828;
						singleExpression(14);
						}
						break;
					case 16:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 830;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 831;
						Match(Assign);
						State = 832;
						singleExpression(12);
						}
						break;
					case 17:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 833;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 834;
						assignmentOperator();
						State = 835;
						singleExpression(11);
						}
						break;
					case 18:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 837;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 838;
						Match(OpenBracket);
						State = 839;
						expressionSequence();
						State = 840;
						Match(CloseBracket);
						}
						break;
					case 19:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 842;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 844;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMark) {
							{
							State = 843;
							Match(QuestionMark);
							}
						}

						State = 846;
						Match(Dot);
						State = 848;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Hashtag) {
							{
							State = 847;
							Match(Hashtag);
							}
						}

						State = 850;
						identifierName();
						}
						break;
					case 20:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 851;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 852;
						arguments();
						}
						break;
					case 21:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 853;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 854;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 855;
						Match(PlusPlus);
						}
						break;
					case 22:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 856;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 857;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 858;
						Match(MinusMinus);
						}
						break;
					case 23:
						{
						_localctx = new SingleExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 859;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 860;
						templateStringLiteral();
						}
						break;
					}
					} 
				}
				State = 865;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignable(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 116, RULE_assignable);
		try {
			State = 869;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 866;
				identifier();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 867;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 868;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			Match(OpenBrace);
			State = 883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 872;
				propertyAssignment();
				State = 877;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 873;
						Match(Comma);
						State = 874;
						propertyAssignment();
						}
						} 
					}
					State = 879;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
				}
				State = 881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 880;
					Match(Comma);
					}
				}

				}
				break;
			}
			State = 885;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionParametersContext arrowFunctionParameters() {
			return GetRuleContext<ArrowFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(JavaScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionBodyContext arrowFunctionBody() {
			return GetRuleContext<ArrowFunctionBodyContext>(0);
		}
		public AnonymousFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunction(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionContext anonymousFunction() {
		AnonymousFunctionContext _localctx = new AnonymousFunctionContext(Context, State);
		EnterRule(_localctx, 120, RULE_anonymousFunction);
		int _la;
		try {
			State = 908;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 887;
				functionDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 888;
					Match(Async);
					}
				}

				State = 891;
				Match(Function_);
				State = 893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 892;
					Match(Multiply);
					}
				}

				State = 895;
				Match(OpenParen);
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131616L) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4113L) != 0)) {
					{
					State = 896;
					formalParameterList();
					}
				}

				State = 899;
				Match(CloseParen);
				State = 900;
				functionBody();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 902;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
				case 1:
					{
					State = 901;
					Match(Async);
					}
					break;
				}
				State = 904;
				arrowFunctionParameters();
				State = 905;
				Match(ARROW);
				State = 906;
				arrowFunctionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ArrowFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionParametersContext arrowFunctionParameters() {
		ArrowFunctionParametersContext _localctx = new ArrowFunctionParametersContext(Context, State);
		EnterRule(_localctx, 122, RULE_arrowFunctionParameters);
		int _la;
		try {
			State = 916;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 910;
				identifier();
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 911;
				Match(OpenParen);
				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131616L) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4113L) != 0)) {
					{
					State = 912;
					formalParameterList();
					}
				}

				State = 915;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ArrowFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionBodyContext arrowFunctionBody() {
		ArrowFunctionBodyContext _localctx = new ArrowFunctionBodyContext(Context, State);
		EnterRule(_localctx, 124, RULE_arrowFunctionBody);
		try {
			State = 920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 918;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 919;
				functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(JavaScriptParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(JavaScriptParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(JavaScriptParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(JavaScriptParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(JavaScriptParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(JavaScriptParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(JavaScriptParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(JavaScriptParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(JavaScriptParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(JavaScriptParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(JavaScriptParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(JavaScriptParser.PowerAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 126, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 576320014815068160L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegularExpressionLiteral() { return GetToken(JavaScriptParser.RegularExpressionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 128, RULE_literal);
		try {
			State = 931;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 924;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 925;
				Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 926;
				Match(StringLiteral);
				}
				break;
			case BackTick:
				EnterOuterAlt(_localctx, 4);
				{
				State = 927;
				templateStringLiteral();
				}
				break;
			case RegularExpressionLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 928;
				Match(RegularExpressionLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 929;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 930;
				bigintLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackTick() { return GetTokens(JavaScriptParser.BackTick); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackTick(int i) {
			return GetToken(JavaScriptParser.BackTick, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext[] templateStringAtom() {
			return GetRuleContexts<TemplateStringAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext templateStringAtom(int i) {
			return GetRuleContext<TemplateStringAtomContext>(i);
		}
		public TemplateStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringLiteralContext templateStringLiteral() {
		TemplateStringLiteralContext _localctx = new TemplateStringLiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_templateStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			Match(BackTick);
			State = 937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateStringStartExpression || _la==TemplateStringAtom) {
				{
				{
				State = 934;
				templateStringAtom();
				}
				}
				State = 939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 940;
			Match(BackTick);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringAtom() { return GetToken(JavaScriptParser.TemplateStringAtom, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(JavaScriptParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateCloseBrace() { return GetToken(JavaScriptParser.TemplateCloseBrace, 0); }
		public TemplateStringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringAtom(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringAtomContext templateStringAtom() {
		TemplateStringAtomContext _localctx = new TemplateStringAtomContext(Context, State);
		EnterRule(_localctx, 132, RULE_templateStringAtom);
		try {
			State = 947;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateStringAtom:
				EnterOuterAlt(_localctx, 1);
				{
				State = 942;
				Match(TemplateStringAtom);
				}
				break;
			case TemplateStringStartExpression:
				EnterOuterAlt(_localctx, 2);
				{
				State = 943;
				Match(TemplateStringStartExpression);
				State = 944;
				singleExpression(0);
				State = 945;
				Match(TemplateCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(JavaScriptParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(JavaScriptParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(JavaScriptParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(JavaScriptParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(JavaScriptParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 134, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(JavaScriptParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(JavaScriptParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(JavaScriptParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(JavaScriptParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBigintLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBigintLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 138, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			if (!(this.n("get"))) throw new FailedPredicateException(this, "this.n(\"get\")");
			State = 954;
			identifier();
			State = 955;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 140, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			if (!(this.n("set"))) throw new FailedPredicateException(this, "this.n(\"set\")");
			State = 958;
			identifier();
			State = 959;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 142, RULE_identifierName);
		try {
			State = 963;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 961;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 962;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4113L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 146, RULE_reservedWord);
		try {
			State = 970;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
				EnterOuterAlt(_localctx, 1);
				{
				State = 967;
				keyword();
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 968;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 969;
				Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(JavaScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(JavaScriptParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Let_Context let_() {
			return GetRuleContext<Let_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(JavaScriptParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(JavaScriptParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(JavaScriptParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Package() { return GetToken(JavaScriptParser.Package, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(JavaScriptParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(JavaScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 148, RULE_keyword);
		try {
			State = 1018;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
				EnterOuterAlt(_localctx, 1);
				{
				State = 972;
				Match(Break);
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 973;
				Match(Do);
				}
				break;
			case Instanceof:
				EnterOuterAlt(_localctx, 3);
				{
				State = 974;
				Match(Instanceof);
				}
				break;
			case Typeof:
				EnterOuterAlt(_localctx, 4);
				{
				State = 975;
				Match(Typeof);
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 5);
				{
				State = 976;
				Match(Case);
				}
				break;
			case Else:
				EnterOuterAlt(_localctx, 6);
				{
				State = 977;
				Match(Else);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 7);
				{
				State = 978;
				Match(New);
				}
				break;
			case Var:
				EnterOuterAlt(_localctx, 8);
				{
				State = 979;
				Match(Var);
				}
				break;
			case Catch:
				EnterOuterAlt(_localctx, 9);
				{
				State = 980;
				Match(Catch);
				}
				break;
			case Finally:
				EnterOuterAlt(_localctx, 10);
				{
				State = 981;
				Match(Finally);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 11);
				{
				State = 982;
				Match(Return);
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 12);
				{
				State = 983;
				Match(Void);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 13);
				{
				State = 984;
				Match(Continue);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 14);
				{
				State = 985;
				Match(For);
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 15);
				{
				State = 986;
				Match(Switch);
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 16);
				{
				State = 987;
				Match(While);
				}
				break;
			case Debugger:
				EnterOuterAlt(_localctx, 17);
				{
				State = 988;
				Match(Debugger);
				}
				break;
			case Function_:
				EnterOuterAlt(_localctx, 18);
				{
				State = 989;
				Match(Function_);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 19);
				{
				State = 990;
				Match(This);
				}
				break;
			case With:
				EnterOuterAlt(_localctx, 20);
				{
				State = 991;
				Match(With);
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 21);
				{
				State = 992;
				Match(Default);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 22);
				{
				State = 993;
				Match(If);
				}
				break;
			case Throw:
				EnterOuterAlt(_localctx, 23);
				{
				State = 994;
				Match(Throw);
				}
				break;
			case Delete:
				EnterOuterAlt(_localctx, 24);
				{
				State = 995;
				Match(Delete);
				}
				break;
			case In:
				EnterOuterAlt(_localctx, 25);
				{
				State = 996;
				Match(In);
				}
				break;
			case Try:
				EnterOuterAlt(_localctx, 26);
				{
				State = 997;
				Match(Try);
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 27);
				{
				State = 998;
				Match(Class);
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 28);
				{
				State = 999;
				Match(Enum);
				}
				break;
			case Extends:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1000;
				Match(Extends);
				}
				break;
			case Super:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1001;
				Match(Super);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1002;
				Match(Const);
				}
				break;
			case Export:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1003;
				Match(Export);
				}
				break;
			case Import:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1004;
				Match(Import);
				}
				break;
			case Implements:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1005;
				Match(Implements);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1006;
				let_();
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1007;
				Match(Private);
				}
				break;
			case Public:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1008;
				Match(Public);
				}
				break;
			case Interface:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1009;
				Match(Interface);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1010;
				Match(Package);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1011;
				Match(Protected);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1012;
				Match(Static);
				}
				break;
			case Yield:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1013;
				Match(Yield);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1014;
				Match(Async);
				}
				break;
			case Await:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1015;
				Match(Await);
				}
				break;
			case From:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1016;
				Match(From);
				}
				break;
			case As:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1017;
				Match(As);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StrictLet() { return GetToken(JavaScriptParser.StrictLet, 0); }
		public Let_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLet_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLet_(this);
		}
	}

	[RuleVersion(0)]
	public Let_Context let_() {
		Let_Context _localctx = new Let_Context(Context, State);
		EnterRule(_localctx, 150, RULE_let_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			_la = TokenStream.LA(1);
			if ( !(_la==StrictLet || _la==NonStrictLet) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 152, RULE_eos);
		try {
			State = 1026;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1022;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1023;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1024;
				if (!(this.lineTerminatorAhead())) throw new FailedPredicateException(this, "this.lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1025;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 21: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 23: return continueStatement_sempred((ContinueStatementContext)_localctx, predIndex);
		case 24: return breakStatement_sempred((BreakStatementContext)_localctx, predIndex);
		case 25: return returnStatement_sempred((ReturnStatementContext)_localctx, predIndex);
		case 26: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 34: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 42: return classElement_sempred((ClassElementContext)_localctx, predIndex);
		case 57: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 69: return getter_sempred((GetterContext)_localctx, predIndex);
		case 70: return setter_sempred((SetterContext)_localctx, predIndex);
		case 76: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.notOpenBraceAndNotFunction();
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.p("of");
		}
		return true;
	}
	private bool continueStatement_sempred(ContinueStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.notLineTerminator();
		}
		return true;
	}
	private bool breakStatement_sempred(BreakStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return this.notLineTerminator();
		}
		return true;
	}
	private bool returnStatement_sempred(ReturnStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return this.notLineTerminator();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return this.notLineTerminator();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return this.notLineTerminator();
		}
		return true;
	}
	private bool classElement_sempred(ClassElementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return this.n("static");
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 27);
		case 9: return Precpred(Context, 26);
		case 10: return Precpred(Context, 25);
		case 11: return Precpred(Context, 24);
		case 12: return Precpred(Context, 23);
		case 13: return Precpred(Context, 22);
		case 14: return Precpred(Context, 21);
		case 15: return Precpred(Context, 20);
		case 16: return Precpred(Context, 19);
		case 17: return Precpred(Context, 18);
		case 18: return Precpred(Context, 17);
		case 19: return Precpred(Context, 16);
		case 20: return Precpred(Context, 15);
		case 21: return Precpred(Context, 14);
		case 22: return Precpred(Context, 13);
		case 23: return Precpred(Context, 12);
		case 24: return Precpred(Context, 11);
		case 25: return Precpred(Context, 45);
		case 26: return Precpred(Context, 44);
		case 27: return Precpred(Context, 41);
		case 28: return Precpred(Context, 39);
		case 29: return this.notLineTerminator();
		case 30: return Precpred(Context, 38);
		case 31: return this.notLineTerminator();
		case 32: return Precpred(Context, 9);
		}
		return true;
	}
	private bool getter_sempred(GetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return this.n("get");
		}
		return true;
	}
	private bool setter_sempred(SetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.n("set");
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return this.lineTerminatorAhead();
		case 36: return this.closeBrace();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,127,1029,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,3,0,156,
		8,0,1,0,3,0,159,8,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,185,8,2,1,3,1,3,3,3,
		189,8,3,1,3,1,3,1,4,4,4,194,8,4,11,4,12,4,195,1,5,1,5,1,5,1,6,3,6,202,
		8,6,1,6,1,6,3,6,206,8,6,1,6,1,6,1,6,1,6,1,6,3,6,213,8,6,1,7,1,7,1,7,1,
		7,5,7,219,8,7,10,7,12,7,222,9,7,1,7,1,7,3,7,226,8,7,3,7,228,8,7,1,7,1,
		7,1,8,1,8,1,8,1,9,1,9,3,9,237,8,9,1,9,1,9,3,9,241,8,9,1,10,1,10,1,10,1,
		11,1,11,1,11,3,11,249,8,11,1,12,1,12,1,12,3,12,254,8,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,3,12,263,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,271,
		8,13,1,13,1,13,3,13,275,8,13,1,14,1,14,1,14,3,14,280,8,14,1,15,1,15,1,
		15,1,16,1,16,1,16,1,16,5,16,289,8,16,10,16,12,16,292,9,16,1,17,1,17,1,
		17,3,17,297,8,17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,3,20,312,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,332,8,21,1,21,1,21,3,21,
		336,8,21,1,21,1,21,3,21,340,8,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,348,
		8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,357,8,21,1,21,1,21,1,21,3,
		21,362,8,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,370,8,21,1,22,1,22,1,22,
		3,22,375,8,22,1,23,1,23,1,23,3,23,380,8,23,1,23,1,23,1,24,1,24,1,24,3,
		24,387,8,24,1,24,1,24,1,25,1,25,1,25,3,25,394,8,25,1,25,1,25,1,26,1,26,
		1,26,3,26,401,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,
		28,1,28,1,28,1,28,1,29,1,29,3,29,419,8,29,1,29,1,29,3,29,423,8,29,3,29,
		425,8,29,1,29,1,29,1,30,4,30,430,8,30,11,30,12,30,431,1,31,1,31,1,31,1,
		31,3,31,438,8,31,1,32,1,32,1,32,3,32,443,8,32,1,33,1,33,1,33,1,33,1,34,
		1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,458,8,35,1,35,3,35,461,8,
		35,1,36,1,36,1,36,3,36,466,8,36,1,36,3,36,469,8,36,1,36,1,36,1,37,1,37,
		1,37,1,38,1,38,1,38,1,39,3,39,480,8,39,1,39,1,39,3,39,484,8,39,1,39,1,
		39,1,39,3,39,489,8,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,3,41,
		500,8,41,1,41,1,41,5,41,504,8,41,10,41,12,41,507,9,41,1,41,1,41,1,42,1,
		42,1,42,1,42,5,42,515,8,42,10,42,12,42,518,9,42,1,42,1,42,1,42,1,42,1,
		42,1,42,3,42,526,8,42,1,42,1,42,3,42,530,8,42,1,42,1,42,1,42,1,42,3,42,
		536,8,42,1,43,3,43,539,8,43,1,43,3,43,542,8,43,1,43,1,43,1,43,3,43,547,
		8,43,1,43,1,43,1,43,1,43,3,43,553,8,43,1,43,3,43,556,8,43,1,43,1,43,1,
		43,1,43,1,43,1,43,3,43,564,8,43,1,43,3,43,567,8,43,1,43,1,43,1,43,3,43,
		572,8,43,1,43,1,43,1,43,3,43,577,8,43,1,44,1,44,1,44,5,44,582,8,44,10,
		44,12,44,585,9,44,1,44,1,44,3,44,589,8,44,1,44,3,44,592,8,44,1,45,1,45,
		1,45,3,45,597,8,45,1,46,1,46,1,46,1,47,1,47,3,47,604,8,47,1,47,1,47,1,
		48,4,48,609,8,48,11,48,12,48,610,1,49,1,49,1,49,1,49,1,50,5,50,618,8,50,
		10,50,12,50,621,9,50,1,50,3,50,624,8,50,1,50,4,50,627,8,50,11,50,12,50,
		628,1,50,5,50,632,8,50,10,50,12,50,635,9,50,1,50,5,50,638,8,50,10,50,12,
		50,641,9,50,1,51,3,51,644,8,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,3,52,659,8,52,1,52,3,52,662,8,52,1,52,1,52,1,
		52,3,52,667,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,3,52,684,8,52,1,52,3,52,687,8,52,1,53,1,53,1,53,1,
		53,1,53,1,53,1,53,3,53,696,8,53,1,54,1,54,1,54,1,54,5,54,702,8,54,10,54,
		12,54,705,9,54,1,54,3,54,708,8,54,3,54,710,8,54,1,54,1,54,1,55,3,55,715,
		8,55,1,55,1,55,3,55,719,8,55,1,56,1,56,1,56,5,56,724,8,56,10,56,12,56,
		727,9,56,1,57,1,57,1,57,1,57,3,57,733,8,57,1,57,1,57,1,57,1,57,1,57,1,
		57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
		57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
		57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,781,
		8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
		1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
		1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
		1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
		1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,845,8,57,1,57,1,57,3,57,849,8,
		57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,862,8,57,
		10,57,12,57,865,9,57,1,58,1,58,1,58,3,58,870,8,58,1,59,1,59,1,59,1,59,
		5,59,876,8,59,10,59,12,59,879,9,59,1,59,3,59,882,8,59,3,59,884,8,59,1,
		59,1,59,1,60,1,60,3,60,890,8,60,1,60,1,60,3,60,894,8,60,1,60,1,60,3,60,
		898,8,60,1,60,1,60,1,60,3,60,903,8,60,1,60,1,60,1,60,1,60,3,60,909,8,60,
		1,61,1,61,1,61,3,61,914,8,61,1,61,3,61,917,8,61,1,62,1,62,3,62,921,8,62,
		1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,932,8,64,1,65,1,65,5,
		65,936,8,65,10,65,12,65,939,9,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,3,
		66,948,8,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,
		1,71,1,71,3,71,964,8,71,1,72,1,72,1,73,1,73,1,73,3,73,971,8,73,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,3,74,1019,8,74,1,75,1,75,1,76,1,76,1,76,1,76,3,76,1027,8,
		76,1,76,0,1,114,77,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,140,142,144,146,148,150,152,0,10,1,0,25,27,
		1,0,21,22,1,0,31,33,1,0,34,37,1,0,38,41,1,0,47,58,1,0,62,66,1,0,67,70,
		3,0,106,106,110,110,118,118,1,0,109,110,1193,0,155,1,0,0,0,2,162,1,0,0,
		0,4,184,1,0,0,0,6,186,1,0,0,0,8,193,1,0,0,0,10,197,1,0,0,0,12,212,1,0,
		0,0,14,214,1,0,0,0,16,231,1,0,0,0,18,236,1,0,0,0,20,242,1,0,0,0,22,245,
		1,0,0,0,24,262,1,0,0,0,26,274,1,0,0,0,28,279,1,0,0,0,30,281,1,0,0,0,32,
		284,1,0,0,0,34,293,1,0,0,0,36,298,1,0,0,0,38,300,1,0,0,0,40,304,1,0,0,
		0,42,369,1,0,0,0,44,374,1,0,0,0,46,376,1,0,0,0,48,383,1,0,0,0,50,390,1,
		0,0,0,52,397,1,0,0,0,54,404,1,0,0,0,56,410,1,0,0,0,58,416,1,0,0,0,60,429,
		1,0,0,0,62,433,1,0,0,0,64,439,1,0,0,0,66,444,1,0,0,0,68,448,1,0,0,0,70,
		453,1,0,0,0,72,462,1,0,0,0,74,472,1,0,0,0,76,475,1,0,0,0,78,479,1,0,0,
		0,80,493,1,0,0,0,82,499,1,0,0,0,84,535,1,0,0,0,86,576,1,0,0,0,88,591,1,
		0,0,0,90,593,1,0,0,0,92,598,1,0,0,0,94,601,1,0,0,0,96,608,1,0,0,0,98,612,
		1,0,0,0,100,619,1,0,0,0,102,643,1,0,0,0,104,686,1,0,0,0,106,695,1,0,0,
		0,108,697,1,0,0,0,110,714,1,0,0,0,112,720,1,0,0,0,114,780,1,0,0,0,116,
		869,1,0,0,0,118,871,1,0,0,0,120,908,1,0,0,0,122,916,1,0,0,0,124,920,1,
		0,0,0,126,922,1,0,0,0,128,931,1,0,0,0,130,933,1,0,0,0,132,947,1,0,0,0,
		134,949,1,0,0,0,136,951,1,0,0,0,138,953,1,0,0,0,140,957,1,0,0,0,142,963,
		1,0,0,0,144,965,1,0,0,0,146,970,1,0,0,0,148,1018,1,0,0,0,150,1020,1,0,
		0,0,152,1026,1,0,0,0,154,156,5,1,0,0,155,154,1,0,0,0,155,156,1,0,0,0,156,
		158,1,0,0,0,157,159,3,96,48,0,158,157,1,0,0,0,158,159,1,0,0,0,159,160,
		1,0,0,0,160,161,5,0,0,1,161,1,1,0,0,0,162,163,3,4,2,0,163,3,1,0,0,0,164,
		185,3,6,3,0,165,185,3,30,15,0,166,185,3,10,5,0,167,185,3,24,12,0,168,185,
		3,36,18,0,169,185,3,80,40,0,170,185,3,38,19,0,171,185,3,40,20,0,172,185,
		3,42,21,0,173,185,3,46,23,0,174,185,3,48,24,0,175,185,3,50,25,0,176,185,
		3,52,26,0,177,185,3,54,27,0,178,185,3,66,33,0,179,185,3,56,28,0,180,185,
		3,68,34,0,181,185,3,70,35,0,182,185,3,76,38,0,183,185,3,78,39,0,184,164,
		1,0,0,0,184,165,1,0,0,0,184,166,1,0,0,0,184,167,1,0,0,0,184,168,1,0,0,
		0,184,169,1,0,0,0,184,170,1,0,0,0,184,171,1,0,0,0,184,172,1,0,0,0,184,
		173,1,0,0,0,184,174,1,0,0,0,184,175,1,0,0,0,184,176,1,0,0,0,184,177,1,
		0,0,0,184,178,1,0,0,0,184,179,1,0,0,0,184,180,1,0,0,0,184,181,1,0,0,0,
		184,182,1,0,0,0,184,183,1,0,0,0,185,5,1,0,0,0,186,188,5,9,0,0,187,189,
		3,8,4,0,188,187,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,191,5,11,0,
		0,191,7,1,0,0,0,192,194,3,4,2,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,
		1,0,0,0,195,196,1,0,0,0,196,9,1,0,0,0,197,198,5,105,0,0,198,199,3,12,6,
		0,199,11,1,0,0,0,200,202,3,16,8,0,201,200,1,0,0,0,201,202,1,0,0,0,202,
		205,1,0,0,0,203,206,3,18,9,0,204,206,3,14,7,0,205,203,1,0,0,0,205,204,
		1,0,0,0,206,207,1,0,0,0,207,208,3,20,10,0,208,209,3,152,76,0,209,213,1,
		0,0,0,210,211,5,119,0,0,211,213,3,152,76,0,212,201,1,0,0,0,212,210,1,0,
		0,0,213,13,1,0,0,0,214,220,5,9,0,0,215,216,3,22,11,0,216,217,5,13,0,0,
		217,219,1,0,0,0,218,215,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,
		1,0,0,0,221,227,1,0,0,0,222,220,1,0,0,0,223,225,3,22,11,0,224,226,5,13,
		0,0,225,224,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,223,1,0,0,0,227,
		228,1,0,0,0,228,229,1,0,0,0,229,230,5,11,0,0,230,15,1,0,0,0,231,232,3,
		22,11,0,232,233,5,13,0,0,233,17,1,0,0,0,234,237,5,25,0,0,235,237,3,142,
		71,0,236,234,1,0,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,239,5,97,0,0,
		239,241,3,142,71,0,240,238,1,0,0,0,240,241,1,0,0,0,241,19,1,0,0,0,242,
		243,5,98,0,0,243,244,5,119,0,0,244,21,1,0,0,0,245,248,3,142,71,0,246,247,
		5,97,0,0,247,249,3,142,71,0,248,246,1,0,0,0,248,249,1,0,0,0,249,23,1,0,
		0,0,250,253,5,104,0,0,251,254,3,26,13,0,252,254,3,28,14,0,253,251,1,0,
		0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,256,3,152,76,0,256,263,1,0,0,0,
		257,258,5,104,0,0,258,259,5,91,0,0,259,260,3,114,57,0,260,261,3,152,76,
		0,261,263,1,0,0,0,262,250,1,0,0,0,262,257,1,0,0,0,263,25,1,0,0,0,264,265,
		3,18,9,0,265,266,3,20,10,0,266,267,3,152,76,0,267,275,1,0,0,0,268,270,
		3,14,7,0,269,271,3,20,10,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,
		0,0,272,273,3,152,76,0,273,275,1,0,0,0,274,264,1,0,0,0,274,268,1,0,0,0,
		275,27,1,0,0,0,276,280,3,30,15,0,277,280,3,80,40,0,278,280,3,78,39,0,279,
		276,1,0,0,0,279,277,1,0,0,0,279,278,1,0,0,0,280,29,1,0,0,0,281,282,3,32,
		16,0,282,283,3,152,76,0,283,31,1,0,0,0,284,285,3,44,22,0,285,290,3,34,
		17,0,286,287,5,13,0,0,287,289,3,34,17,0,288,286,1,0,0,0,289,292,1,0,0,
		0,290,288,1,0,0,0,290,291,1,0,0,0,291,33,1,0,0,0,292,290,1,0,0,0,293,296,
		3,116,58,0,294,295,5,14,0,0,295,297,3,114,57,0,296,294,1,0,0,0,296,297,
		1,0,0,0,297,35,1,0,0,0,298,299,5,12,0,0,299,37,1,0,0,0,300,301,4,19,0,
		0,301,302,3,112,56,0,302,303,3,152,76,0,303,39,1,0,0,0,304,305,5,92,0,
		0,305,306,5,7,0,0,306,307,3,112,56,0,307,308,5,8,0,0,308,311,3,4,2,0,309,
		310,5,76,0,0,310,312,3,4,2,0,311,309,1,0,0,0,311,312,1,0,0,0,312,41,1,
		0,0,0,313,314,5,72,0,0,314,315,3,4,2,0,315,316,5,86,0,0,316,317,5,7,0,
		0,317,318,3,112,56,0,318,319,5,8,0,0,319,320,3,152,76,0,320,370,1,0,0,
		0,321,322,5,86,0,0,322,323,5,7,0,0,323,324,3,112,56,0,324,325,5,8,0,0,
		325,326,3,4,2,0,326,370,1,0,0,0,327,328,5,84,0,0,328,331,5,7,0,0,329,332,
		3,112,56,0,330,332,3,32,16,0,331,329,1,0,0,0,331,330,1,0,0,0,331,332,1,
		0,0,0,332,333,1,0,0,0,333,335,5,12,0,0,334,336,3,112,56,0,335,334,1,0,
		0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,339,5,12,0,0,338,340,3,112,56,
		0,339,338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,5,8,0,0,342,
		370,3,4,2,0,343,344,5,84,0,0,344,347,5,7,0,0,345,348,3,114,57,0,346,348,
		3,32,16,0,347,345,1,0,0,0,347,346,1,0,0,0,348,349,1,0,0,0,349,350,5,95,
		0,0,350,351,3,112,56,0,351,352,5,8,0,0,352,353,3,4,2,0,353,370,1,0,0,0,
		354,356,5,84,0,0,355,357,5,107,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,
		358,1,0,0,0,358,361,5,7,0,0,359,362,3,114,57,0,360,362,3,32,16,0,361,359,
		1,0,0,0,361,360,1,0,0,0,362,363,1,0,0,0,363,364,3,144,72,0,364,365,4,21,
		1,0,365,366,3,112,56,0,366,367,5,8,0,0,367,368,3,4,2,0,368,370,1,0,0,0,
		369,313,1,0,0,0,369,321,1,0,0,0,369,327,1,0,0,0,369,343,1,0,0,0,369,354,
		1,0,0,0,370,43,1,0,0,0,371,375,5,78,0,0,372,375,3,150,75,0,373,375,5,103,
		0,0,374,371,1,0,0,0,374,372,1,0,0,0,374,373,1,0,0,0,375,45,1,0,0,0,376,
		379,5,83,0,0,377,378,4,23,2,0,378,380,3,144,72,0,379,377,1,0,0,0,379,380,
		1,0,0,0,380,381,1,0,0,0,381,382,3,152,76,0,382,47,1,0,0,0,383,386,5,71,
		0,0,384,385,4,24,3,0,385,387,3,144,72,0,386,384,1,0,0,0,386,387,1,0,0,
		0,387,388,1,0,0,0,388,389,3,152,76,0,389,49,1,0,0,0,390,393,5,81,0,0,391,
		392,4,25,4,0,392,394,3,112,56,0,393,391,1,0,0,0,393,394,1,0,0,0,394,395,
		1,0,0,0,395,396,3,152,76,0,396,51,1,0,0,0,397,400,5,117,0,0,398,399,4,
		26,5,0,399,401,3,112,56,0,400,398,1,0,0,0,400,401,1,0,0,0,401,402,1,0,
		0,0,402,403,3,152,76,0,403,53,1,0,0,0,404,405,5,90,0,0,405,406,5,7,0,0,
		406,407,3,112,56,0,407,408,5,8,0,0,408,409,3,4,2,0,409,55,1,0,0,0,410,
		411,5,85,0,0,411,412,5,7,0,0,412,413,3,112,56,0,413,414,5,8,0,0,414,415,
		3,58,29,0,415,57,1,0,0,0,416,418,5,9,0,0,417,419,3,60,30,0,418,417,1,0,
		0,0,418,419,1,0,0,0,419,424,1,0,0,0,420,422,3,64,32,0,421,423,3,60,30,
		0,422,421,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,420,1,0,0,0,424,
		425,1,0,0,0,425,426,1,0,0,0,426,427,5,11,0,0,427,59,1,0,0,0,428,430,3,
		62,31,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,
		0,432,61,1,0,0,0,433,434,5,75,0,0,434,435,3,112,56,0,435,437,5,16,0,0,
		436,438,3,8,4,0,437,436,1,0,0,0,437,438,1,0,0,0,438,63,1,0,0,0,439,440,
		5,91,0,0,440,442,5,16,0,0,441,443,3,8,4,0,442,441,1,0,0,0,442,443,1,0,
		0,0,443,65,1,0,0,0,444,445,3,144,72,0,445,446,5,16,0,0,446,447,3,4,2,0,
		447,67,1,0,0,0,448,449,5,93,0,0,449,450,4,34,6,0,450,451,3,112,56,0,451,
		452,3,152,76,0,452,69,1,0,0,0,453,454,5,96,0,0,454,460,3,6,3,0,455,457,
		3,72,36,0,456,458,3,74,37,0,457,456,1,0,0,0,457,458,1,0,0,0,458,461,1,
		0,0,0,459,461,3,74,37,0,460,455,1,0,0,0,460,459,1,0,0,0,461,71,1,0,0,0,
		462,468,5,79,0,0,463,465,5,7,0,0,464,466,3,116,58,0,465,464,1,0,0,0,465,
		466,1,0,0,0,466,467,1,0,0,0,467,469,5,8,0,0,468,463,1,0,0,0,468,469,1,
		0,0,0,469,470,1,0,0,0,470,471,3,6,3,0,471,73,1,0,0,0,472,473,5,80,0,0,
		473,474,3,6,3,0,474,75,1,0,0,0,475,476,5,87,0,0,476,477,3,152,76,0,477,
		77,1,0,0,0,478,480,5,106,0,0,479,478,1,0,0,0,479,480,1,0,0,0,480,481,1,
		0,0,0,481,483,5,88,0,0,482,484,5,25,0,0,483,482,1,0,0,0,483,484,1,0,0,
		0,484,485,1,0,0,0,485,486,3,144,72,0,486,488,5,7,0,0,487,489,3,88,44,0,
		488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,491,5,8,0,0,491,492,
		3,94,47,0,492,79,1,0,0,0,493,494,5,99,0,0,494,495,3,144,72,0,495,496,3,
		82,41,0,496,81,1,0,0,0,497,498,5,101,0,0,498,500,3,114,57,0,499,497,1,
		0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,505,5,9,0,0,502,504,3,84,42,
		0,503,502,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,
		508,1,0,0,0,507,505,1,0,0,0,508,509,5,11,0,0,509,83,1,0,0,0,510,515,5,
		116,0,0,511,512,4,42,7,0,512,515,3,144,72,0,513,515,5,106,0,0,514,510,
		1,0,0,0,514,511,1,0,0,0,514,513,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,
		0,516,517,1,0,0,0,517,525,1,0,0,0,518,516,1,0,0,0,519,526,3,86,43,0,520,
		521,3,116,58,0,521,522,5,14,0,0,522,523,3,118,59,0,523,524,5,12,0,0,524,
		526,1,0,0,0,525,519,1,0,0,0,525,520,1,0,0,0,526,536,1,0,0,0,527,536,3,
		36,18,0,528,530,5,30,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,
		0,531,532,3,106,53,0,532,533,5,14,0,0,533,534,3,114,57,0,534,536,1,0,0,
		0,535,516,1,0,0,0,535,527,1,0,0,0,535,529,1,0,0,0,536,85,1,0,0,0,537,539,
		5,25,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,541,1,0,0,0,540,542,5,30,
		0,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,544,3,106,53,0,
		544,546,5,7,0,0,545,547,3,88,44,0,546,545,1,0,0,0,546,547,1,0,0,0,547,
		548,1,0,0,0,548,549,5,8,0,0,549,550,3,94,47,0,550,577,1,0,0,0,551,553,
		5,25,0,0,552,551,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,556,5,30,
		0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,3,138,69,0,
		558,559,5,7,0,0,559,560,5,8,0,0,560,561,3,94,47,0,561,577,1,0,0,0,562,
		564,5,25,0,0,563,562,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,567,5,
		30,0,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,569,3,140,70,
		0,569,571,5,7,0,0,570,572,3,88,44,0,571,570,1,0,0,0,571,572,1,0,0,0,572,
		573,1,0,0,0,573,574,5,8,0,0,574,575,3,94,47,0,575,577,1,0,0,0,576,538,
		1,0,0,0,576,552,1,0,0,0,576,563,1,0,0,0,577,87,1,0,0,0,578,583,3,90,45,
		0,579,580,5,13,0,0,580,582,3,90,45,0,581,579,1,0,0,0,582,585,1,0,0,0,583,
		581,1,0,0,0,583,584,1,0,0,0,584,588,1,0,0,0,585,583,1,0,0,0,586,587,5,
		13,0,0,587,589,3,92,46,0,588,586,1,0,0,0,588,589,1,0,0,0,589,592,1,0,0,
		0,590,592,3,92,46,0,591,578,1,0,0,0,591,590,1,0,0,0,592,89,1,0,0,0,593,
		596,3,116,58,0,594,595,5,14,0,0,595,597,3,114,57,0,596,594,1,0,0,0,596,
		597,1,0,0,0,597,91,1,0,0,0,598,599,5,17,0,0,599,600,3,114,57,0,600,93,
		1,0,0,0,601,603,5,9,0,0,602,604,3,96,48,0,603,602,1,0,0,0,603,604,1,0,
		0,0,604,605,1,0,0,0,605,606,5,11,0,0,606,95,1,0,0,0,607,609,3,2,1,0,608,
		607,1,0,0,0,609,610,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,97,1,0,
		0,0,612,613,5,5,0,0,613,614,3,100,50,0,614,615,5,6,0,0,615,99,1,0,0,0,
		616,618,5,13,0,0,617,616,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,
		1,0,0,0,620,623,1,0,0,0,621,619,1,0,0,0,622,624,3,102,51,0,623,622,1,0,
		0,0,623,624,1,0,0,0,624,633,1,0,0,0,625,627,5,13,0,0,626,625,1,0,0,0,627,
		628,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,632,3,
		102,51,0,631,626,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,
		0,634,639,1,0,0,0,635,633,1,0,0,0,636,638,5,13,0,0,637,636,1,0,0,0,638,
		641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,101,1,0,0,0,641,639,1,
		0,0,0,642,644,5,17,0,0,643,642,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,
		645,646,3,114,57,0,646,103,1,0,0,0,647,648,3,106,53,0,648,649,5,16,0,0,
		649,650,3,114,57,0,650,687,1,0,0,0,651,652,5,5,0,0,652,653,3,114,57,0,
		653,654,5,6,0,0,654,655,5,16,0,0,655,656,3,114,57,0,656,687,1,0,0,0,657,
		659,5,106,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,662,
		5,25,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,664,3,106,
		53,0,664,666,5,7,0,0,665,667,3,88,44,0,666,665,1,0,0,0,666,667,1,0,0,0,
		667,668,1,0,0,0,668,669,5,8,0,0,669,670,3,94,47,0,670,687,1,0,0,0,671,
		672,3,138,69,0,672,673,5,7,0,0,673,674,5,8,0,0,674,675,3,94,47,0,675,687,
		1,0,0,0,676,677,3,140,70,0,677,678,5,7,0,0,678,679,3,90,45,0,679,680,5,
		8,0,0,680,681,3,94,47,0,681,687,1,0,0,0,682,684,5,17,0,0,683,682,1,0,0,
		0,683,684,1,0,0,0,684,685,1,0,0,0,685,687,3,114,57,0,686,647,1,0,0,0,686,
		651,1,0,0,0,686,658,1,0,0,0,686,671,1,0,0,0,686,676,1,0,0,0,686,683,1,
		0,0,0,687,105,1,0,0,0,688,696,3,142,71,0,689,696,5,119,0,0,690,696,3,134,
		67,0,691,692,5,5,0,0,692,693,3,114,57,0,693,694,5,6,0,0,694,696,1,0,0,
		0,695,688,1,0,0,0,695,689,1,0,0,0,695,690,1,0,0,0,695,691,1,0,0,0,696,
		107,1,0,0,0,697,709,5,7,0,0,698,703,3,110,55,0,699,700,5,13,0,0,700,702,
		3,110,55,0,701,699,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,
		0,0,704,707,1,0,0,0,705,703,1,0,0,0,706,708,5,13,0,0,707,706,1,0,0,0,707,
		708,1,0,0,0,708,710,1,0,0,0,709,698,1,0,0,0,709,710,1,0,0,0,710,711,1,
		0,0,0,711,712,5,8,0,0,712,109,1,0,0,0,713,715,5,17,0,0,714,713,1,0,0,0,
		714,715,1,0,0,0,715,718,1,0,0,0,716,719,3,114,57,0,717,719,3,144,72,0,
		718,716,1,0,0,0,718,717,1,0,0,0,719,111,1,0,0,0,720,725,3,114,57,0,721,
		722,5,13,0,0,722,724,3,114,57,0,723,721,1,0,0,0,724,727,1,0,0,0,725,723,
		1,0,0,0,725,726,1,0,0,0,726,113,1,0,0,0,727,725,1,0,0,0,728,729,6,57,-1,
		0,729,781,3,120,60,0,730,732,5,99,0,0,731,733,3,144,72,0,732,731,1,0,0,
		0,732,733,1,0,0,0,733,734,1,0,0,0,734,781,3,82,41,0,735,736,5,77,0,0,736,
		737,3,114,57,0,737,738,3,108,54,0,738,781,1,0,0,0,739,740,5,77,0,0,740,
		781,3,114,57,42,741,742,5,77,0,0,742,743,5,18,0,0,743,781,3,144,72,0,744,
		745,5,94,0,0,745,781,3,114,57,37,746,747,5,82,0,0,747,781,3,114,57,36,
		748,749,5,74,0,0,749,781,3,114,57,35,750,751,5,19,0,0,751,781,3,114,57,
		34,752,753,5,20,0,0,753,781,3,114,57,33,754,755,5,21,0,0,755,781,3,114,
		57,32,756,757,5,22,0,0,757,781,3,114,57,31,758,759,5,23,0,0,759,781,3,
		114,57,30,760,761,5,24,0,0,761,781,3,114,57,29,762,763,5,107,0,0,763,781,
		3,114,57,28,764,765,5,105,0,0,765,766,5,7,0,0,766,767,3,114,57,0,767,768,
		5,8,0,0,768,781,1,0,0,0,769,781,3,52,26,0,770,781,5,89,0,0,771,781,3,144,
		72,0,772,781,5,102,0,0,773,781,3,128,64,0,774,781,3,98,49,0,775,781,3,
		118,59,0,776,777,5,7,0,0,777,778,3,112,56,0,778,779,5,8,0,0,779,781,1,
		0,0,0,780,728,1,0,0,0,780,730,1,0,0,0,780,735,1,0,0,0,780,739,1,0,0,0,
		780,741,1,0,0,0,780,744,1,0,0,0,780,746,1,0,0,0,780,748,1,0,0,0,780,750,
		1,0,0,0,780,752,1,0,0,0,780,754,1,0,0,0,780,756,1,0,0,0,780,758,1,0,0,
		0,780,760,1,0,0,0,780,762,1,0,0,0,780,764,1,0,0,0,780,769,1,0,0,0,780,
		770,1,0,0,0,780,771,1,0,0,0,780,772,1,0,0,0,780,773,1,0,0,0,780,774,1,
		0,0,0,780,775,1,0,0,0,780,776,1,0,0,0,781,863,1,0,0,0,782,783,10,27,0,
		0,783,784,5,28,0,0,784,862,3,114,57,27,785,786,10,26,0,0,786,787,7,0,0,
		0,787,862,3,114,57,27,788,789,10,25,0,0,789,790,7,1,0,0,790,862,3,114,
		57,26,791,792,10,24,0,0,792,793,5,29,0,0,793,862,3,114,57,25,794,795,10,
		23,0,0,795,796,7,2,0,0,796,862,3,114,57,24,797,798,10,22,0,0,798,799,7,
		3,0,0,799,862,3,114,57,23,800,801,10,21,0,0,801,802,5,73,0,0,802,862,3,
		114,57,22,803,804,10,20,0,0,804,805,5,95,0,0,805,862,3,114,57,21,806,807,
		10,19,0,0,807,808,7,4,0,0,808,862,3,114,57,20,809,810,10,18,0,0,810,811,
		5,42,0,0,811,862,3,114,57,19,812,813,10,17,0,0,813,814,5,43,0,0,814,862,
		3,114,57,18,815,816,10,16,0,0,816,817,5,44,0,0,817,862,3,114,57,17,818,
		819,10,15,0,0,819,820,5,45,0,0,820,862,3,114,57,16,821,822,10,14,0,0,822,
		823,5,46,0,0,823,862,3,114,57,15,824,825,10,13,0,0,825,826,5,15,0,0,826,
		827,3,114,57,0,827,828,5,16,0,0,828,829,3,114,57,14,829,862,1,0,0,0,830,
		831,10,12,0,0,831,832,5,14,0,0,832,862,3,114,57,12,833,834,10,11,0,0,834,
		835,3,126,63,0,835,836,3,114,57,11,836,862,1,0,0,0,837,838,10,45,0,0,838,
		839,5,5,0,0,839,840,3,112,56,0,840,841,5,6,0,0,841,862,1,0,0,0,842,844,
		10,44,0,0,843,845,5,15,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,
		0,0,846,848,5,18,0,0,847,849,5,30,0,0,848,847,1,0,0,0,848,849,1,0,0,0,
		849,850,1,0,0,0,850,862,3,142,71,0,851,852,10,41,0,0,852,862,3,108,54,
		0,853,854,10,39,0,0,854,855,4,57,29,0,855,862,5,19,0,0,856,857,10,38,0,
		0,857,858,4,57,31,0,858,862,5,20,0,0,859,860,10,9,0,0,860,862,3,130,65,
		0,861,782,1,0,0,0,861,785,1,0,0,0,861,788,1,0,0,0,861,791,1,0,0,0,861,
		794,1,0,0,0,861,797,1,0,0,0,861,800,1,0,0,0,861,803,1,0,0,0,861,806,1,
		0,0,0,861,809,1,0,0,0,861,812,1,0,0,0,861,815,1,0,0,0,861,818,1,0,0,0,
		861,821,1,0,0,0,861,824,1,0,0,0,861,830,1,0,0,0,861,833,1,0,0,0,861,837,
		1,0,0,0,861,842,1,0,0,0,861,851,1,0,0,0,861,853,1,0,0,0,861,856,1,0,0,
		0,861,859,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,
		115,1,0,0,0,865,863,1,0,0,0,866,870,3,144,72,0,867,870,3,98,49,0,868,870,
		3,118,59,0,869,866,1,0,0,0,869,867,1,0,0,0,869,868,1,0,0,0,870,117,1,0,
		0,0,871,883,5,9,0,0,872,877,3,104,52,0,873,874,5,13,0,0,874,876,3,104,
		52,0,875,873,1,0,0,0,876,879,1,0,0,0,877,875,1,0,0,0,877,878,1,0,0,0,878,
		881,1,0,0,0,879,877,1,0,0,0,880,882,5,13,0,0,881,880,1,0,0,0,881,882,1,
		0,0,0,882,884,1,0,0,0,883,872,1,0,0,0,883,884,1,0,0,0,884,885,1,0,0,0,
		885,886,5,11,0,0,886,119,1,0,0,0,887,909,3,78,39,0,888,890,5,106,0,0,889,
		888,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,893,5,88,0,0,892,894,5,
		25,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,895,1,0,0,0,895,897,5,7,0,0,
		896,898,3,88,44,0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,
		900,5,8,0,0,900,909,3,94,47,0,901,903,5,106,0,0,902,901,1,0,0,0,902,903,
		1,0,0,0,903,904,1,0,0,0,904,905,3,122,61,0,905,906,5,59,0,0,906,907,3,
		124,62,0,907,909,1,0,0,0,908,887,1,0,0,0,908,889,1,0,0,0,908,902,1,0,0,
		0,909,121,1,0,0,0,910,917,3,144,72,0,911,913,5,7,0,0,912,914,3,88,44,0,
		913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,917,5,8,0,0,916,910,
		1,0,0,0,916,911,1,0,0,0,917,123,1,0,0,0,918,921,3,114,57,0,919,921,3,94,
		47,0,920,918,1,0,0,0,920,919,1,0,0,0,921,125,1,0,0,0,922,923,7,5,0,0,923,
		127,1,0,0,0,924,932,5,60,0,0,925,932,5,61,0,0,926,932,5,119,0,0,927,932,
		3,130,65,0,928,932,5,4,0,0,929,932,3,134,67,0,930,932,3,136,68,0,931,924,
		1,0,0,0,931,925,1,0,0,0,931,926,1,0,0,0,931,927,1,0,0,0,931,928,1,0,0,
		0,931,929,1,0,0,0,931,930,1,0,0,0,932,129,1,0,0,0,933,937,5,120,0,0,934,
		936,3,132,66,0,935,934,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,
		1,0,0,0,938,940,1,0,0,0,939,937,1,0,0,0,940,941,5,120,0,0,941,131,1,0,
		0,0,942,948,5,127,0,0,943,944,5,126,0,0,944,945,3,114,57,0,945,946,5,10,
		0,0,946,948,1,0,0,0,947,942,1,0,0,0,947,943,1,0,0,0,948,133,1,0,0,0,949,
		950,7,6,0,0,950,135,1,0,0,0,951,952,7,7,0,0,952,137,1,0,0,0,953,954,4,
		69,33,0,954,955,3,144,72,0,955,956,3,106,53,0,956,139,1,0,0,0,957,958,
		4,70,34,0,958,959,3,144,72,0,959,960,3,106,53,0,960,141,1,0,0,0,961,964,
		3,144,72,0,962,964,3,146,73,0,963,961,1,0,0,0,963,962,1,0,0,0,964,143,
		1,0,0,0,965,966,7,8,0,0,966,145,1,0,0,0,967,971,3,148,74,0,968,971,5,60,
		0,0,969,971,5,61,0,0,970,967,1,0,0,0,970,968,1,0,0,0,970,969,1,0,0,0,971,
		147,1,0,0,0,972,1019,5,71,0,0,973,1019,5,72,0,0,974,1019,5,73,0,0,975,
		1019,5,74,0,0,976,1019,5,75,0,0,977,1019,5,76,0,0,978,1019,5,77,0,0,979,
		1019,5,78,0,0,980,1019,5,79,0,0,981,1019,5,80,0,0,982,1019,5,81,0,0,983,
		1019,5,82,0,0,984,1019,5,83,0,0,985,1019,5,84,0,0,986,1019,5,85,0,0,987,
		1019,5,86,0,0,988,1019,5,87,0,0,989,1019,5,88,0,0,990,1019,5,89,0,0,991,
		1019,5,90,0,0,992,1019,5,91,0,0,993,1019,5,92,0,0,994,1019,5,93,0,0,995,
		1019,5,94,0,0,996,1019,5,95,0,0,997,1019,5,96,0,0,998,1019,5,99,0,0,999,
		1019,5,100,0,0,1000,1019,5,101,0,0,1001,1019,5,102,0,0,1002,1019,5,103,
		0,0,1003,1019,5,104,0,0,1004,1019,5,105,0,0,1005,1019,5,108,0,0,1006,1019,
		3,150,75,0,1007,1019,5,111,0,0,1008,1019,5,112,0,0,1009,1019,5,113,0,0,
		1010,1019,5,114,0,0,1011,1019,5,115,0,0,1012,1019,5,116,0,0,1013,1019,
		5,117,0,0,1014,1019,5,106,0,0,1015,1019,5,107,0,0,1016,1019,5,98,0,0,1017,
		1019,5,97,0,0,1018,972,1,0,0,0,1018,973,1,0,0,0,1018,974,1,0,0,0,1018,
		975,1,0,0,0,1018,976,1,0,0,0,1018,977,1,0,0,0,1018,978,1,0,0,0,1018,979,
		1,0,0,0,1018,980,1,0,0,0,1018,981,1,0,0,0,1018,982,1,0,0,0,1018,983,1,
		0,0,0,1018,984,1,0,0,0,1018,985,1,0,0,0,1018,986,1,0,0,0,1018,987,1,0,
		0,0,1018,988,1,0,0,0,1018,989,1,0,0,0,1018,990,1,0,0,0,1018,991,1,0,0,
		0,1018,992,1,0,0,0,1018,993,1,0,0,0,1018,994,1,0,0,0,1018,995,1,0,0,0,
		1018,996,1,0,0,0,1018,997,1,0,0,0,1018,998,1,0,0,0,1018,999,1,0,0,0,1018,
		1000,1,0,0,0,1018,1001,1,0,0,0,1018,1002,1,0,0,0,1018,1003,1,0,0,0,1018,
		1004,1,0,0,0,1018,1005,1,0,0,0,1018,1006,1,0,0,0,1018,1007,1,0,0,0,1018,
		1008,1,0,0,0,1018,1009,1,0,0,0,1018,1010,1,0,0,0,1018,1011,1,0,0,0,1018,
		1012,1,0,0,0,1018,1013,1,0,0,0,1018,1014,1,0,0,0,1018,1015,1,0,0,0,1018,
		1016,1,0,0,0,1018,1017,1,0,0,0,1019,149,1,0,0,0,1020,1021,7,9,0,0,1021,
		151,1,0,0,0,1022,1027,5,12,0,0,1023,1027,5,0,0,1,1024,1027,4,76,35,0,1025,
		1027,4,76,36,0,1026,1022,1,0,0,0,1026,1023,1,0,0,0,1026,1024,1,0,0,0,1026,
		1025,1,0,0,0,1027,153,1,0,0,0,112,155,158,184,188,195,201,205,212,220,
		225,227,236,240,248,253,262,270,274,279,290,296,311,331,335,339,347,356,
		361,369,374,379,386,393,400,418,422,424,431,437,442,457,460,465,468,479,
		483,488,499,505,514,516,525,529,535,538,541,546,552,555,563,566,571,576,
		583,588,591,596,603,610,619,623,628,633,639,643,658,661,666,683,686,695,
		703,707,709,714,718,725,732,780,844,848,861,863,869,877,881,883,889,893,
		897,902,908,913,916,920,931,937,947,963,970,1018,1026
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
