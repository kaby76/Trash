//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from xtext.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class xtextParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, RULE_ID=41, RULE_INT=42, RULE_STRING=43, RULE_ML_COMMENT=44, 
		RULE_SL_COMMENT=45, RULE_WS=46, RULE_ANY_OTHER=47;
	public const int
		RULE_start = 0, RULE_grammarID = 1, RULE_abstractRule = 2, RULE_abstractMetamodelDeclaration = 3, 
		RULE_generatedMetamodel = 4, RULE_referencedMetamodel = 5, RULE_annotation = 6, 
		RULE_parserRule_ = 7, RULE_ruleNameAndParams = 8, RULE_parameter = 9, 
		RULE_typeRef = 10, RULE_alternatives = 11, RULE_conditionalBranch = 12, 
		RULE_unorderedGroup = 13, RULE_group = 14, RULE_abstractToken = 15, RULE_abstractTokenWithCardinality = 16, 
		RULE_action = 17, RULE_abstractTerminal = 18, RULE_keyword = 19, RULE_ruleCall = 20, 
		RULE_namedArgument = 21, RULE_literalCondition = 22, RULE_disjunction = 23, 
		RULE_conjunction = 24, RULE_negation = 25, RULE_atom = 26, RULE_parenthesizedCondition = 27, 
		RULE_parameterReference = 28, RULE_terminalRuleCall = 29, RULE_ruleID = 30, 
		RULE_validID = 31, RULE_predicatedKeyword = 32, RULE_predicatedRuleCall = 33, 
		RULE_assignment = 34, RULE_assignableTerminal = 35, RULE_parenthesizedAssignableElement = 36, 
		RULE_assignableAlternatives = 37, RULE_crossReference = 38, RULE_crossReferenceableTerminal = 39, 
		RULE_parenthesizedElement = 40, RULE_predicatedGroup = 41, RULE_terminalRule = 42, 
		RULE_terminalAlternatives = 43, RULE_terminalGroup = 44, RULE_terminalToken = 45, 
		RULE_terminalTokenElement = 46, RULE_parenthesizedTerminalElement = 47, 
		RULE_abstractNegatedToken = 48, RULE_negatedToken = 49, RULE_untilToken = 50, 
		RULE_wildcard = 51, RULE_eOF = 52, RULE_characterRange = 53, RULE_enumRule = 54, 
		RULE_enumLiterals = 55, RULE_enumLiteralDeclaration = 56;
	public static readonly string[] ruleNames = {
		"start", "grammarID", "abstractRule", "abstractMetamodelDeclaration", 
		"generatedMetamodel", "referencedMetamodel", "annotation", "parserRule_", 
		"ruleNameAndParams", "parameter", "typeRef", "alternatives", "conditionalBranch", 
		"unorderedGroup", "group", "abstractToken", "abstractTokenWithCardinality", 
		"action", "abstractTerminal", "keyword", "ruleCall", "namedArgument", 
		"literalCondition", "disjunction", "conjunction", "negation", "atom", 
		"parenthesizedCondition", "parameterReference", "terminalRuleCall", "ruleID", 
		"validID", "predicatedKeyword", "predicatedRuleCall", "assignment", "assignableTerminal", 
		"parenthesizedAssignableElement", "assignableAlternatives", "crossReference", 
		"crossReferenceableTerminal", "parenthesizedElement", "predicatedGroup", 
		"terminalRule", "terminalAlternatives", "terminalGroup", "terminalToken", 
		"terminalTokenElement", "parenthesizedTerminalElement", "abstractNegatedToken", 
		"negatedToken", "untilToken", "wildcard", "eOF", "characterRange", "enumRule", 
		"enumLiterals", "enumLiteralDeclaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'grammar'", "'with'", "','", "'hidden'", "'('", "')'", "'.'", "'generate'", 
		"'as'", "'import'", "'@'", "'fragment'", "'*'", "'returns'", "':'", "';'", 
		"'<'", "'>'", "'::'", "'|'", "'&'", "'?'", "'+'", "'{'", "'='", "'+='", 
		"'current'", "'}'", "'true'", "'false'", "'!'", "'=>'", "'->'", "'?='", 
		"'['", "']'", "'terminal'", "'EOF'", "'..'", "'enum'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "RULE_ID", "RULE_INT", "RULE_STRING", "RULE_ML_COMMENT", 
		"RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "xtext.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static xtextParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public xtextParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public xtextParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(xtextParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrammarIDContext[] grammarID() {
			return GetRuleContexts<GrammarIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrammarIDContext grammarID(int i) {
			return GetRuleContext<GrammarIDContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractMetamodelDeclarationContext[] abstractMetamodelDeclaration() {
			return GetRuleContexts<AbstractMetamodelDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractMetamodelDeclarationContext abstractMetamodelDeclaration(int i) {
			return GetRuleContext<AbstractMetamodelDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractRuleContext[] abstractRule() {
			return GetRuleContexts<AbstractRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractRuleContext abstractRule(int i) {
			return GetRuleContext<AbstractRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleIDContext[] ruleID() {
			return GetRuleContexts<RuleIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleIDContext ruleID(int i) {
			return GetRuleContext<RuleIDContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 114;
			Match(T__0);
			{
			{
			State = 115;
			grammarID();
			}
			}
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 116;
				Match(T__1);
				{
				{
				State = 117;
				grammarID();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 118;
					Match(T__2);
					{
					{
					State = 119;
					grammarID();
					}
					}
					}
					}
					State = 124;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				{
				{
				State = 127;
				Match(T__3);
				}
				}
				State = 128;
				Match(T__4);
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2200633868288L) != 0)) {
					{
					{
					{
					State = 129;
					ruleID();
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 130;
						Match(T__2);
						{
						{
						State = 131;
						ruleID();
						}
						}
						}
						}
						State = 136;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 139;
				Match(T__5);
				}
			}

			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7 || _la==T__9) {
				{
				{
				{
				State = 142;
				abstractMetamodelDeclaration();
				}
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				{
				State = 148;
				abstractRule();
				}
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3437584455680L) != 0) );
			}
			State = 153;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarIDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext[] validID() {
			return GetRuleContexts<ValidIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID(int i) {
			return GetRuleContext<ValidIDContext>(i);
		}
		public GrammarIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterGrammarID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitGrammarID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarIDContext grammarID() {
		GrammarIDContext _localctx = new GrammarIDContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarID);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 155;
			validID();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 156;
				Match(T__6);
				State = 157;
				validID();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRule_Context parserRule_() {
			return GetRuleContext<ParserRule_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalRuleContext terminalRule() {
			return GetRuleContext<TerminalRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumRuleContext enumRule() {
			return GetRuleContext<EnumRuleContext>(0);
		}
		public AbstractRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAbstractRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAbstractRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractRuleContext abstractRule() {
		AbstractRuleContext _localctx = new AbstractRuleContext(Context, State);
		EnterRule(_localctx, 4, RULE_abstractRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 163;
				parserRule_();
				}
				break;
			case 2:
				{
				State = 164;
				terminalRule();
				}
				break;
			case 3:
				{
				State = 165;
				enumRule();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractMetamodelDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratedMetamodelContext generatedMetamodel() {
			return GetRuleContext<GeneratedMetamodelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencedMetamodelContext referencedMetamodel() {
			return GetRuleContext<ReferencedMetamodelContext>(0);
		}
		public AbstractMetamodelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractMetamodelDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAbstractMetamodelDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAbstractMetamodelDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractMetamodelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractMetamodelDeclarationContext abstractMetamodelDeclaration() {
		AbstractMetamodelDeclarationContext _localctx = new AbstractMetamodelDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_abstractMetamodelDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				State = 168;
				generatedMetamodel();
				}
				break;
			case T__9:
				{
				State = 169;
				referencedMetamodel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratedMetamodelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext[] validID() {
			return GetRuleContexts<ValidIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID(int i) {
			return GetRuleContext<ValidIDContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_STRING() { return GetToken(xtextParser.RULE_STRING, 0); }
		public GeneratedMetamodelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatedMetamodel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterGeneratedMetamodel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitGeneratedMetamodel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratedMetamodel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratedMetamodelContext generatedMetamodel() {
		GeneratedMetamodelContext _localctx = new GeneratedMetamodelContext(Context, State);
		EnterRule(_localctx, 8, RULE_generatedMetamodel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 172;
			Match(T__7);
			{
			{
			State = 173;
			validID();
			}
			}
			{
			{
			State = 174;
			Match(RULE_STRING);
			}
			}
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 175;
				Match(T__8);
				{
				{
				State = 176;
				validID();
				}
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencedMetamodelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_STRING() { return GetToken(xtextParser.RULE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID() {
			return GetRuleContext<ValidIDContext>(0);
		}
		public ReferencedMetamodelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencedMetamodel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterReferencedMetamodel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitReferencedMetamodel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencedMetamodel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferencedMetamodelContext referencedMetamodel() {
		ReferencedMetamodelContext _localctx = new ReferencedMetamodelContext(Context, State);
		EnterRule(_localctx, 10, RULE_referencedMetamodel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 179;
			Match(T__9);
			{
			{
			State = 180;
			Match(RULE_STRING);
			}
			}
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 181;
				Match(T__8);
				{
				{
				State = 182;
				validID();
				}
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_ID() { return GetToken(xtextParser.RULE_ID, 0); }
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 12, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 185;
			Match(T__10);
			{
			{
			State = 186;
			Match(RULE_ID);
			}
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRule_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleNameAndParamsContext ruleNameAndParams() {
			return GetRuleContext<RuleNameAndParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativesContext alternatives() {
			return GetRuleContext<AlternativesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleIDContext[] ruleID() {
			return GetRuleContexts<RuleIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleIDContext ruleID(int i) {
			return GetRuleContext<RuleIDContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ParserRule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterParserRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitParserRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRule_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRule_Context parserRule_() {
		ParserRule_Context _localctx = new ParserRule_Context(Context, State);
		EnterRule(_localctx, 14, RULE_parserRule_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				{
				State = 188;
				annotation();
				}
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				{
				{
				{
				State = 194;
				Match(T__11);
				}
				}
				State = 195;
				ruleNameAndParams();
				State = 201;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
					{
					{
					{
					State = 196;
					Match(T__12);
					}
					}
					}
					break;
				case T__3:
				case T__13:
				case T__14:
					{
					State = 199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__13) {
						{
						State = 197;
						Match(T__13);
						{
						{
						State = 198;
						typeRef();
						}
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case T__28:
			case T__29:
			case RULE_ID:
				{
				{
				State = 203;
				ruleNameAndParams();
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 204;
					Match(T__13);
					{
					{
					State = 205;
					typeRef();
					}
					}
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				{
				{
				State = 210;
				Match(T__3);
				}
				}
				State = 211;
				Match(T__4);
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2200633868288L) != 0)) {
					{
					{
					{
					State = 212;
					ruleID();
					}
					}
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 213;
						Match(T__2);
						{
						{
						State = 214;
						ruleID();
						}
						}
						}
						}
						State = 219;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 222;
				Match(T__5);
				}
			}

			State = 225;
			Match(T__14);
			{
			{
			State = 226;
			alternatives();
			}
			}
			State = 227;
			Match(T__15);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleNameAndParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID() {
			return GetRuleContext<ValidIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public RuleNameAndParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleNameAndParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterRuleNameAndParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitRuleNameAndParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleNameAndParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleNameAndParamsContext ruleNameAndParams() {
		RuleNameAndParamsContext _localctx = new RuleNameAndParamsContext(Context, State);
		EnterRule(_localctx, 16, RULE_ruleNameAndParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			{
			State = 229;
			validID();
			}
			}
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 230;
				Match(T__16);
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RULE_ID) {
					{
					{
					{
					State = 231;
					parameter();
					}
					}
					State = 236;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 232;
						Match(T__2);
						{
						{
						State = 233;
						parameter();
						}
						}
						}
						}
						State = 238;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 241;
				Match(T__17);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_ID() { return GetToken(xtextParser.RULE_ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			State = 244;
			Match(RULE_ID);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RULE_ID() { return GetTokens(xtextParser.RULE_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_ID(int i) {
			return GetToken(xtextParser.RULE_ID, i);
		}
		public TypeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterTypeRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitTypeRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefContext typeRef() {
		TypeRefContext _localctx = new TypeRefContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				{
				{
				State = 246;
				Match(RULE_ID);
				}
				}
				State = 247;
				Match(T__18);
				}
				break;
			}
			{
			{
			State = 250;
			Match(RULE_ID);
			}
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalBranchContext[] conditionalBranch() {
			return GetRuleContexts<ConditionalBranchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalBranchContext conditionalBranch(int i) {
			return GetRuleContext<ConditionalBranchContext>(i);
		}
		public AlternativesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternatives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAlternatives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAlternatives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternatives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativesContext alternatives() {
		AlternativesContext _localctx = new AlternativesContext(Context, State);
		EnterRule(_localctx, 22, RULE_alternatives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 252;
			conditionalBranch();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				{
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 254;
					Match(T__19);
					{
					{
					State = 255;
					conditionalBranch();
					}
					}
					}
					}
					State = 258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__19 );
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalBranchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnorderedGroupContext unorderedGroup() {
			return GetRuleContext<UnorderedGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractTokenContext[] abstractToken() {
			return GetRuleContexts<AbstractTokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractTokenContext abstractToken(int i) {
			return GetRuleContext<AbstractTokenContext>(i);
		}
		public ConditionalBranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalBranch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterConditionalBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitConditionalBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalBranch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalBranchContext conditionalBranch() {
		ConditionalBranchContext _localctx = new ConditionalBranchContext(Context, State);
		EnterRule(_localctx, 24, RULE_conditionalBranch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__23:
			case T__28:
			case T__29:
			case T__31:
			case T__32:
			case RULE_ID:
			case RULE_STRING:
				{
				State = 262;
				unorderedGroup();
				}
				break;
			case T__16:
				{
				{
				{
				}
				State = 264;
				Match(T__16);
				{
				{
				State = 265;
				disjunction();
				}
				}
				State = 266;
				Match(T__17);
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					{
					State = 267;
					abstractToken();
					}
					}
					}
					State = 270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 11009628569632L) != 0) );
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnorderedGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext[] group() {
			return GetRuleContexts<GroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group(int i) {
			return GetRuleContext<GroupContext>(i);
		}
		public UnorderedGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unorderedGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterUnorderedGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitUnorderedGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnorderedGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnorderedGroupContext unorderedGroup() {
		UnorderedGroupContext _localctx = new UnorderedGroupContext(Context, State);
		EnterRule(_localctx, 26, RULE_unorderedGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 274;
			group();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				{
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 276;
					Match(T__20);
					{
					{
					State = 277;
					group();
					}
					}
					}
					}
					State = 280;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__20 );
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractTokenContext[] abstractToken() {
			return GetRuleContexts<AbstractTokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractTokenContext abstractToken(int i) {
			return GetRuleContext<AbstractTokenContext>(i);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 28, RULE_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 284;
			abstractToken();
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11009628569632L) != 0)) {
				{
				{
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					{
					State = 286;
					abstractToken();
					}
					}
					}
					State = 289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 11009628569632L) != 0) );
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractTokenWithCardinalityContext abstractTokenWithCardinality() {
			return GetRuleContext<AbstractTokenWithCardinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public AbstractTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAbstractToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAbstractToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractTokenContext abstractToken() {
		AbstractTokenContext _localctx = new AbstractTokenContext(Context, State);
		EnterRule(_localctx, 30, RULE_abstractToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__28:
			case T__29:
			case T__31:
			case T__32:
			case RULE_ID:
			case RULE_STRING:
				{
				State = 293;
				abstractTokenWithCardinality();
				}
				break;
			case T__23:
				{
				State = 294;
				action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractTokenWithCardinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractTerminalContext abstractTerminal() {
			return GetRuleContext<AbstractTerminalContext>(0);
		}
		public AbstractTokenWithCardinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractTokenWithCardinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAbstractTokenWithCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAbstractTokenWithCardinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractTokenWithCardinality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractTokenWithCardinalityContext abstractTokenWithCardinality() {
		AbstractTokenWithCardinalityContext _localctx = new AbstractTokenWithCardinalityContext(Context, State);
		EnterRule(_localctx, 32, RULE_abstractTokenWithCardinality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 297;
				assignment();
				}
				break;
			case 2:
				{
				State = 298;
				abstractTerminal();
				}
				break;
			}
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12591104L) != 0)) {
				{
				{
				State = 301;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12591104L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID() {
			return GetRuleContext<ValidIDContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 34, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 304;
			Match(T__23);
			{
			{
			State = 305;
			typeRef();
			}
			}
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 306;
				Match(T__6);
				{
				{
				State = 307;
				validID();
				}
				}
				{
				{
				State = 308;
				_la = TokenStream.LA(1);
				if ( !(_la==T__24 || _la==T__25) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 309;
				Match(T__26);
				}
			}

			State = 313;
			Match(T__27);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractTerminalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleCallContext ruleCall() {
			return GetRuleContext<RuleCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedElementContext parenthesizedElement() {
			return GetRuleContext<ParenthesizedElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicatedKeywordContext predicatedKeyword() {
			return GetRuleContext<PredicatedKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicatedRuleCallContext predicatedRuleCall() {
			return GetRuleContext<PredicatedRuleCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicatedGroupContext predicatedGroup() {
			return GetRuleContext<PredicatedGroupContext>(0);
		}
		public AbstractTerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractTerminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAbstractTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAbstractTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractTerminalContext abstractTerminal() {
		AbstractTerminalContext _localctx = new AbstractTerminalContext(Context, State);
		EnterRule(_localctx, 36, RULE_abstractTerminal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 315;
				keyword();
				}
				break;
			case 2:
				{
				State = 316;
				ruleCall();
				}
				break;
			case 3:
				{
				State = 317;
				parenthesizedElement();
				}
				break;
			case 4:
				{
				State = 318;
				predicatedKeyword();
				}
				break;
			case 5:
				{
				State = 319;
				predicatedRuleCall();
				}
				break;
			case 6:
				{
				State = 320;
				predicatedGroup();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_STRING() { return GetToken(xtextParser.RULE_STRING, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 38, RULE_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			State = 323;
			Match(RULE_STRING);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleIDContext ruleID() {
			return GetRuleContext<RuleIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedArgumentContext[] namedArgument() {
			return GetRuleContexts<NamedArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedArgumentContext namedArgument(int i) {
			return GetRuleContext<NamedArgumentContext>(i);
		}
		public RuleCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterRuleCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitRuleCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleCallContext ruleCall() {
		RuleCallContext _localctx = new RuleCallContext(Context, State);
		EnterRule(_localctx, 40, RULE_ruleCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			{
			State = 325;
			ruleID();
			}
			}
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 326;
				Match(T__16);
				{
				{
				State = 327;
				namedArgument();
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 328;
					Match(T__2);
					{
					{
					State = 329;
					namedArgument();
					}
					}
					}
					}
					State = 334;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 335;
				Match(T__17);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_ID() { return GetToken(xtextParser.RULE_ID, 0); }
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(Context, State);
		EnterRule(_localctx, 42, RULE_namedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				{
				{
				State = 339;
				Match(RULE_ID);
				}
				}
				{
				{
				State = 340;
				Match(T__24);
				}
				}
				}
				break;
			}
			{
			{
			State = 343;
			disjunction();
			}
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralConditionContext : ParserRuleContext {
		public LiteralConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterLiteralCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitLiteralCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralConditionContext literalCondition() {
		LiteralConditionContext _localctx = new LiteralConditionContext(Context, State);
		EnterRule(_localctx, 44, RULE_literalCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			}
			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				{
				{
				{
				State = 346;
				Match(T__28);
				}
				}
				}
				break;
			case T__29:
				{
				State = 347;
				Match(T__29);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext[] conjunction() {
			return GetRuleContexts<ConjunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext conjunction(int i) {
			return GetRuleContext<ConjunctionContext>(i);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 46, RULE_disjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 350;
			conjunction();
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__19) {
				{
				{
				{
				}
				State = 352;
				Match(T__19);
				{
				{
				State = 353;
				conjunction();
				}
				}
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext[] negation() {
			return GetRuleContexts<NegationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext negation(int i) {
			return GetRuleContext<NegationContext>(i);
		}
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(Context, State);
		EnterRule(_localctx, 48, RULE_conjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 359;
			negation();
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20) {
				{
				{
				{
				}
				State = 361;
				Match(T__20);
				{
				{
				State = 362;
				negation();
				}
				}
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext negation() {
			return GetRuleContext<NegationContext>(0);
		}
		public NegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationContext negation() {
		NegationContext _localctx = new NegationContext(Context, State);
		EnterRule(_localctx, 50, RULE_negation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__28:
			case T__29:
			case RULE_ID:
				{
				State = 368;
				atom();
				}
				break;
			case T__30:
				{
				{
				{
				}
				State = 370;
				Match(T__30);
				{
				{
				State = 371;
				negation();
				}
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterReferenceContext parameterReference() {
			return GetRuleContext<ParameterReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedConditionContext parenthesizedCondition() {
			return GetRuleContext<ParenthesizedConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralConditionContext literalCondition() {
			return GetRuleContext<LiteralConditionContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 52, RULE_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE_ID:
				{
				State = 374;
				parameterReference();
				}
				break;
			case T__4:
				{
				State = 375;
				parenthesizedCondition();
				}
				break;
			case T__28:
			case T__29:
				{
				State = 376;
				literalCondition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction() {
			return GetRuleContext<DisjunctionContext>(0);
		}
		public ParenthesizedConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterParenthesizedCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitParenthesizedCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedConditionContext parenthesizedCondition() {
		ParenthesizedConditionContext _localctx = new ParenthesizedConditionContext(Context, State);
		EnterRule(_localctx, 54, RULE_parenthesizedCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 379;
			Match(T__4);
			State = 380;
			disjunction();
			State = 381;
			Match(T__5);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_ID() { return GetToken(xtextParser.RULE_ID, 0); }
		public ParameterReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterParameterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitParameterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterReferenceContext parameterReference() {
		ParameterReferenceContext _localctx = new ParameterReferenceContext(Context, State);
		EnterRule(_localctx, 56, RULE_parameterReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			State = 383;
			Match(RULE_ID);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalRuleCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleIDContext ruleID() {
			return GetRuleContext<RuleIDContext>(0);
		}
		public TerminalRuleCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalRuleCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterTerminalRuleCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitTerminalRuleCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalRuleCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalRuleCallContext terminalRuleCall() {
		TerminalRuleCallContext _localctx = new TerminalRuleCallContext(Context, State);
		EnterRule(_localctx, 58, RULE_terminalRuleCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			State = 385;
			ruleID();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleIDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext[] validID() {
			return GetRuleContexts<ValidIDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID(int i) {
			return GetRuleContext<ValidIDContext>(i);
		}
		public RuleIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterRuleID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitRuleID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleIDContext ruleID() {
		RuleIDContext _localctx = new RuleIDContext(Context, State);
		EnterRule(_localctx, 60, RULE_ruleID);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 387;
			validID();
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__18) {
				{
				{
				State = 388;
				Match(T__18);
				State = 389;
				validID();
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidIDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_ID() { return GetToken(xtextParser.RULE_ID, 0); }
		public ValidIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterValidID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitValidID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidIDContext validID() {
		ValidIDContext _localctx = new ValidIDContext(Context, State);
		EnterRule(_localctx, 62, RULE_validID);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2200633868288L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatedKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_STRING() { return GetToken(xtextParser.RULE_STRING, 0); }
		public PredicatedKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicatedKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterPredicatedKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitPredicatedKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatedKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatedKeywordContext predicatedKeyword() {
		PredicatedKeywordContext _localctx = new PredicatedKeywordContext(Context, State);
		EnterRule(_localctx, 64, RULE_predicatedKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				{
				{
				{
				State = 397;
				Match(T__31);
				}
				}
				}
				break;
			case T__32:
				{
				{
				{
				State = 398;
				Match(T__32);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			{
			State = 401;
			Match(RULE_STRING);
			}
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatedRuleCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleIDContext ruleID() {
			return GetRuleContext<RuleIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedArgumentContext[] namedArgument() {
			return GetRuleContexts<NamedArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedArgumentContext namedArgument(int i) {
			return GetRuleContext<NamedArgumentContext>(i);
		}
		public PredicatedRuleCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicatedRuleCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterPredicatedRuleCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitPredicatedRuleCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatedRuleCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatedRuleCallContext predicatedRuleCall() {
		PredicatedRuleCallContext _localctx = new PredicatedRuleCallContext(Context, State);
		EnterRule(_localctx, 66, RULE_predicatedRuleCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				{
				{
				{
				State = 403;
				Match(T__31);
				}
				}
				}
				break;
			case T__32:
				{
				{
				{
				State = 404;
				Match(T__32);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			{
			State = 407;
			ruleID();
			}
			}
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 408;
				Match(T__16);
				{
				{
				State = 409;
				namedArgument();
				}
				}
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 410;
					Match(T__2);
					{
					{
					State = 411;
					namedArgument();
					}
					}
					}
					}
					State = 416;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 417;
				Match(T__17);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID() {
			return GetRuleContext<ValidIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableTerminalContext assignableTerminal() {
			return GetRuleContext<AssignableTerminalContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 68, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				{
				{
				{
				State = 421;
				Match(T__31);
				}
				}
				}
				break;
			case T__32:
				{
				{
				{
				State = 422;
				Match(T__32);
				}
				}
				}
				break;
			case T__28:
			case T__29:
			case RULE_ID:
				break;
			default:
				break;
			}
			{
			{
			State = 425;
			validID();
			}
			}
			{
			{
			State = 426;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17280532480L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			}
			{
			{
			State = 427;
			assignableTerminal();
			}
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableTerminalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleCallContext ruleCall() {
			return GetRuleContext<RuleCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedAssignableElementContext parenthesizedAssignableElement() {
			return GetRuleContext<ParenthesizedAssignableElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrossReferenceContext crossReference() {
			return GetRuleContext<CrossReferenceContext>(0);
		}
		public AssignableTerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableTerminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAssignableTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAssignableTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableTerminalContext assignableTerminal() {
		AssignableTerminalContext _localctx = new AssignableTerminalContext(Context, State);
		EnterRule(_localctx, 70, RULE_assignableTerminal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE_STRING:
				{
				State = 429;
				keyword();
				}
				break;
			case T__28:
			case T__29:
			case RULE_ID:
				{
				State = 430;
				ruleCall();
				}
				break;
			case T__4:
				{
				State = 431;
				parenthesizedAssignableElement();
				}
				break;
			case T__34:
				{
				State = 432;
				crossReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedAssignableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableAlternativesContext assignableAlternatives() {
			return GetRuleContext<AssignableAlternativesContext>(0);
		}
		public ParenthesizedAssignableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedAssignableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterParenthesizedAssignableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitParenthesizedAssignableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedAssignableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedAssignableElementContext parenthesizedAssignableElement() {
		ParenthesizedAssignableElementContext _localctx = new ParenthesizedAssignableElementContext(Context, State);
		EnterRule(_localctx, 72, RULE_parenthesizedAssignableElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 435;
			Match(T__4);
			State = 436;
			assignableAlternatives();
			State = 437;
			Match(T__5);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableAlternativesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableTerminalContext[] assignableTerminal() {
			return GetRuleContexts<AssignableTerminalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableTerminalContext assignableTerminal(int i) {
			return GetRuleContext<AssignableTerminalContext>(i);
		}
		public AssignableAlternativesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableAlternatives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAssignableAlternatives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAssignableAlternatives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableAlternatives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableAlternativesContext assignableAlternatives() {
		AssignableAlternativesContext _localctx = new AssignableAlternativesContext(Context, State);
		EnterRule(_localctx, 74, RULE_assignableAlternatives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 439;
			assignableTerminal();
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				{
				}
				State = 443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 441;
					Match(T__19);
					{
					{
					State = 442;
					assignableTerminal();
					}
					}
					}
					}
					State = 445;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__19 );
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrossReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrossReferenceableTerminalContext crossReferenceableTerminal() {
			return GetRuleContext<CrossReferenceableTerminalContext>(0);
		}
		public CrossReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crossReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterCrossReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitCrossReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrossReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrossReferenceContext crossReference() {
		CrossReferenceContext _localctx = new CrossReferenceContext(Context, State);
		EnterRule(_localctx, 76, RULE_crossReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 449;
			Match(T__34);
			{
			{
			State = 450;
			typeRef();
			}
			}
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 451;
				Match(T__19);
				{
				{
				State = 452;
				crossReferenceableTerminal();
				}
				}
				}
			}

			State = 455;
			Match(T__35);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrossReferenceableTerminalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleCallContext ruleCall() {
			return GetRuleContext<RuleCallContext>(0);
		}
		public CrossReferenceableTerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crossReferenceableTerminal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterCrossReferenceableTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitCrossReferenceableTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrossReferenceableTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrossReferenceableTerminalContext crossReferenceableTerminal() {
		CrossReferenceableTerminalContext _localctx = new CrossReferenceableTerminalContext(Context, State);
		EnterRule(_localctx, 78, RULE_crossReferenceableTerminal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE_STRING:
				{
				State = 457;
				keyword();
				}
				break;
			case T__28:
			case T__29:
			case RULE_ID:
				{
				State = 458;
				ruleCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativesContext alternatives() {
			return GetRuleContext<AlternativesContext>(0);
		}
		public ParenthesizedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterParenthesizedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitParenthesizedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedElementContext parenthesizedElement() {
		ParenthesizedElementContext _localctx = new ParenthesizedElementContext(Context, State);
		EnterRule(_localctx, 80, RULE_parenthesizedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 461;
			Match(T__4);
			State = 462;
			alternatives();
			State = 463;
			Match(T__5);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicatedGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativesContext alternatives() {
			return GetRuleContext<AlternativesContext>(0);
		}
		public PredicatedGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicatedGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterPredicatedGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitPredicatedGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicatedGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicatedGroupContext predicatedGroup() {
		PredicatedGroupContext _localctx = new PredicatedGroupContext(Context, State);
		EnterRule(_localctx, 82, RULE_predicatedGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				{
				{
				{
				State = 465;
				Match(T__31);
				}
				}
				}
				break;
			case T__32:
				{
				{
				{
				State = 466;
				Match(T__32);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 469;
			Match(T__4);
			{
			{
			State = 470;
			alternatives();
			}
			}
			State = 471;
			Match(T__5);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalAlternativesContext terminalAlternatives() {
			return GetRuleContext<TerminalAlternativesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID() {
			return GetRuleContext<ValidIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public TerminalRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterTerminalRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitTerminalRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalRuleContext terminalRule() {
		TerminalRuleContext _localctx = new TerminalRuleContext(Context, State);
		EnterRule(_localctx, 84, RULE_terminalRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				{
				State = 473;
				annotation();
				}
				}
				}
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 479;
			Match(T__36);
			State = 487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				{
				{
				{
				State = 480;
				Match(T__11);
				}
				}
				{
				{
				State = 481;
				validID();
				}
				}
				}
				}
				break;
			case T__28:
			case T__29:
			case RULE_ID:
				{
				{
				{
				{
				State = 482;
				validID();
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 483;
					Match(T__13);
					{
					{
					State = 484;
					typeRef();
					}
					}
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 489;
			Match(T__14);
			{
			{
			State = 490;
			terminalAlternatives();
			}
			}
			State = 491;
			Match(T__15);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalAlternativesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalGroupContext[] terminalGroup() {
			return GetRuleContexts<TerminalGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalGroupContext terminalGroup(int i) {
			return GetRuleContext<TerminalGroupContext>(i);
		}
		public TerminalAlternativesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalAlternatives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterTerminalAlternatives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitTerminalAlternatives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalAlternatives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalAlternativesContext terminalAlternatives() {
		TerminalAlternativesContext _localctx = new TerminalAlternativesContext(Context, State);
		EnterRule(_localctx, 86, RULE_terminalAlternatives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 493;
			terminalGroup();
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				{
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 495;
					Match(T__19);
					{
					{
					State = 496;
					terminalGroup();
					}
					}
					}
					}
					State = 499;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__19 );
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalTokenContext[] terminalToken() {
			return GetRuleContexts<TerminalTokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalTokenContext terminalToken(int i) {
			return GetRuleContext<TerminalTokenContext>(i);
		}
		public TerminalGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterTerminalGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitTerminalGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalGroupContext terminalGroup() {
		TerminalGroupContext _localctx = new TerminalGroupContext(Context, State);
		EnterRule(_localctx, 88, RULE_terminalGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 503;
			terminalToken();
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11282342215840L) != 0)) {
				{
				{
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					{
					State = 505;
					terminalToken();
					}
					}
					}
					State = 508;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 11282342215840L) != 0) );
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalTokenElementContext terminalTokenElement() {
			return GetRuleContext<TerminalTokenElementContext>(0);
		}
		public TerminalTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterTerminalToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitTerminalToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalTokenContext terminalToken() {
		TerminalTokenContext _localctx = new TerminalTokenContext(Context, State);
		EnterRule(_localctx, 90, RULE_terminalToken);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 512;
			terminalTokenElement();
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12591104L) != 0)) {
				{
				{
				State = 513;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12591104L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalTokenElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalRuleCallContext terminalRuleCall() {
			return GetRuleContext<TerminalRuleCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedTerminalElementContext parenthesizedTerminalElement() {
			return GetRuleContext<ParenthesizedTerminalElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractNegatedTokenContext abstractNegatedToken() {
			return GetRuleContext<AbstractNegatedTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EOFContext eOF() {
			return GetRuleContext<EOFContext>(0);
		}
		public TerminalTokenElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalTokenElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterTerminalTokenElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitTerminalTokenElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalTokenElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalTokenElementContext terminalTokenElement() {
		TerminalTokenElementContext _localctx = new TerminalTokenElementContext(Context, State);
		EnterRule(_localctx, 92, RULE_terminalTokenElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE_STRING:
				{
				State = 516;
				characterRange();
				}
				break;
			case T__28:
			case T__29:
			case RULE_ID:
				{
				State = 517;
				terminalRuleCall();
				}
				break;
			case T__4:
				{
				State = 518;
				parenthesizedTerminalElement();
				}
				break;
			case T__30:
			case T__32:
				{
				State = 519;
				abstractNegatedToken();
				}
				break;
			case T__6:
				{
				State = 520;
				wildcard();
				}
				break;
			case T__37:
				{
				State = 521;
				eOF();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedTerminalElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalAlternativesContext terminalAlternatives() {
			return GetRuleContext<TerminalAlternativesContext>(0);
		}
		public ParenthesizedTerminalElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedTerminalElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterParenthesizedTerminalElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitParenthesizedTerminalElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedTerminalElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedTerminalElementContext parenthesizedTerminalElement() {
		ParenthesizedTerminalElementContext _localctx = new ParenthesizedTerminalElementContext(Context, State);
		EnterRule(_localctx, 94, RULE_parenthesizedTerminalElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 524;
			Match(T__4);
			State = 525;
			terminalAlternatives();
			State = 526;
			Match(T__5);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractNegatedTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NegatedTokenContext negatedToken() {
			return GetRuleContext<NegatedTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntilTokenContext untilToken() {
			return GetRuleContext<UntilTokenContext>(0);
		}
		public AbstractNegatedTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractNegatedToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterAbstractNegatedToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitAbstractNegatedToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractNegatedToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractNegatedTokenContext abstractNegatedToken() {
		AbstractNegatedTokenContext _localctx = new AbstractNegatedTokenContext(Context, State);
		EnterRule(_localctx, 96, RULE_abstractNegatedToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__30:
				{
				State = 528;
				negatedToken();
				}
				break;
			case T__32:
				{
				State = 529;
				untilToken();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegatedTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalTokenElementContext terminalTokenElement() {
			return GetRuleContext<TerminalTokenElementContext>(0);
		}
		public NegatedTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negatedToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterNegatedToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitNegatedToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegatedToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegatedTokenContext negatedToken() {
		NegatedTokenContext _localctx = new NegatedTokenContext(Context, State);
		EnterRule(_localctx, 98, RULE_negatedToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 532;
			Match(T__30);
			{
			{
			State = 533;
			terminalTokenElement();
			}
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalTokenElementContext terminalTokenElement() {
			return GetRuleContext<TerminalTokenElementContext>(0);
		}
		public UntilTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterUntilToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitUntilToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilTokenContext untilToken() {
		UntilTokenContext _localctx = new UntilTokenContext(Context, State);
		EnterRule(_localctx, 100, RULE_untilToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(T__32);
			State = 536;
			terminalTokenElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(Context, State);
		EnterRule(_localctx, 102, RULE_wildcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EOFContext : ParserRuleContext {
		public EOFContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eOF; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterEOF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitEOF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEOF(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EOFContext eOF() {
		EOFContext _localctx = new EOFContext(Context, State);
		EnterRule(_localctx, 104, RULE_eOF);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext[] keyword() {
			return GetRuleContexts<KeywordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword(int i) {
			return GetRuleContext<KeywordContext>(i);
		}
		public CharacterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterCharacterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitCharacterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterRangeContext characterRange() {
		CharacterRangeContext _localctx = new CharacterRangeContext(Context, State);
		EnterRule(_localctx, 106, RULE_characterRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 542;
			keyword();
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__38) {
				{
				{
				}
				State = 544;
				Match(T__38);
				{
				{
				State = 545;
				keyword();
				}
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID() {
			return GetRuleContext<ValidIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumLiteralsContext enumLiterals() {
			return GetRuleContext<EnumLiteralsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public EnumRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterEnumRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitEnumRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumRuleContext enumRule() {
		EnumRuleContext _localctx = new EnumRuleContext(Context, State);
		EnterRule(_localctx, 108, RULE_enumRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				{
				State = 548;
				annotation();
				}
				}
				}
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 554;
			Match(T__39);
			{
			{
			State = 555;
			validID();
			}
			}
			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 556;
				Match(T__13);
				{
				{
				State = 557;
				typeRef();
				}
				}
				}
			}

			State = 560;
			Match(T__14);
			{
			{
			State = 561;
			enumLiterals();
			}
			}
			State = 562;
			Match(T__15);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumLiteralDeclarationContext[] enumLiteralDeclaration() {
			return GetRuleContexts<EnumLiteralDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumLiteralDeclarationContext enumLiteralDeclaration(int i) {
			return GetRuleContext<EnumLiteralDeclarationContext>(i);
		}
		public EnumLiteralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiterals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterEnumLiterals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitEnumLiterals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiterals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralsContext enumLiterals() {
		EnumLiteralsContext _localctx = new EnumLiteralsContext(Context, State);
		EnterRule(_localctx, 110, RULE_enumLiterals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 564;
			enumLiteralDeclaration();
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				{
				}
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 566;
					Match(T__19);
					{
					{
					State = 567;
					enumLiteralDeclaration();
					}
					}
					}
					}
					State = 570;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__19 );
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumLiteralDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidIDContext validID() {
			return GetRuleContext<ValidIDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public EnumLiteralDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumLiteralDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.EnterEnumLiteralDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IxtextListener typedListener = listener as IxtextListener;
			if (typedListener != null) typedListener.ExitEnumLiteralDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IxtextVisitor<TResult> typedVisitor = visitor as IxtextVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumLiteralDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumLiteralDeclarationContext enumLiteralDeclaration() {
		EnumLiteralDeclarationContext _localctx = new EnumLiteralDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_enumLiteralDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			{
			State = 574;
			validID();
			}
			}
			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 575;
				Match(T__24);
				{
				{
				State = 576;
				keyword();
				}
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,47,580,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		1,0,1,0,1,0,1,0,1,0,1,0,5,0,121,8,0,10,0,12,0,124,9,0,3,0,126,8,0,1,0,
		1,0,1,0,1,0,1,0,5,0,133,8,0,10,0,12,0,136,9,0,3,0,138,8,0,1,0,3,0,141,
		8,0,1,0,5,0,144,8,0,10,0,12,0,147,9,0,1,0,4,0,150,8,0,11,0,12,0,151,1,
		0,1,0,1,1,1,1,1,1,5,1,159,8,1,10,1,12,1,162,9,1,1,2,1,2,1,2,3,2,167,8,
		2,1,3,1,3,3,3,171,8,3,1,4,1,4,1,4,1,4,1,4,3,4,178,8,4,1,5,1,5,1,5,1,5,
		3,5,184,8,5,1,6,1,6,1,6,1,7,5,7,190,8,7,10,7,12,7,193,9,7,1,7,1,7,1,7,
		1,7,1,7,3,7,200,8,7,3,7,202,8,7,1,7,1,7,1,7,3,7,207,8,7,3,7,209,8,7,1,
		7,1,7,1,7,1,7,1,7,5,7,216,8,7,10,7,12,7,219,9,7,3,7,221,8,7,1,7,3,7,224,
		8,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,5,8,235,8,8,10,8,12,8,238,9,8,
		3,8,240,8,8,1,8,3,8,243,8,8,1,9,1,9,1,10,1,10,3,10,249,8,10,1,10,1,10,
		1,11,1,11,1,11,1,11,4,11,257,8,11,11,11,12,11,258,3,11,261,8,11,1,12,1,
		12,1,12,1,12,1,12,1,12,4,12,269,8,12,11,12,12,12,270,3,12,273,8,12,1,13,
		1,13,1,13,1,13,4,13,279,8,13,11,13,12,13,280,3,13,283,8,13,1,14,1,14,1,
		14,4,14,288,8,14,11,14,12,14,289,3,14,292,8,14,1,15,1,15,3,15,296,8,15,
		1,16,1,16,3,16,300,8,16,1,16,3,16,303,8,16,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,3,17,312,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,322,
		8,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,5,20,331,8,20,10,20,12,20,334,
		9,20,1,20,1,20,3,20,338,8,20,1,21,1,21,3,21,342,8,21,1,21,1,21,1,22,1,
		22,1,22,3,22,349,8,22,1,23,1,23,1,23,1,23,5,23,355,8,23,10,23,12,23,358,
		9,23,1,24,1,24,1,24,1,24,5,24,364,8,24,10,24,12,24,367,9,24,1,25,1,25,
		1,25,1,25,3,25,373,8,25,1,26,1,26,1,26,3,26,378,8,26,1,27,1,27,1,27,1,
		27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,5,30,391,8,30,10,30,12,30,394,9,
		30,1,31,1,31,1,32,1,32,3,32,400,8,32,1,32,1,32,1,33,1,33,3,33,406,8,33,
		1,33,1,33,1,33,1,33,1,33,5,33,413,8,33,10,33,12,33,416,9,33,1,33,1,33,
		3,33,420,8,33,1,34,1,34,3,34,424,8,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
		35,1,35,3,35,434,8,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,4,37,444,
		8,37,11,37,12,37,445,3,37,448,8,37,1,38,1,38,1,38,1,38,3,38,454,8,38,1,
		38,1,38,1,39,1,39,3,39,460,8,39,1,40,1,40,1,40,1,40,1,41,1,41,3,41,468,
		8,41,1,41,1,41,1,41,1,41,1,42,5,42,475,8,42,10,42,12,42,478,9,42,1,42,
		1,42,1,42,1,42,1,42,1,42,3,42,486,8,42,3,42,488,8,42,1,42,1,42,1,42,1,
		42,1,43,1,43,1,43,1,43,4,43,498,8,43,11,43,12,43,499,3,43,502,8,43,1,44,
		1,44,1,44,4,44,507,8,44,11,44,12,44,508,3,44,511,8,44,1,45,1,45,3,45,515,
		8,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,523,8,46,1,47,1,47,1,47,1,47,1,
		48,1,48,3,48,531,8,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,
		1,53,1,53,1,53,1,53,3,53,547,8,53,1,54,5,54,550,8,54,10,54,12,54,553,9,
		54,1,54,1,54,1,54,1,54,3,54,559,8,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,
		1,55,4,55,569,8,55,11,55,12,55,570,3,55,573,8,55,1,56,1,56,1,56,3,56,578,
		8,56,1,56,0,0,57,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
		88,90,92,94,96,98,100,102,104,106,108,110,112,0,4,2,0,13,13,22,23,1,0,
		25,26,2,0,29,30,41,41,2,0,25,26,34,34,608,0,114,1,0,0,0,2,155,1,0,0,0,
		4,166,1,0,0,0,6,170,1,0,0,0,8,172,1,0,0,0,10,179,1,0,0,0,12,185,1,0,0,
		0,14,191,1,0,0,0,16,229,1,0,0,0,18,244,1,0,0,0,20,248,1,0,0,0,22,252,1,
		0,0,0,24,272,1,0,0,0,26,274,1,0,0,0,28,284,1,0,0,0,30,295,1,0,0,0,32,299,
		1,0,0,0,34,304,1,0,0,0,36,321,1,0,0,0,38,323,1,0,0,0,40,325,1,0,0,0,42,
		341,1,0,0,0,44,345,1,0,0,0,46,350,1,0,0,0,48,359,1,0,0,0,50,372,1,0,0,
		0,52,377,1,0,0,0,54,379,1,0,0,0,56,383,1,0,0,0,58,385,1,0,0,0,60,387,1,
		0,0,0,62,395,1,0,0,0,64,399,1,0,0,0,66,405,1,0,0,0,68,423,1,0,0,0,70,433,
		1,0,0,0,72,435,1,0,0,0,74,439,1,0,0,0,76,449,1,0,0,0,78,459,1,0,0,0,80,
		461,1,0,0,0,82,467,1,0,0,0,84,476,1,0,0,0,86,493,1,0,0,0,88,503,1,0,0,
		0,90,512,1,0,0,0,92,522,1,0,0,0,94,524,1,0,0,0,96,530,1,0,0,0,98,532,1,
		0,0,0,100,535,1,0,0,0,102,538,1,0,0,0,104,540,1,0,0,0,106,542,1,0,0,0,
		108,551,1,0,0,0,110,564,1,0,0,0,112,574,1,0,0,0,114,115,5,1,0,0,115,125,
		3,2,1,0,116,117,5,2,0,0,117,122,3,2,1,0,118,119,5,3,0,0,119,121,3,2,1,
		0,120,118,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,
		126,1,0,0,0,124,122,1,0,0,0,125,116,1,0,0,0,125,126,1,0,0,0,126,140,1,
		0,0,0,127,128,5,4,0,0,128,137,5,5,0,0,129,134,3,60,30,0,130,131,5,3,0,
		0,131,133,3,60,30,0,132,130,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,
		135,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,137,129,1,0,0,0,137,138,1,
		0,0,0,138,139,1,0,0,0,139,141,5,6,0,0,140,127,1,0,0,0,140,141,1,0,0,0,
		141,145,1,0,0,0,142,144,3,6,3,0,143,142,1,0,0,0,144,147,1,0,0,0,145,143,
		1,0,0,0,145,146,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,148,150,3,4,2,
		0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,
		153,1,0,0,0,153,154,5,0,0,1,154,1,1,0,0,0,155,160,3,62,31,0,156,157,5,
		7,0,0,157,159,3,62,31,0,158,156,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,
		0,160,161,1,0,0,0,161,3,1,0,0,0,162,160,1,0,0,0,163,167,3,14,7,0,164,167,
		3,84,42,0,165,167,3,108,54,0,166,163,1,0,0,0,166,164,1,0,0,0,166,165,1,
		0,0,0,167,5,1,0,0,0,168,171,3,8,4,0,169,171,3,10,5,0,170,168,1,0,0,0,170,
		169,1,0,0,0,171,7,1,0,0,0,172,173,5,8,0,0,173,174,3,62,31,0,174,177,5,
		43,0,0,175,176,5,9,0,0,176,178,3,62,31,0,177,175,1,0,0,0,177,178,1,0,0,
		0,178,9,1,0,0,0,179,180,5,10,0,0,180,183,5,43,0,0,181,182,5,9,0,0,182,
		184,3,62,31,0,183,181,1,0,0,0,183,184,1,0,0,0,184,11,1,0,0,0,185,186,5,
		11,0,0,186,187,5,41,0,0,187,13,1,0,0,0,188,190,3,12,6,0,189,188,1,0,0,
		0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,208,1,0,0,0,193,
		191,1,0,0,0,194,195,5,12,0,0,195,201,3,16,8,0,196,202,5,13,0,0,197,198,
		5,14,0,0,198,200,3,20,10,0,199,197,1,0,0,0,199,200,1,0,0,0,200,202,1,0,
		0,0,201,196,1,0,0,0,201,199,1,0,0,0,202,209,1,0,0,0,203,206,3,16,8,0,204,
		205,5,14,0,0,205,207,3,20,10,0,206,204,1,0,0,0,206,207,1,0,0,0,207,209,
		1,0,0,0,208,194,1,0,0,0,208,203,1,0,0,0,209,223,1,0,0,0,210,211,5,4,0,
		0,211,220,5,5,0,0,212,217,3,60,30,0,213,214,5,3,0,0,214,216,3,60,30,0,
		215,213,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,221,
		1,0,0,0,219,217,1,0,0,0,220,212,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,
		0,222,224,5,6,0,0,223,210,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,
		226,5,15,0,0,226,227,3,22,11,0,227,228,5,16,0,0,228,15,1,0,0,0,229,242,
		3,62,31,0,230,239,5,17,0,0,231,236,3,18,9,0,232,233,5,3,0,0,233,235,3,
		18,9,0,234,232,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,
		237,240,1,0,0,0,238,236,1,0,0,0,239,231,1,0,0,0,239,240,1,0,0,0,240,241,
		1,0,0,0,241,243,5,18,0,0,242,230,1,0,0,0,242,243,1,0,0,0,243,17,1,0,0,
		0,244,245,5,41,0,0,245,19,1,0,0,0,246,247,5,41,0,0,247,249,5,19,0,0,248,
		246,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,251,5,41,0,0,251,21,1,
		0,0,0,252,260,3,24,12,0,253,256,1,0,0,0,254,255,5,20,0,0,255,257,3,24,
		12,0,256,254,1,0,0,0,257,258,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,
		261,1,0,0,0,260,253,1,0,0,0,260,261,1,0,0,0,261,23,1,0,0,0,262,273,3,26,
		13,0,263,264,1,0,0,0,264,265,5,17,0,0,265,266,3,46,23,0,266,268,5,18,0,
		0,267,269,3,30,15,0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,
		271,1,0,0,0,271,273,1,0,0,0,272,262,1,0,0,0,272,263,1,0,0,0,273,25,1,0,
		0,0,274,282,3,28,14,0,275,278,1,0,0,0,276,277,5,21,0,0,277,279,3,28,14,
		0,278,276,1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,
		283,1,0,0,0,282,275,1,0,0,0,282,283,1,0,0,0,283,27,1,0,0,0,284,291,3,30,
		15,0,285,287,1,0,0,0,286,288,3,30,15,0,287,286,1,0,0,0,288,289,1,0,0,0,
		289,287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,285,1,0,0,0,291,292,
		1,0,0,0,292,29,1,0,0,0,293,296,3,32,16,0,294,296,3,34,17,0,295,293,1,0,
		0,0,295,294,1,0,0,0,296,31,1,0,0,0,297,300,3,68,34,0,298,300,3,36,18,0,
		299,297,1,0,0,0,299,298,1,0,0,0,300,302,1,0,0,0,301,303,7,0,0,0,302,301,
		1,0,0,0,302,303,1,0,0,0,303,33,1,0,0,0,304,305,5,24,0,0,305,311,3,20,10,
		0,306,307,5,7,0,0,307,308,3,62,31,0,308,309,7,1,0,0,309,310,5,27,0,0,310,
		312,1,0,0,0,311,306,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,5,
		28,0,0,314,35,1,0,0,0,315,322,3,38,19,0,316,322,3,40,20,0,317,322,3,80,
		40,0,318,322,3,64,32,0,319,322,3,66,33,0,320,322,3,82,41,0,321,315,1,0,
		0,0,321,316,1,0,0,0,321,317,1,0,0,0,321,318,1,0,0,0,321,319,1,0,0,0,321,
		320,1,0,0,0,322,37,1,0,0,0,323,324,5,43,0,0,324,39,1,0,0,0,325,337,3,60,
		30,0,326,327,5,17,0,0,327,332,3,42,21,0,328,329,5,3,0,0,329,331,3,42,21,
		0,330,328,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,
		335,1,0,0,0,334,332,1,0,0,0,335,336,5,18,0,0,336,338,1,0,0,0,337,326,1,
		0,0,0,337,338,1,0,0,0,338,41,1,0,0,0,339,340,5,41,0,0,340,342,5,25,0,0,
		341,339,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,344,3,46,23,0,344,
		43,1,0,0,0,345,348,1,0,0,0,346,349,5,29,0,0,347,349,5,30,0,0,348,346,1,
		0,0,0,348,347,1,0,0,0,349,45,1,0,0,0,350,356,3,48,24,0,351,352,1,0,0,0,
		352,353,5,20,0,0,353,355,3,48,24,0,354,351,1,0,0,0,355,358,1,0,0,0,356,
		354,1,0,0,0,356,357,1,0,0,0,357,47,1,0,0,0,358,356,1,0,0,0,359,365,3,50,
		25,0,360,361,1,0,0,0,361,362,5,21,0,0,362,364,3,50,25,0,363,360,1,0,0,
		0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,49,1,0,0,0,367,365,
		1,0,0,0,368,373,3,52,26,0,369,370,1,0,0,0,370,371,5,31,0,0,371,373,3,50,
		25,0,372,368,1,0,0,0,372,369,1,0,0,0,373,51,1,0,0,0,374,378,3,56,28,0,
		375,378,3,54,27,0,376,378,3,44,22,0,377,374,1,0,0,0,377,375,1,0,0,0,377,
		376,1,0,0,0,378,53,1,0,0,0,379,380,5,5,0,0,380,381,3,46,23,0,381,382,5,
		6,0,0,382,55,1,0,0,0,383,384,5,41,0,0,384,57,1,0,0,0,385,386,3,60,30,0,
		386,59,1,0,0,0,387,392,3,62,31,0,388,389,5,19,0,0,389,391,3,62,31,0,390,
		388,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,61,1,0,
		0,0,394,392,1,0,0,0,395,396,7,2,0,0,396,63,1,0,0,0,397,400,5,32,0,0,398,
		400,5,33,0,0,399,397,1,0,0,0,399,398,1,0,0,0,400,401,1,0,0,0,401,402,5,
		43,0,0,402,65,1,0,0,0,403,406,5,32,0,0,404,406,5,33,0,0,405,403,1,0,0,
		0,405,404,1,0,0,0,406,407,1,0,0,0,407,419,3,60,30,0,408,409,5,17,0,0,409,
		414,3,42,21,0,410,411,5,3,0,0,411,413,3,42,21,0,412,410,1,0,0,0,413,416,
		1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,
		0,417,418,5,18,0,0,418,420,1,0,0,0,419,408,1,0,0,0,419,420,1,0,0,0,420,
		67,1,0,0,0,421,424,5,32,0,0,422,424,5,33,0,0,423,421,1,0,0,0,423,422,1,
		0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,3,62,31,0,426,427,7,3,0,
		0,427,428,3,70,35,0,428,69,1,0,0,0,429,434,3,38,19,0,430,434,3,40,20,0,
		431,434,3,72,36,0,432,434,3,76,38,0,433,429,1,0,0,0,433,430,1,0,0,0,433,
		431,1,0,0,0,433,432,1,0,0,0,434,71,1,0,0,0,435,436,5,5,0,0,436,437,3,74,
		37,0,437,438,5,6,0,0,438,73,1,0,0,0,439,447,3,70,35,0,440,443,1,0,0,0,
		441,442,5,20,0,0,442,444,3,70,35,0,443,441,1,0,0,0,444,445,1,0,0,0,445,
		443,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,0,447,440,1,0,0,0,447,448,1,
		0,0,0,448,75,1,0,0,0,449,450,5,35,0,0,450,453,3,20,10,0,451,452,5,20,0,
		0,452,454,3,78,39,0,453,451,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,
		456,5,36,0,0,456,77,1,0,0,0,457,460,3,38,19,0,458,460,3,40,20,0,459,457,
		1,0,0,0,459,458,1,0,0,0,460,79,1,0,0,0,461,462,5,5,0,0,462,463,3,22,11,
		0,463,464,5,6,0,0,464,81,1,0,0,0,465,468,5,32,0,0,466,468,5,33,0,0,467,
		465,1,0,0,0,467,466,1,0,0,0,468,469,1,0,0,0,469,470,5,5,0,0,470,471,3,
		22,11,0,471,472,5,6,0,0,472,83,1,0,0,0,473,475,3,12,6,0,474,473,1,0,0,
		0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,
		476,1,0,0,0,479,487,5,37,0,0,480,481,5,12,0,0,481,488,3,62,31,0,482,485,
		3,62,31,0,483,484,5,14,0,0,484,486,3,20,10,0,485,483,1,0,0,0,485,486,1,
		0,0,0,486,488,1,0,0,0,487,480,1,0,0,0,487,482,1,0,0,0,488,489,1,0,0,0,
		489,490,5,15,0,0,490,491,3,86,43,0,491,492,5,16,0,0,492,85,1,0,0,0,493,
		501,3,88,44,0,494,497,1,0,0,0,495,496,5,20,0,0,496,498,3,88,44,0,497,495,
		1,0,0,0,498,499,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,
		0,501,494,1,0,0,0,501,502,1,0,0,0,502,87,1,0,0,0,503,510,3,90,45,0,504,
		506,1,0,0,0,505,507,3,90,45,0,506,505,1,0,0,0,507,508,1,0,0,0,508,506,
		1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,504,1,0,0,0,510,511,1,0,0,
		0,511,89,1,0,0,0,512,514,3,92,46,0,513,515,7,0,0,0,514,513,1,0,0,0,514,
		515,1,0,0,0,515,91,1,0,0,0,516,523,3,106,53,0,517,523,3,58,29,0,518,523,
		3,94,47,0,519,523,3,96,48,0,520,523,3,102,51,0,521,523,3,104,52,0,522,
		516,1,0,0,0,522,517,1,0,0,0,522,518,1,0,0,0,522,519,1,0,0,0,522,520,1,
		0,0,0,522,521,1,0,0,0,523,93,1,0,0,0,524,525,5,5,0,0,525,526,3,86,43,0,
		526,527,5,6,0,0,527,95,1,0,0,0,528,531,3,98,49,0,529,531,3,100,50,0,530,
		528,1,0,0,0,530,529,1,0,0,0,531,97,1,0,0,0,532,533,5,31,0,0,533,534,3,
		92,46,0,534,99,1,0,0,0,535,536,5,33,0,0,536,537,3,92,46,0,537,101,1,0,
		0,0,538,539,5,7,0,0,539,103,1,0,0,0,540,541,5,38,0,0,541,105,1,0,0,0,542,
		546,3,38,19,0,543,544,1,0,0,0,544,545,5,39,0,0,545,547,3,38,19,0,546,543,
		1,0,0,0,546,547,1,0,0,0,547,107,1,0,0,0,548,550,3,12,6,0,549,548,1,0,0,
		0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,554,1,0,0,0,553,
		551,1,0,0,0,554,555,5,40,0,0,555,558,3,62,31,0,556,557,5,14,0,0,557,559,
		3,20,10,0,558,556,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,561,5,15,
		0,0,561,562,3,110,55,0,562,563,5,16,0,0,563,109,1,0,0,0,564,572,3,112,
		56,0,565,568,1,0,0,0,566,567,5,20,0,0,567,569,3,112,56,0,568,566,1,0,0,
		0,569,570,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,
		565,1,0,0,0,572,573,1,0,0,0,573,111,1,0,0,0,574,577,3,62,31,0,575,576,
		5,25,0,0,576,578,3,38,19,0,577,575,1,0,0,0,577,578,1,0,0,0,578,113,1,0,
		0,0,73,122,125,134,137,140,145,151,160,166,170,177,183,191,199,201,206,
		208,217,220,223,236,239,242,248,258,260,270,272,280,282,289,291,295,299,
		302,311,321,332,337,341,348,356,365,372,377,392,399,405,414,419,423,433,
		445,447,453,459,467,476,485,487,499,501,508,510,514,522,530,546,551,558,
		570,572,577
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
