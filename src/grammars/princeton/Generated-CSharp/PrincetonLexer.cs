//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Princeton.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PrincetonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SymSep=1, RuleSep=2, OP=3, CP=4, COMMENT=5, String=6, Symbol=7, WS=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SymSep", "RuleSep", "OP", "CP", "COMMENT", "String", "Symbol", "WS", 
		"FSymbol", "FWs", "FRet"
	};


	public PrincetonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PrincetonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'::='", null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SymSep", "RuleSep", "OP", "CP", "COMMENT", "String", "Symbol", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Princeton.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrincetonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,8,83,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
		1,3,1,4,1,4,5,4,36,8,4,10,4,12,4,39,9,4,1,4,1,4,1,5,1,5,5,5,45,8,5,10,
		5,12,5,48,9,5,1,5,1,5,1,5,5,5,53,8,5,10,5,12,5,56,9,5,1,5,3,5,59,8,5,1,
		6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,5,8,69,8,8,10,8,12,8,72,9,8,1,9,4,9,75,8,
		9,11,9,12,9,76,1,10,4,10,80,8,10,11,10,12,10,81,3,37,46,54,0,11,1,1,3,
		2,5,3,7,4,9,5,11,6,13,7,15,8,17,0,19,0,21,0,1,0,4,2,0,10,10,13,13,5,0,
		45,46,48,57,65,90,95,95,97,122,6,0,39,39,45,46,48,57,65,90,95,95,97,122,
		2,0,9,9,32,32,86,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,23,1,0,0,0,3,27,1,0,0,0,
		5,29,1,0,0,0,7,31,1,0,0,0,9,33,1,0,0,0,11,58,1,0,0,0,13,60,1,0,0,0,15,
		62,1,0,0,0,17,66,1,0,0,0,19,74,1,0,0,0,21,79,1,0,0,0,23,24,5,58,0,0,24,
		25,5,58,0,0,25,26,5,61,0,0,26,2,1,0,0,0,27,28,3,21,10,0,28,4,1,0,0,0,29,
		30,5,40,0,0,30,6,1,0,0,0,31,32,5,41,0,0,32,8,1,0,0,0,33,37,5,35,0,0,34,
		36,8,0,0,0,35,34,1,0,0,0,36,39,1,0,0,0,37,38,1,0,0,0,37,35,1,0,0,0,38,
		40,1,0,0,0,39,37,1,0,0,0,40,41,6,4,0,0,41,10,1,0,0,0,42,46,5,34,0,0,43,
		45,9,0,0,0,44,43,1,0,0,0,45,48,1,0,0,0,46,47,1,0,0,0,46,44,1,0,0,0,47,
		49,1,0,0,0,48,46,1,0,0,0,49,59,5,34,0,0,50,54,5,39,0,0,51,53,9,0,0,0,52,
		51,1,0,0,0,53,56,1,0,0,0,54,55,1,0,0,0,54,52,1,0,0,0,55,57,1,0,0,0,56,
		54,1,0,0,0,57,59,5,39,0,0,58,42,1,0,0,0,58,50,1,0,0,0,59,12,1,0,0,0,60,
		61,3,17,8,0,61,14,1,0,0,0,62,63,3,19,9,0,63,64,1,0,0,0,64,65,6,7,0,0,65,
		16,1,0,0,0,66,70,7,1,0,0,67,69,7,2,0,0,68,67,1,0,0,0,69,72,1,0,0,0,70,
		68,1,0,0,0,70,71,1,0,0,0,71,18,1,0,0,0,72,70,1,0,0,0,73,75,7,3,0,0,74,
		73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,20,1,0,0,0,78,
		80,7,0,0,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,
		22,1,0,0,0,8,0,37,46,54,58,70,76,81,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
