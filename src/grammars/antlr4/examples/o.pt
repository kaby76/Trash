[{"FileName":"CPP14.g4","IdentityOfParser":"ANTLRv4Parser.g4","IdentityOfLexer":"ANTLRv4Lexer.g4","ModeNames":["DEFAULT_MODE","Argument","TargetLanguageAction","LexerCharSet"],"ChannelNames":["DEFAULT_TOKEN_CHANNEL","HIDDEN","OFF_CHANNEL","COMMENT"],"LiteralNames":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"\u0027import\u0027","\u0027fragment\u0027","\u0027lexer\u0027","\u0027parser\u0027","\u0027grammar\u0027","\u0027protected\u0027","\u0027public\u0027","\u0027private\u0027","\u0027returns\u0027","\u0027locals\u0027","\u0027throws\u0027","\u0027catch\u0027","\u0027finally\u0027","\u0027mode\u0027"],"SymbolicNames":[null,"TOKEN_REF","RULE_REF","LEXER_CHAR_SET","DOC_COMMENT","BLOCK_COMMENT","LINE_COMMENT","INT","STRING_LITERAL","UNTERMINATED_STRING_LITERAL","BEGIN_ARGUMENT","BEGIN_ACTION","OPTIONS","TOKENS","CHANNELS","IMPORT","FRAGMENT","LEXER","PARSER","GRAMMAR","PROTECTED","PUBLIC","PRIVATE","RETURNS","LOCALS","THROWS","CATCH","FINALLY","MODE","COLON","COLONCOLON","COMMA","SEMI","LPAREN","RPAREN","LBRACE","RBRACE","RARROW","LT","GT","ASSIGN","QUESTION","STAR","PLUS_ASSIGN","PLUS","OR","DOLLAR","RANGE","DOT","AT","POUND","NOT","ID","WS","ERRCHAR","END_ARGUMENT","UNTERMINATED_ARGUMENT","ARGUMENT_CONTENT","END_ACTION","UNTERMINATED_ACTION","ACTION_CONTENT","UNTERMINATED_CHAR_SET"],"LexerRuleNames":["DOC_COMMENT","BLOCK_COMMENT","LINE_COMMENT","INT","STRING_LITERAL","UNTERMINATED_STRING_LITERAL","BEGIN_ARGUMENT","BEGIN_ACTION","OPTIONS","TOKENS","CHANNELS","WSNLCHARS","IMPORT","FRAGMENT","LEXER","PARSER","GRAMMAR","PROTECTED","PUBLIC","PRIVATE","RETURNS","LOCALS","THROWS","CATCH","FINALLY","MODE","COLON","COLONCOLON","COMMA","SEMI","LPAREN","RPAREN","LBRACE","RBRACE","RARROW","LT","GT","ASSIGN","QUESTION","STAR","PLUS_ASSIGN","PLUS","OR","DOLLAR","RANGE","DOT","AT","POUND","NOT","ID","WS","ERRCHAR","Ws","Hws","Vws","BlockComment","DocComment","LineComment","EscSeq","EscAny","UnicodeEsc","DecimalNumeral","HexDigit","DecDigit","BoolLiteral","CharLiteral","SQuoteLiteral","DQuoteLiteral","USQuoteLiteral","NameChar","NameStartChar","Int","Esc","Colon","DColon","SQuote","DQuote","LParen","RParen","LBrace","RBrace","LBrack","RBrack","RArrow","Lt","Gt","Equal","Question","Star","Plus","PlusAssign","Underscore","Pipe","Dollar","Comma","Semi","Dot","Range","At","Pound","Tilde","NESTED_ARGUMENT","ARGUMENT_ESCAPE","ARGUMENT_STRING_LITERAL","ARGUMENT_CHAR_LITERAL","END_ARGUMENT","UNTERMINATED_ARGUMENT","ARGUMENT_CONTENT","NESTED_ACTION","ACTION_ESCAPE","ACTION_STRING_LITERAL","ACTION_CHAR_LITERAL","ACTION_DOC_COMMENT","ACTION_BLOCK_COMMENT","ACTION_LINE_COMMENT","END_ACTION","UNTERMINATED_ACTION","ACTION_CONTENT","LEXER_CHAR_SET_BODY","LEXER_CHAR_SET","UNTERMINATED_CHAR_SET","Id"],"TokenTypeMap":["TOKEN_REF",1,"RULE_REF",2,"LEXER_CHAR_SET",3,"DOC_COMMENT",4,"BLOCK_COMMENT",5,"LINE_COMMENT",6,"INT",7,"STRING_LITERAL",8,"UNTERMINATED_STRING_LITERAL",9,"BEGIN_ARGUMENT",10,"BEGIN_ACTION",11,"OPTIONS",12,"TOKENS",13,"CHANNELS",14,"\u0027import\u0027",15,"IMPORT",15,"\u0027fragment\u0027",16,"FRAGMENT",16,"\u0027lexer\u0027",17,"LEXER",17,"\u0027parser\u0027",18,"PARSER",18,"\u0027grammar\u0027",19,"GRAMMAR",19,"\u0027protected\u0027",20,"PROTECTED",20,"\u0027public\u0027",21,"PUBLIC",21,"\u0027private\u0027",22,"PRIVATE",22,"\u0027returns\u0027",23,"RETURNS",23,"\u0027locals\u0027",24,"LOCALS",24,"\u0027throws\u0027",25,"THROWS",25,"\u0027catch\u0027",26,"CATCH",26,"\u0027finally\u0027",27,"FINALLY",27,"\u0027mode\u0027",28,"MODE",28,"COLON",29,"COLONCOLON",30,"COMMA",31,"SEMI",32,"LPAREN",33,"RPAREN",34,"LBRACE",35,"RBRACE",36,"RARROW",37,"LT",38,"GT",39,"ASSIGN",40,"QUESTION",41,"STAR",42,"PLUS_ASSIGN",43,"PLUS",44,"OR",45,"DOLLAR",46,"RANGE",47,"DOT",48,"AT",49,"POUND",50,"NOT",51,"ID",52,"WS",53,"ERRCHAR",54,"END_ARGUMENT",55,"UNTERMINATED_ARGUMENT",56,"ARGUMENT_CONTENT",57,"END_ACTION",58,"UNTERMINATED_ACTION",59,"ACTION_CONTENT",60,"UNTERMINATED_CHAR_SET",61,"EOF",-1],"ParserRuleNames":["grammarSpec","grammarDecl","grammarType","prequelConstruct","optionsSpec","option","optionValue","delegateGrammars","delegateGrammar","tokensSpec","channelsSpec","idList","action_","actionScopeName","actionBlock","argActionBlock","modeSpec","rules","ruleSpec","parserRuleSpec","exceptionGroup","exceptionHandler","finallyClause","rulePrequel","ruleReturns","throwsSpec","localsSpec","ruleAction","ruleModifiers","ruleModifier","ruleBlock","ruleAltList","labeledAlt","lexerRuleSpec","lexerRuleBlock","lexerAltList","lexerAlt","lexerElements","lexerElement","lexerBlock","lexerCommands","lexerCommand","lexerCommandName","lexerCommandExpr","altList","alternative","element","predicateOptions","predicateOption","labeledElement","ebnf","blockSuffix","ebnfSuffix","lexerAtom","atom","notSet","blockSet","setElement","block","ruleref","characterRange","terminalDef","elementOptions","elementOption","identifier"],"Nodes":[[2,0,"grammarSpec",[[2,1,"grammarDecl",[[2,2,"grammarType",[[5,"DOC_COMMENT","/*******************************************************************************\n * Copyright (c) 2015 Camiloasc1\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \u0027\u0027AS IS\u0027\u0027 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL COPYRIGHT HOLDERS OR CONTRIBUTORS\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n ******************************************************************************/",3,4,[]],[5,"WS","\n\n",2,53,[]],[5,"DOC_COMMENT","/*******************************************************************************\n * C\u002B\u002B14 Grammar for ANTLR v4\n *\n * Based on n4140 draft paper\n * https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf\n * and\n * http://www.nongnu.org/hcb/\n * \n * Possible Issues:\n * \n * Input must avoid conditional compilation blocks (this grammar ignores any preprocessor directive)\n * GCC extensions not yet supported (not try parse preprocessor output)\n * Lexer issue with pure-specifier rule (\u00270\u0027 token) - Solution in embedded java\n * Right angle bracket (C\u002B\u002B11) - Solution \u0027\u003E\u003E\u0027 and \u0027\u003E\u003E=\u0027 are not tokens, only \u0027\u003E\u0027\n * \n ******************************************************************************/",3,4,[]],[5,"WS","\n",2,53,[]],[2,-1,"GRAMMAR",[[1,"grammar",0,0,[]]]]]],[2,64,"identifier",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"CPP14",0,0,[]]]]]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]],[2,17,"rules",[[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Basic concepts*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"translationunit",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"declarationseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"EOF",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Expressions*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"primaryexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"literal",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"This",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"idexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"lambdaexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"idexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"unqualifiedid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"qualifiedid",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"unqualifiedid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"operatorfunctionid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"conversionfunctionid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"literaloperatorid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027~\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"classname",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027~\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"decltypespecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateid",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"qualifiedid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"unqualifiedid",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"decltypespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"lambdaexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"lambdaintroducer",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"lambdadeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"compoundstatement",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"lambdaintroducer",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"lambdacapture",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"lambdacapture",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"capturedefault",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"capturelist",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"capturedefault",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"capturelist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"capturedefault",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"capturelist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"capture",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"capturelist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"capture",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"capture",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"simplecapture",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initcapture",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"simplecapture",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"This",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"initcapture",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializer",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializer",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"lambdadeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclarationclause",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Mutable",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"exceptionspecification",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingreturntype",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"primaryexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletypespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typenamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletypespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typenamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027.\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"idexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"idexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027.\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"pseudodestructorname",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"pseudodestructorname",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B\u002B\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027--\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Dynamic_cast",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Static_cast",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Reinterpret_cast",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Const_cast",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"pseudodestructorname",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027~\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typename",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027~\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typename",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027~\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typename",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027~\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"decltypespecifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"unaryexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"postfixexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B\u002B\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027--\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"unaryoperator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Sizeof",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"unaryexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Sizeof",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Sizeof",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Alignof",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noexceptexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"newexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"deleteexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"unaryoperator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027|\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027!\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027~\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"newexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"New",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"newplacement",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"newtypeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"newinitializer",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"New",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"newplacement",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"newinitializer",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"newplacement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"newtypeid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"newdeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"newdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"ptroperator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"newdeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrnewdeclarator",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrnewdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrnewdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"newinitializer",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"deleteexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Delete",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Delete",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"noexceptexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Noexcept",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"unaryexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"pmexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"pmexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027.*\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"pmexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u003E*\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"castexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"multiplicativeexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"pmexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"multiplicativeexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"pmexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"multiplicativeexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027/\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"pmexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"multiplicativeexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027%\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"pmexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"additiveexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"multiplicativeexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"additiveexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"multiplicativeexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"additiveexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"multiplicativeexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"shiftexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"additiveexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"shiftexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"additiveexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"shiftexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"rightShift",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"additiveexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"relationalexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"shiftexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"relationalexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"shiftexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"relationalexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"shiftexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"relationalexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"shiftexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"relationalexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"shiftexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"equalityexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"relationalexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"equalityexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027==\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"relationalexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"equalityexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027!=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"relationalexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"andexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"equalityexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"andexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"equalityexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"exclusiveorexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"andexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"exclusiveorexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027^\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"andexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"inclusiveorexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"exclusiveorexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"inclusiveorexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027|\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"exclusiveorexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"logicalandexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"inclusiveorexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"logicalandexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0026\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"inclusiveorexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"logicalorexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"logicalandexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"logicalorexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027||\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"logicalandexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"conditionalexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"logicalorexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"logicalorexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027?\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"assignmentexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"assignmentexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"conditionalexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"logicalorexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"assignmentoperator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerclause",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"throwexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"assignmentoperator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027/=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027%=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"rightShiftAssign",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u003C=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027^=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027|=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"assignmentexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"assignmentexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"conditionalexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n",2,53,[]],[5,"BLOCK_COMMENT","/*Statements*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"labeledstatement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionstatement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"compoundstatement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"selectionstatement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"iterationstatement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"jumpstatement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarationstatement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"tryblock",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"labeledstatement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Case",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Default",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionstatement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"compoundstatement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statementseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"statementseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statementseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"selectionstatement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"If",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"condition",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"If",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"condition",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Else",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Switch",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"condition",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"condition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerclause",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"iterationstatement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"While",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"condition",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Do",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"While",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"For",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"forinitstatement",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"condition",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"For",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"forrangedeclaration",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"forrangeinitializer",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"statement",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"forinitstatement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionstatement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpledeclaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"forrangedeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"forrangeinitializer",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"jumpstatement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Break",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Continue",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Return",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Return",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Goto",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"declarationstatement",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"blockdeclaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Declarations*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"declarationseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"declaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarationseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"declaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"blockdeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"functiondefinition",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templatedeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"explicitinstantiation",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"explicitspecialization",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"linkagespecification",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacedefinition",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"emptydeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributedeclaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"blockdeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"simpledeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"asmdefinition",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacealiasdefinition",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"usingdeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"usingdirective",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"static_assertdeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"aliasdeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"opaqueenumdeclaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"aliasdeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Using",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"simpledeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initdeclaratorlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initdeclaratorlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"static_assertdeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Static_assert",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Stringliteral",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"emptydeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"attributedeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"storageclassspecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"functionspecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Friend",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typedef",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Constexpr",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"storageclassspecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Register",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Static",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Thread_local",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Extern",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Mutable",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"functionspecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Inline",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Virtual",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Explicit",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"typedefname",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingtypespecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"classspecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumspecifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingtypespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletypespecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"elaboratedtypespecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typenamespecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"cvqualifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifierseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifierseq",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingtypespecifierseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingtypespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingtypespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingtypespecifierseq",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletypespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typename",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Char",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Char16",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Char32",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Wchar",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Bool",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Short",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Int",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Long",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Signed",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Unsigned",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Float",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Double",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Void",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Auto",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"decltypespecifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"typename",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"classname",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumname",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typedefname",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"decltypespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Decltype",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Decltype",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Auto",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"elaboratedtypespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"classkey",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"classkey",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"classkey",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Enum",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"enumname",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"enumspecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"enumhead",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumeratorlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumhead",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumeratorlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"enumhead",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"enumkey",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumbase",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumkey",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumbase",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"opaqueenumdeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"enumkey",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumbase",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"enumkey",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Enum",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Enum",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Class",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Enum",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Struct",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"enumbase",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifierseq",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"enumeratorlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"enumeratordefinition",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumeratorlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumeratordefinition",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"enumeratordefinition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"enumerator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"enumerator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"enumerator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacename",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"originalnamespacename",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacealias",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"originalnamespacename",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacedefinition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"namednamespacedefinition",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"unnamednamespacedefinition",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"namednamespacedefinition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"originalnamespacedefinition",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"extensionnamespacedefinition",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"originalnamespacedefinition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Inline",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Namespace",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacebody",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"extensionnamespacedefinition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Inline",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Namespace",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"originalnamespacename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacebody",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"unnamednamespacedefinition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Inline",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Namespace",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacebody",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacebody",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"declarationseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacealias",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacealiasdefinition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Namespace",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"qualifiednamespacespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"qualifiednamespacespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacename",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"usingdeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Using",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typename",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"unqualifiedid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Using",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"unqualifiedid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"usingdirective",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Using",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Namespace",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"namespacename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"asmdefinition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Asm",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Stringliteral",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"linkagespecification",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Extern",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Stringliteral",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarationseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Extern",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Stringliteral",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributelist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"alignmentspecifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"alignmentspecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Alignas",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Alignas",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"attributelist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attribute",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributelist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attribute",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attribute",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributelist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attribute",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"attribute",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributetoken",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributeargumentclause",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"attributetoken",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributescopedtoken",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"attributescopedtoken",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributenamespace",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"attributenamespace",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"attributeargumentclause",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"balancedtokenseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"balancedtokenseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"balancedtoken",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"balancedtokenseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"balancedtoken",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"balancedtoken",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"balancedtokenseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"balancedtokenseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"balancedtokenseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[5,"BLOCK_COMMENT","/*any token other than a parenthesis , a bracket , or a brace*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Declarators*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"initdeclaratorlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"initdeclarator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initdeclaratorlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initdeclarator",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"initdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializer",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"ptrdeclarator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parametersandqualifiers",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingreturntype",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"ptrdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrdeclarator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"ptroperator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"ptrdeclarator",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"declaratorid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parametersandqualifiers",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"ptrdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"parametersandqualifiers",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclarationclause",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"cvqualifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"refqualifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"exceptionspecification",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingreturntype",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingtypespecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"abstractdeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"ptroperator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"cvqualifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0026\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"cvqualifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"cvqualifierseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"cvqualifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"cvqualifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"cvqualifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Const",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Volatile",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"refqualifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0026\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"declaratorid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"idexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"abstractdeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"abstractdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"ptrabstractdeclarator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrabstractdeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parametersandqualifiers",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"trailingreturntype",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"abstractpackdeclarator",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"ptrabstractdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrabstractdeclarator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"ptroperator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"ptrabstractdeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrabstractdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrabstractdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parametersandqualifiers",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parametersandqualifiers",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrabstractdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"ptrabstractdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"abstractpackdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrabstractpackdeclarator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"ptroperator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"abstractpackdeclarator",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrabstractpackdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrabstractpackdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parametersandqualifiers",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noptrabstractpackdeclarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclarationclause",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclarationlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclarationlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclarationlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclarationlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerclause",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"abstractdeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"abstractdeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerclause",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"functiondefinition",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"virtspecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"functionbody",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"functionbody",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"ctorinitializer",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"compoundstatement",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"functiontryblock",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Default",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Delete",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"initializer",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"braceorequalinitializer",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"braceorequalinitializer",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerclause",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerclause",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"assignmentexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerclause",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerclause",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"initializerlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Classes*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"classname",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"classspecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"classhead",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"memberspecification",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"classhead",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"classkey",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"classheadname",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"classvirtspecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"baseclause",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"classkey",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"baseclause",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"classheadname",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"classname",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"classvirtspecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Final",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"classkey",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Class",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Struct",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Union",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"memberspecification",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"memberdeclaration",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"memberspecification",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"accessspecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"memberspecification",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"memberdeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declspecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"memberdeclaratorlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"functiondefinition",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"usingdeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"static_assertdeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templatedeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"aliasdeclaration",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"emptydeclaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"memberdeclaratorlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"memberdeclarator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"memberdeclaratorlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"memberdeclarator",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"memberdeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"virtspecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"purespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"braceorequalinitializer",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"virtspecifierseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"virtspecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"virtspecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"virtspecifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"virtspecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Override",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Final",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*\npurespecifier:\n\t\u0027=\u0027 \u00270\u0027//Conflicts with the lexer\n ;\n */",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"purespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Assign",0,0,[]]]]]]]]]],[2,46,"element",[[2,49,"labeledElement",[[2,64,"identifier",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"val",0,0,[]]]]]],[5,"WS"," ",2,53,[]],[2,-1,"ASSIGN",[[1,"=",0,0,[]]]],[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Octalliteral",0,0,[]]]]]]]]]]]],[2,46,"element",[[2,14,"actionBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"BEGIN_ACTION",[[1,"{",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"i",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"f",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"(",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"$",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"v",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"a",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"l",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,".",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"t",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"e",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"x",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"t",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,".",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"c",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"o",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"m",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"p",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"a",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"r",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"e",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"T",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"o",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"(",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"\u00220\u0022",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,")",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"!",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"=",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"0",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,")",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1," ",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"t",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"h",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"r",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"o",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"w",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1," ",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"n",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"e",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"w",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1," ",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"I",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"n",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"p",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"u",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"t",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"M",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"i",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"s",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"m",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"a",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"t",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"c",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"h",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"E",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"x",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"c",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"e",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"p",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"t",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"i",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"o",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"n",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"(",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"t",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"h",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"i",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,"s",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,")",0,0,[]]]],[2,-1,"ACTION_CONTENT",[[1,";",0,0,[]]]],[2,-1,"END_ACTION",[[1,"}",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Derived classes*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"baseclause",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"basespecifierlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"basespecifierlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"basespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"basespecifierlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"basespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"basespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"basetypespecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Virtual",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"accessspecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"basetypespecifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"accessspecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Virtual",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"basetypespecifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"classordecltype",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"classname",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"decltypespecifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"basetypespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"classordecltype",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"accessspecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Private",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Protected",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Public",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Special member functions*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"conversionfunctionid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Operator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"conversiontypeid",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"conversiontypeid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"conversiondeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"conversiondeclarator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"ptroperator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"conversiondeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"ctorinitializer",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"meminitializerlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"meminitializerlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"meminitializer",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"meminitializer",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"meminitializerlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"meminitializer",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"meminitializerid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"expressionlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"meminitializerid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"bracedinitlist",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"meminitializerid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"classordecltype",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Overloading*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"operatorfunctionid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Operator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"operator",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"literaloperatorid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Operator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Stringliteral",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Operator",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Userdefinedstringliteral",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Templates*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"templatedeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateparameterlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"templateparameterlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"templateparameter",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateparameterlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateparameter",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"templateparameter",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"typeparameter",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"parameterdeclaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"typeparameter",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Class",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Class",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateparameterlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Class",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateparameterlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Class",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"idexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"templatename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateargumentlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"templateid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"operatorfunctionid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateargumentlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"literaloperatorid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateargumentlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"templatename",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"templateargumentlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"templateargument",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateargumentlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"templateargument",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"templateargument",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"idexpression",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"typenamespecifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typename",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"nestednamespecifier",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"simpletemplateid",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"explicitinstantiation",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Extern",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"explicitspecialization",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declaration",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Exception handling*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"RULE_REF",[[1,"tryblock",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Try",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"compoundstatement",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"handlerseq",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"functiontryblock",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Try",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"ctorinitializer",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"compoundstatement",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"handlerseq",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"handlerseq",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"handler",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"handlerseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"handler",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Catch",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"exceptiondeclaration",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"compoundstatement",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"exceptiondeclaration",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"declarator",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"attributespecifierseq",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typespecifierseq",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"abstractdeclarator",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"throwexpression",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Throw",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"assignmentexpression",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"exceptionspecification",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"dynamicexceptionspecification",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"noexceptspecification",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"dynamicexceptionspecification",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Throw",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeidlist",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"typeidlist",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS","\n\t",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeidlist",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"typeid",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"noexceptspecification",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Noexcept",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"constantexpression",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Noexcept",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Preprocessing directives*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Directive",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027#\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,55,"notSet",[[5,"WS"," ",2,53,[]],[2,-1,"NOT",[[1,"~",0,0,[]]]],[2,57,"setElement",[[2,-1,"LEXER_CHAR_SET",[[1,"[\\r\\n]",0,0,[]]]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]]]]]]]],[2,40,"lexerCommands",[[5,"WS"," ",2,53,[]],[2,-1,"RARROW",[[1,"-\u003E",0,0,[]]]],[2,41,"lexerCommand",[[2,42,"lexerCommandName",[[2,64,"identifier",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"skip",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Lexer*/",3,5,[]],[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Keywords*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Alignas",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027alignas\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Alignof",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027alignof\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Asm",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027asm\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Auto",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027auto\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Bool",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027bool\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Break",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027break\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Case",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027case\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Catch",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027catch\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Char",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027char\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Char16",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027char16_t\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Char32",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027char32_t\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Class",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027class\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Const",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027const\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Constexpr",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027constexpr\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Const_cast",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027const_cast\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Continue",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027continue\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Decltype",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027decltype\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Default",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027default\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Delete",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027delete\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Do",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027do\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Double",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027double\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Dynamic_cast",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027dynamic_cast\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Else",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027else\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Enum",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027enum\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Explicit",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027explicit\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Export",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027export\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Extern",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027extern\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"False",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027false\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Final",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027final\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Float",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027float\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"For",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027for\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Friend",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027friend\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Goto",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027goto\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"If",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027if\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Inline",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027inline\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Int",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027int\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Long",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027long\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Mutable",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027mutable\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Namespace",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027namespace\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"New",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027new\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Noexcept",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027noexcept\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Nullptr",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027nullptr\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Operator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027operator\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Override",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027override\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Private",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027private\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Protected",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027protected\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Public",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027public\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Register",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027register\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Reinterpret_cast",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027reinterpret_cast\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Return",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027return\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Short",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027short\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Signed",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027signed\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Sizeof",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027sizeof\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Static",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027static\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Static_assert",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027static_assert\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Static_cast",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027static_cast\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Struct",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027struct\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Switch",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027switch\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Template",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027template\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"This",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027this\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Thread_local",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027thread_local\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Throw",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027throw\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"True",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027true\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Try",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027try\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typedef",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027typedef\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typeid",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027typeid\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Typename",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027typename\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Union",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027union\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Unsigned",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027unsigned\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Using",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027using\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Virtual",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027virtual\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Void",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027void\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Volatile",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027volatile\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Wchar",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027wchar_t\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"While",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027while\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Operators*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"LeftParen",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"RightParen",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"LeftBracket",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"RightBracket",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"LeftBrace",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027{\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"RightBrace",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027}\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Plus",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Minus",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Star",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Div",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027/\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Mod",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027%\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Caret",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027^\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"And",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Or",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027|\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Tilde",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027~\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Not",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027!\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Assign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Less",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Greater",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"PlusAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"MinusAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"StarAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"DivAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027/=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"ModAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027%=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"XorAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027^=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"AndAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OrAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027|=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"LeftShift",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u003C\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"rightShift",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n",2,53,[]],[5,"LINE_COMMENT","//\u0027\u003E\u003E\u0027",3,6,[]],[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Greater",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Greater",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"LeftShiftAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u003C=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"rightShiftAssign",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n",2,53,[]],[5,"LINE_COMMENT","//\u0027\u003E\u003E=\u0027",3,6,[]],[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Greater",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Greater",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Assign",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Equal",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027==\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"NotEqual",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027!=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"LessEqual",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"GreaterEqual",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E=\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"AndAnd",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0026\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OrOr",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027||\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"PlusPlus",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B\u002B\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"MinusMinus",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027--\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Comma",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"ArrowStar",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u003E*\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Arrow",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u003E\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Question",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027?\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Colon",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027:\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Doublecolon",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027::\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Semi",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027;\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Dot",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027.\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"DotStar",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027.*\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Ellipsis",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027...\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"operator",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"New",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Delete",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"New",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Delete",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027/\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027%\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027^\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027|\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027~\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027!\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027/=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027%=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027^=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027|=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u003C\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"rightShift",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"rightShiftAssign",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C\u003C=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027==\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027!=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003C=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u003E=\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0026\u0026\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027||\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u002B\u002B\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027--\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027,\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u003E*\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027-\u003E\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027[\u0027",0,0,[]]]]]]]]]],[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027]\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[5,"BLOCK_COMMENT","/*Lexer*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Hexquad",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"HEXADECIMALDIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"HEXADECIMALDIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"HEXADECIMALDIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"HEXADECIMALDIGIT",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Universalcharactername",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\u\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Hexquad",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\U\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Hexquad",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Hexquad",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n",2,53,[]],[5,"BLOCK_COMMENT","/*\n\tIdentifiernondigit\n\t| Identifier Identifiernondigit\n\t| Identifier DIGIT\n\t*/",3,5,[]],[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifiernondigit",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,39,"lexerBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"LPAREN",[[1,"(",0,0,[]]]],[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifiernondigit",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"DIGIT",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"RPAREN",[[1,")",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifiernondigit",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"NONDIGIT",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Universalcharactername",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[5,"BLOCK_COMMENT","/* other implementation defined characters*/",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"NONDIGIT",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[a-zA-Z_]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"DIGIT",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[0-9]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"literal",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Integerliteral",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Characterliteral",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Floatingliteral",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Stringliteral",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"booleanliteral",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"pointerliteral",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,59,"ruleref",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"userdefinedliteral",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Integerliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Decimalliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Integersuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Octalliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Integersuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Hexadecimalliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Integersuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Binaryliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Integersuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Decimalliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"NONZERODIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,39,"lexerBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"LPAREN",[[1,"(",0,0,[]]]],[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"DIGIT",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"RPAREN",[[1,")",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Octalliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u00270\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,39,"lexerBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"LPAREN",[[1,"(",0,0,[]]]],[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OCTALDIGIT",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"RPAREN",[[1,")",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Hexadecimalliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,39,"lexerBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"LPAREN",[[1,"(",0,0,[]]]],[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u00270x\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u00270X\u0027",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"RPAREN",[[1,")",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"HEXADECIMALDIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,39,"lexerBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"LPAREN",[[1,"(",0,0,[]]]],[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"HEXADECIMALDIGIT",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"RPAREN",[[1,")",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Binaryliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,39,"lexerBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"LPAREN",[[1,"(",0,0,[]]]],[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u00270b\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u00270B\u0027",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"RPAREN",[[1,")",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"BINARYDIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,39,"lexerBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"LPAREN",[[1,"(",0,0,[]]]],[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"BINARYDIGIT",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"RPAREN",[[1,")",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"NONZERODIGIT",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[1-9]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OCTALDIGIT",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[0-7]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"HEXADECIMALDIGIT",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[0-9a-fA-F]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"BINARYDIGIT",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[01]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Integersuffix",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Unsignedsuffix",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Longsuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Unsignedsuffix",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Longlongsuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Longsuffix",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Unsignedsuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Longlongsuffix",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Unsignedsuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Unsignedsuffix",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[uU]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Longsuffix",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[lL]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Longlongsuffix",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027ll\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027LL\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Characterliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Cchar",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"PLUS",[[1,"\u002B",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027u\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Cchar",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"PLUS",[[1,"\u002B",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027U\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Cchar",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"PLUS",[[1,"\u002B",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027L\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Cchar",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"PLUS",[[1,"\u002B",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Cchar",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,55,"notSet",[[5,"WS","\n\t",2,53,[]],[2,-1,"NOT",[[1,"~",0,0,[]]]],[2,57,"setElement",[[2,-1,"LEXER_CHAR_SET",[[1,"[\u0027\\\\\\r\\n]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Escapesequence",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Universalcharactername",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Escapesequence",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Simpleescapesequence",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Octalescapesequence",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Hexadecimalescapesequence",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Simpleescapesequence",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\\\\u0027\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\\u0022\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\?\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\\\\\\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\a\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\b\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\f\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\n\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\r\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\t\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\v\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Octalescapesequence",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OCTALDIGIT",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OCTALDIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OCTALDIGIT",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OCTALDIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OCTALDIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"OCTALDIGIT",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Hexadecimalescapesequence",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\\x\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"HEXADECIMALDIGIT",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"PLUS",[[1,"\u002B",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Floatingliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Fractionalconstant",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Exponentpart",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Floatingsuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Digitsequence",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Exponentpart",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Floatingsuffix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Fractionalconstant",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Digitsequence",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027.\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Digitsequence",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Digitsequence",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027.\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Exponentpart",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027e\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"SIGN",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Digitsequence",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027E\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"SIGN",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Digitsequence",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"SIGN",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[\u002B-]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Digitsequence",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"DIGIT",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,39,"lexerBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"LPAREN",[[1,"(",0,0,[]]]],[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\\u0027\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"DIGIT",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"RPAREN",[[1,")",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Floatingsuffix",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[flFL]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Stringliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Encodingprefix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0022\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Schar",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0022\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Encodingprefix",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027R\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Rawstring",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Encodingprefix",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027u8\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027u\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027U\u0027",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027L\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Schar",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,55,"notSet",[[5,"WS","\n\t",2,53,[]],[2,-1,"NOT",[[1,"~",0,0,[]]]],[2,57,"setElement",[[2,-1,"LEXER_CHAR_SET",[[1,"[\u0022\\\\\\r\\n]",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Escapesequence",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Universalcharactername",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Rawstring",0,0,[]]]],[5,"WS"," ",2,53,[]],[5,"BLOCK_COMMENT","/* \u0027\u0022\u0027 dcharsequence? \u0027(\u0027 rcharsequence? \u0027)\u0027 dcharsequence? \u0027\u0022\u0027 */",3,5,[]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0022\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS"," ",2,53,[]],[2,-1,"DOT",[[1,".",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]],[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027(\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS"," ",2,53,[]],[2,-1,"DOT",[[1,".",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]],[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027)\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS"," ",2,53,[]],[2,-1,"DOT",[[1,".",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]],[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\u0022\u0027",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"booleanliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"False",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"True",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"pointerliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Nullptr",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,19,"parserRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"RULE_REF",[[1,"userdefinedliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,30,"ruleBlock",[[2,31,"ruleAltList",[[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Userdefinedintegerliteral",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Userdefinedfloatingliteral",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Userdefinedstringliteral",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,32,"labeledAlt",[[2,45,"alternative",[[2,46,"element",[[2,54,"atom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Userdefinedcharacterliteral",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]],[2,20,"exceptionGroup",[]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Userdefinedintegerliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Decimalliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Udsuffix",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Octalliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Udsuffix",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Hexadecimalliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Udsuffix",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Binaryliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Udsuffix",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Userdefinedfloatingliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Fractionalconstant",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Exponentpart",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Udsuffix",0,0,[]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Digitsequence",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Exponentpart",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Udsuffix",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Userdefinedstringliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Stringliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Udsuffix",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Userdefinedcharacterliteral",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Characterliteral",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Udsuffix",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"FRAGMENT",[[1,"fragment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Udsuffix",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Identifier",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Whitespace",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS","\n\t",2,53,[]],[2,-1,"LEXER_CHAR_SET",[[1,"[ \\t]",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"PLUS",[[1,"\u002B",0,0,[]]]]]]]]]],[2,40,"lexerCommands",[[5,"WS"," ",2,53,[]],[2,-1,"RARROW",[[1,"-\u003E",0,0,[]]]],[2,41,"lexerCommand",[[2,42,"lexerCommandName",[[2,64,"identifier",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"skip",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"Newline",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,39,"lexerBlock",[[5,"WS","\n\t",2,53,[]],[2,-1,"LPAREN",[[1,"(",0,0,[]]]],[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\r\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\n\u0027",0,0,[]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]]]]]],[5,"WS","\n\t\t",2,53,[]],[2,-1,"OR",[[1,"|",0,0,[]]]],[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027\\n\u0027",0,0,[]]]]]]]]]]]]]]]],[5,"WS","\n\t",2,53,[]],[2,-1,"RPAREN",[[1,")",0,0,[]]]]]]]]]],[2,40,"lexerCommands",[[5,"WS"," ",2,53,[]],[2,-1,"RARROW",[[1,"-\u003E",0,0,[]]]],[2,41,"lexerCommand",[[2,42,"lexerCommandName",[[2,64,"identifier",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"skip",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"BlockComment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027/*\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[5,"WS"," ",2,53,[]],[2,-1,"DOT",[[1,".",0,0,[]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]],[2,-1,"QUESTION",[[1,"?",0,0,[]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS"," ",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027*/\u0027",0,0,[]]]]]]]]]]]],[2,40,"lexerCommands",[[5,"WS"," ",2,53,[]],[2,-1,"RARROW",[[1,"-\u003E",0,0,[]]]],[2,41,"lexerCommand",[[2,42,"lexerCommandName",[[2,64,"identifier",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"skip",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]],[2,18,"ruleSpec",[[2,33,"lexerRuleSpec",[[5,"WS","\n\n",2,53,[]],[2,-1,"TOKEN_REF",[[1,"LineComment",0,0,[]]]],[5,"WS","\n",2,53,[]],[2,-1,"COLON",[[1,":",0,0,[]]]],[2,34,"lexerRuleBlock",[[2,35,"lexerAltList",[[2,36,"lexerAlt",[[2,37,"lexerElements",[[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,61,"terminalDef",[[5,"WS","\n\t",2,53,[]],[2,-1,"STRING_LITERAL",[[1,"\u0027//\u0027",0,0,[]]]]]]]]]],[2,38,"lexerElement",[[2,53,"lexerAtom",[[2,55,"notSet",[[5,"WS"," ",2,53,[]],[2,-1,"NOT",[[1,"~",0,0,[]]]],[2,57,"setElement",[[2,-1,"LEXER_CHAR_SET",[[1,"[\\r\\n]",0,0,[]]]]]]]]]],[2,52,"ebnfSuffix",[[2,-1,"STAR",[[1,"*",0,0,[]]]]]]]]]],[2,40,"lexerCommands",[[5,"WS"," ",2,53,[]],[2,-1,"RARROW",[[1,"-\u003E",0,0,[]]]],[2,41,"lexerCommand",[[2,42,"lexerCommandName",[[2,64,"identifier",[[5,"WS"," ",2,53,[]],[2,-1,"RULE_REF",[[1,"skip",0,0,[]]]]]]]]]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"SEMI",[[1,";",0,0,[]]]]]]]]]],[5,"WS","\n",2,53,[]],[2,-1,"EOF",[[1,"",0,0,[]]]]]]]}]
