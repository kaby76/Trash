//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ANTLRv4Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ANTLRv4Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACTION=4, ARG_ACTION=5, ARG_OR_CHARSET=6, ASSIGN=7, LEXER_CHAR_SET=8, 
		RULE_REF=9, SEMPRED=10, STRING_LITERAL=11, TOKEN_REF=13, UNICODE_ESC=14, 
		UNICODE_EXTENDED_ESC=15, WS=16, ALT=17, BLOCK=18, CLOSURE=19, ELEMENT_OPTIONS=20, 
		EPSILON=21, LEXER_ACTION_CALL=22, LEXER_ALT_ACTION=23, OPTIONAL=24, POSITIVE_CLOSURE=25, 
		RULE=26, RULEMODIFIERS=27, RULES=28, SET=29, WILDCARD=30, DOC_COMMENT=31, 
		BLOCK_COMMENT=32, LINE_COMMENT=33, INT=34, UNTERMINATED_STRING_LITERAL=35, 
		BEGIN_ARGUMENT=36, OPTIONS=37, TOKENS=38, CHANNELS=39, IMPORT=40, FRAGMENT=41, 
		LEXER=42, PARSER=43, GRAMMAR=44, PROTECTED=45, PUBLIC=46, PRIVATE=47, 
		RETURNS=48, LOCALS=49, THROWS=50, CATCH=51, FINALLY=52, MODE=53, COLON=54, 
		COLONCOLON=55, COMMA=56, SEMI=57, LPAREN=58, RPAREN=59, RBRACE=60, RARROW=61, 
		LT=62, GT=63, QUESTION=64, STAR=65, PLUS_ASSIGN=66, PLUS=67, OR=68, DOLLAR=69, 
		RANGE=70, DOT=71, AT=72, POUND=73, NOT=74, ID=75, END_ARGUMENT=76, UNTERMINATED_ARGUMENT=77, 
		ARGUMENT_CONTENT=78, UNTERMINATED_CHAR_SET=79;
	public const int
		RULE_grammarSpec = 0, RULE_grammarDecl = 1, RULE_grammarType = 2, RULE_prequelConstruct = 3, 
		RULE_optionsSpec = 4, RULE_option = 5, RULE_optionValue = 6, RULE_delegateGrammars = 7, 
		RULE_delegateGrammar = 8, RULE_tokensSpec = 9, RULE_channelsSpec = 10, 
		RULE_idList = 11, RULE_action_ = 12, RULE_actionScopeName = 13, RULE_actionBlock = 14, 
		RULE_argActionBlock = 15, RULE_modeSpec = 16, RULE_rules = 17, RULE_ruleSpec = 18, 
		RULE_parserRuleSpec = 19, RULE_exceptionGroup = 20, RULE_exceptionHandler = 21, 
		RULE_finallyClause = 22, RULE_rulePrequel = 23, RULE_ruleReturns = 24, 
		RULE_throwsSpec = 25, RULE_localsSpec = 26, RULE_ruleAction = 27, RULE_ruleModifiers = 28, 
		RULE_ruleModifier = 29, RULE_ruleBlock = 30, RULE_ruleAltList = 31, RULE_labeledAlt = 32, 
		RULE_lexerRuleSpec = 33, RULE_lexerRuleBlock = 34, RULE_lexerAltList = 35, 
		RULE_lexerAlt = 36, RULE_lexerElements = 37, RULE_lexerElement = 38, RULE_lexerBlock = 39, 
		RULE_lexerCommands = 40, RULE_lexerCommand = 41, RULE_lexerCommandName = 42, 
		RULE_lexerCommandExpr = 43, RULE_altList = 44, RULE_alternative = 45, 
		RULE_element = 46, RULE_predicateOptions = 47, RULE_predicateOption = 48, 
		RULE_labeledElement = 49, RULE_ebnf = 50, RULE_blockSuffix = 51, RULE_ebnfSuffix = 52, 
		RULE_lexerAtom = 53, RULE_atom = 54, RULE_wildcard = 55, RULE_notSet = 56, 
		RULE_blockSet = 57, RULE_setElement = 58, RULE_block = 59, RULE_ruleref = 60, 
		RULE_characterRange = 61, RULE_terminalDef = 62, RULE_elementOptions = 63, 
		RULE_elementOption = 64, RULE_identifier = 65, RULE_qualifiedIdentifier = 66;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarDecl", "grammarType", "prequelConstruct", "optionsSpec", 
		"option", "optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", 
		"channelsSpec", "idList", "action_", "actionScopeName", "actionBlock", 
		"argActionBlock", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", "exceptionGroup", 
		"exceptionHandler", "finallyClause", "rulePrequel", "ruleReturns", "throwsSpec", 
		"localsSpec", "ruleAction", "ruleModifiers", "ruleModifier", "ruleBlock", 
		"ruleAltList", "labeledAlt", "lexerRuleSpec", "lexerRuleBlock", "lexerAltList", 
		"lexerAlt", "lexerElements", "lexerElement", "lexerBlock", "lexerCommands", 
		"lexerCommand", "lexerCommandName", "lexerCommandExpr", "altList", "alternative", 
		"element", "predicateOptions", "predicateOption", "labeledElement", "ebnf", 
		"blockSuffix", "ebnfSuffix", "lexerAtom", "atom", "wildcard", "notSet", 
		"blockSet", "setElement", "block", "ruleref", "characterRange", "terminalDef", 
		"elementOptions", "elementOption", "identifier", "qualifiedIdentifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'='", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'['", null, null, null, "'import'", "'fragment'", "'lexer'", "'parser'", 
		"'grammar'", "'protected'", "'public'", "'private'", "'returns'", "'locals'", 
		"'throws'", "'catch'", "'finally'", "'mode'", "':'", "'::'", "','", "';'", 
		"'('", "')'", "'}'", "'->'", "'<'", "'>'", "'?'", "'*'", "'+='", "'+'", 
		"'|'", "'$'", "'..'", "'.'", "'@'", "'#'", "'~'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "ACTION", "ARG_ACTION", "ARG_OR_CHARSET", "ASSIGN", 
		"LEXER_CHAR_SET", "RULE_REF", "SEMPRED", "STRING_LITERAL", null, "TOKEN_REF", 
		"UNICODE_ESC", "UNICODE_EXTENDED_ESC", "WS", "ALT", "BLOCK", "CLOSURE", 
		"ELEMENT_OPTIONS", "EPSILON", "LEXER_ACTION_CALL", "LEXER_ALT_ACTION", 
		"OPTIONAL", "POSITIVE_CLOSURE", "RULE", "RULEMODIFIERS", "RULES", "SET", 
		"WILDCARD", "DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", "INT", "UNTERMINATED_STRING_LITERAL", 
		"BEGIN_ARGUMENT", "OPTIONS", "TOKENS", "CHANNELS", "IMPORT", "FRAGMENT", 
		"LEXER", "PARSER", "GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE", "RETURNS", 
		"LOCALS", "THROWS", "CATCH", "FINALLY", "MODE", "COLON", "COLONCOLON", 
		"COMMA", "SEMI", "LPAREN", "RPAREN", "RBRACE", "RARROW", "LT", "GT", "QUESTION", 
		"STAR", "PLUS_ASSIGN", "PLUS", "OR", "DOLLAR", "RANGE", "DOT", "AT", "POUND", 
		"NOT", "ID", "END_ARGUMENT", "UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", 
		"UNTERMINATED_CHAR_SET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRv4Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ANTLRv4Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ANTLRv4Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ANTLRv4Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GrammarSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GrammarDeclContext grammarDecl() {
			return GetRuleContext<GrammarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ANTLRv4Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			grammarDecl();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & 34359738383L) != 0)) {
				{
				{
				State = 135;
				prequelConstruct();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			rules();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODE) {
				{
				{
				State = 142;
				modeSpec();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 148;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public GrammarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarDeclContext grammarDecl() {
		GrammarDeclContext _localctx = new GrammarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			grammarType();
			State = 151;
			identifier();
			State = 152;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAMMAR() { return GetToken(ANTLRv4Parser.GRAMMAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_grammarType);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEXER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				Match(LEXER);
				State = 155;
				Match(GRAMMAR);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				Match(PARSER);
				State = 157;
				Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 158;
				Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelsSpecContext channelsSpec() {
			return GetRuleContext<ChannelsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Action_Context action_() {
			return GetRuleContext<Action_Context>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrequelConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 6, RULE_prequelConstruct);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162;
				delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163;
				tokensSpec();
				}
				break;
			case CHANNELS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 164;
				channelsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 165;
				action_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(ANTLRv4Parser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(ANTLRv4Parser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv4Parser.SEMI, i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 8, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(OPTIONS);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RULE_REF || _la==TOKEN_REF) {
				{
				{
				State = 169;
				option();
				State = 170;
				Match(SEMI);
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 177;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 10, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			identifier();
			State = 180;
			Match(ASSIGN);
			State = 181;
			optionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ANTLRv4Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ANTLRv4Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionValue);
		int _la;
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE_REF:
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				identifier();
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 184;
					Match(DOT);
					State = 185;
					identifier();
					}
					}
					State = 190;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191;
				Match(STRING_LITERAL);
				}
				break;
			case ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192;
				actionBlock();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 193;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(ANTLRv4Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(IMPORT);
			State = 197;
			delegateGrammar();
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 198;
				Match(COMMA);
				State = 199;
				delegateGrammar();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 205;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 16, RULE_delegateGrammar);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				identifier();
				State = 208;
				Match(ASSIGN);
				State = 209;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKENS() { return GetToken(ANTLRv4Parser.TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokensSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 18, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(TOKENS);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RULE_REF || _la==TOKEN_REF) {
				{
				State = 215;
				idList();
				}
			}

			State = 218;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNELS() { return GetToken(ANTLRv4Parser.CHANNELS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ChannelsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterChannelsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitChannelsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelsSpecContext channelsSpec() {
		ChannelsSpecContext _localctx = new ChannelsSpecContext(Context, State);
		EnterRule(_localctx, 20, RULE_channelsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(CHANNELS);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RULE_REF || _la==TOKEN_REF) {
				{
				State = 221;
				idList();
				}
			}

			State = 224;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 22, RULE_idList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			identifier();
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 227;
					Match(COMMA);
					State = 228;
					identifier();
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 234;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(ANTLRv4Parser.COLONCOLON, 0); }
		public Action_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAction_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAction_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Action_Context action_() {
		Action_Context _localctx = new Action_Context(Context, State);
		EnterRule(_localctx, 24, RULE_action_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(AT);
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 238;
				actionScopeName();
				State = 239;
				Match(COLONCOLON);
				}
				break;
			}
			State = 243;
			identifier();
			State = 244;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionScopeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_actionScopeName);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE_REF:
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				identifier();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 248;
				Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(ANTLRv4Parser.ACTION, 0); }
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_actionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_ARGUMENT() { return GetToken(ANTLRv4Parser.BEGIN_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_ARGUMENT() { return GetToken(ANTLRv4Parser.END_ARGUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(ANTLRv4Parser.ARGUMENT_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(ANTLRv4Parser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgActionBlockContext argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_argActionBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(BEGIN_ARGUMENT);
			State = 257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 254;
					Match(ARGUMENT_CONTENT);
					}
					} 
				}
				State = 259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 260;
			Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleSpecContext[] lexerRuleSpec() {
			return GetRuleContexts<LexerRuleSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleSpecContext lexerRuleSpec(int i) {
			return GetRuleContext<LexerRuleSpecContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 32, RULE_modeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(MODE);
			State = 263;
			identifier();
			State = 264;
			Match(SEMI);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOKEN_REF || _la==FRAGMENT) {
				{
				{
				State = 265;
				lexerRuleSpec();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 34, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 248489627886080L) != 0)) {
				{
				{
				State = 271;
				ruleSpec();
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleSpecContext lexerRuleSpec() {
			return GetRuleContext<LexerRuleSpecContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_ruleSpec);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				lexerRuleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 38, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 248489627877376L) != 0)) {
				{
				State = 281;
				ruleModifiers();
				}
			}

			State = 284;
			Match(RULE_REF);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 285;
				argActionBlock();
				}
			}

			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 288;
				ruleReturns();
				}
			}

			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 291;
				throwsSpec();
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCALS) {
				{
				State = 294;
				localsSpec();
				}
			}

			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 297;
				rulePrequel();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 303;
			Match(COLON);
			State = 304;
			ruleBlock();
			State = 305;
			Match(SEMI);
			State = 306;
			exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 40, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 308;
				exceptionHandler();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 314;
				finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(ANTLRv4Parser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 42, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(CATCH);
			State = 318;
			argActionBlock();
			State = 319;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(ANTLRv4Parser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(FINALLY);
			State = 322;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePrequel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 46, RULE_rulePrequel);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324;
				optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325;
				ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(ANTLRv4Parser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(RETURNS);
			State = 329;
			argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(ANTLRv4Parser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext[] qualifiedIdentifier() {
			return GetRuleContexts<QualifiedIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier(int i) {
			return GetRuleContext<QualifiedIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 50, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(THROWS);
			State = 332;
			qualifiedIdentifier();
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 333;
				Match(COMMA);
				State = 334;
				qualifiedIdentifier();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALS() { return GetToken(ANTLRv4Parser.LOCALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 52, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(LOCALS);
			State = 341;
			argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 54, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			Match(AT);
			State = 344;
			identifier();
			State = 345;
			actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 56, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 347;
				ruleModifier();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 248489627877376L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(ANTLRv4Parser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ANTLRv4Parser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(ANTLRv4Parser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 248489627877376L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 62, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			labeledAlt();
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 357;
				Match(OR);
				State = 358;
				labeledAlt();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(ANTLRv4Parser.POUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 64, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			alternative();
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POUND) {
				{
				State = 365;
				Match(POUND);
				State = 366;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public LexerRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleSpecContext lexerRuleSpec() {
		LexerRuleSpecContext _localctx = new LexerRuleSpecContext(Context, State);
		EnterRule(_localctx, 66, RULE_lexerRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FRAGMENT) {
				{
				State = 369;
				Match(FRAGMENT);
				}
			}

			State = 372;
			Match(TOKEN_REF);
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 373;
				optionsSpec();
				}
			}

			State = 376;
			Match(COLON);
			State = 377;
			lexerRuleBlock();
			State = 378;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			lexerAlt();
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 383;
				Match(OR);
				State = 384;
				lexerAlt();
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 72, RULE_lexerAlt);
		int _la;
		try {
			State = 395;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				lexerElements();
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 391;
					lexerCommands();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerElements);
		int _la;
		try {
			State = 403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACTION:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case TOKEN_REF:
			case LPAREN:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 397;
					lexerElement();
					}
					}
					State = 400;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 288230376151722256L) != 0) || _la==DOT || _la==NOT );
				}
				break;
			case SEMI:
			case RPAREN:
			case RARROW:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerElement);
		int _la;
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case TOKEN_REF:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				lexerAtom();
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 11L) != 0)) {
					{
					State = 406;
					ebnfSuffix();
					}
				}

				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				lexerBlock();
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 11L) != 0)) {
					{
					State = 410;
					ebnfSuffix();
					}
				}

				}
				break;
			case ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 413;
				actionBlock();
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 414;
					Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(LPAREN);
			State = 420;
			lexerAltList();
			State = 421;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(ANTLRv4Parser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 80, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(RARROW);
			State = 424;
			lexerCommand();
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 425;
				Match(COMMA);
				State = 426;
				lexerCommand();
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 82, RULE_lexerCommand);
		try {
			State = 438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432;
				lexerCommandName();
				State = 433;
				Match(LPAREN);
				State = 434;
				lexerCommandExpr();
				State = 435;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437;
				lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 84, RULE_lexerCommandName);
		try {
			State = 442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE_REF:
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440;
				identifier();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441;
				Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 86, RULE_lexerCommandExpr);
		try {
			State = 446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE_REF:
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444;
				identifier();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 88, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			alternative();
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 449;
				Match(OR);
				State = 450;
				alternative();
				}
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 90, RULE_alternative);
		int _la;
		try {
			State = 465;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACTION:
			case RULE_REF:
			case STRING_LITERAL:
			case TOKEN_REF:
			case LPAREN:
			case LT:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 456;
					elementOptions();
					}
				}

				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 459;
					element();
					}
					}
					State = 462;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 288230376151722512L) != 0) || _la==DOT || _la==NOT );
				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
			case POUND:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateOptionsContext predicateOptions() {
			return GetRuleContext<PredicateOptionsContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 92, RULE_element);
		int _la;
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 467;
				labeledElement();
				State = 470;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 468;
					ebnfSuffix();
					}
					break;
				case ACTION:
				case RULE_REF:
				case STRING_LITERAL:
				case TOKEN_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 472;
				atom();
				State = 475;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 473;
					ebnfSuffix();
					}
					break;
				case ACTION:
				case RULE_REF:
				case STRING_LITERAL:
				case TOKEN_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 477;
				ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 478;
				actionBlock();
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 479;
					Match(QUESTION);
					}
				}

				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 482;
					predicateOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ANTLRv4Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateOptionContext[] predicateOption() {
			return GetRuleContexts<PredicateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateOptionContext predicateOption(int i) {
			return GetRuleContext<PredicateOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ANTLRv4Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public PredicateOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterPredicateOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitPredicateOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateOptionsContext predicateOptions() {
		PredicateOptionsContext _localctx = new PredicateOptionsContext(Context, State);
		EnterRule(_localctx, 94, RULE_predicateOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			Match(LT);
			State = 488;
			predicateOption();
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 489;
				Match(COMMA);
				State = 490;
				predicateOption();
				}
				}
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 496;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionContext elementOption() {
			return GetRuleContext<ElementOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public PredicateOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterPredicateOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitPredicateOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateOptionContext predicateOption() {
		PredicateOptionContext _localctx = new PredicateOptionContext(Context, State);
		EnterRule(_localctx, 96, RULE_predicateOption);
		try {
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 498;
				elementOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 499;
				identifier();
				State = 500;
				Match(ASSIGN);
				State = 504;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACTION:
					{
					State = 501;
					actionBlock();
					}
					break;
				case INT:
					{
					State = 502;
					Match(INT);
					}
					break;
				case STRING_LITERAL:
					{
					State = 503;
					Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(ANTLRv4Parser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 98, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			identifier();
			State = 509;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 512;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULE_REF:
			case STRING_LITERAL:
			case TOKEN_REF:
			case DOT:
			case NOT:
				{
				State = 510;
				atom();
				}
				break;
			case LPAREN:
				{
				State = 511;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 100, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			block();
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 11L) != 0)) {
				{
				State = 515;
				blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 102, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(ANTLRv4Parser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(ANTLRv4Parser.QUESTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ANTLRv4Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ANTLRv4Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnfSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 104, RULE_ebnfSuffix);
		int _la;
		try {
			State = 532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				Match(QUESTION);
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 521;
					Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				Match(STAR);
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 525;
					Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 528;
				Match(PLUS);
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 529;
					Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalDefContext terminalDef() {
			return GetRuleContext<TerminalDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 106, RULE_lexerAtom);
		try {
			State = 539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 534;
				characterRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535;
				terminalDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 536;
				notSet();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 537;
				Match(LEXER_CHAR_SET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 538;
				wildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminalDefContext terminalDef() {
			return GetRuleContext<TerminalDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 108, RULE_atom);
		try {
			State = 545;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 541;
				terminalDef();
				}
				break;
			case RULE_REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542;
				ruleref();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 543;
				notSet();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 544;
				wildcard();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ANTLRv4Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(Context, State);
		EnterRule(_localctx, 110, RULE_wildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			Match(DOT);
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 548;
				elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ANTLRv4Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 112, RULE_notSet);
		try {
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551;
				Match(NOT);
				State = 552;
				setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 553;
				Match(NOT);
				State = 554;
				blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 114, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			Match(LPAREN);
			State = 558;
			setElement();
			State = 563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 559;
				Match(OR);
				State = 560;
				setElement();
				}
				}
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 566;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterRangeContext characterRange() {
			return GetRuleContext<CharacterRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 116, RULE_setElement);
		int _la;
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568;
				Match(TOKEN_REF);
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 569;
					elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				Match(STRING_LITERAL);
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 573;
					elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 576;
				characterRange();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 577;
				Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 118, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(LPAREN);
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & 34359869441L) != 0)) {
				{
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 581;
					optionsSpec();
					}
				}

				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 584;
					ruleAction();
					}
					}
					State = 589;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 590;
				Match(COLON);
				}
			}

			State = 593;
			altList();
			State = 594;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 120, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(RULE_REF);
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 597;
				argActionBlock();
				}
			}

			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 600;
				elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(ANTLRv4Parser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(ANTLRv4Parser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(ANTLRv4Parser.RANGE, 0); }
		public CharacterRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterCharacterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitCharacterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterRangeContext characterRange() {
		CharacterRangeContext _localctx = new CharacterRangeContext(Context, State);
		EnterRule(_localctx, 122, RULE_characterRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(STRING_LITERAL);
			State = 604;
			Match(RANGE);
			State = 605;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public TerminalDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterTerminalDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitTerminalDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalDefContext terminalDef() {
		TerminalDefContext _localctx = new TerminalDefContext(Context, State);
		EnterRule(_localctx, 124, RULE_terminalDef);
		int _la;
		try {
			State = 615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607;
				Match(TOKEN_REF);
				State = 609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 608;
					elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611;
				Match(STRING_LITERAL);
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 612;
					elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ANTLRv4Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ANTLRv4Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 126, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			Match(LT);
			State = 618;
			elementOption();
			State = 623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 619;
				Match(COMMA);
				State = 620;
				elementOption();
				}
				}
				State = 625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 626;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 128, RULE_elementOption);
		try {
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 628;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 629;
				identifier();
				State = 630;
				Match(ASSIGN);
				State = 634;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RULE_REF:
				case TOKEN_REF:
					{
					State = 631;
					qualifiedIdentifier();
					}
					break;
				case STRING_LITERAL:
					{
					State = 632;
					Match(STRING_LITERAL);
					}
					break;
				case INT:
					{
					State = 633;
					Match(INT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 130, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			_la = TokenStream.LA(1);
			if ( !(_la==RULE_REF || _la==TOKEN_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ANTLRv4Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ANTLRv4Parser.DOT, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 132, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			identifier();
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 641;
				Match(DOT);
				State = 642;
				identifier();
				}
				}
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,79,649,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,5,0,137,8,0,10,0,12,0,140,9,0,1,
		0,1,0,5,0,144,8,0,10,0,12,0,147,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,3,2,160,8,2,1,3,1,3,1,3,1,3,1,3,3,3,167,8,3,1,4,1,4,1,4,1,4,
		5,4,173,8,4,10,4,12,4,176,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,
		187,8,6,10,6,12,6,190,9,6,1,6,1,6,1,6,3,6,195,8,6,1,7,1,7,1,7,1,7,5,7,
		201,8,7,10,7,12,7,204,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,213,8,8,1,9,
		1,9,3,9,217,8,9,1,9,1,9,1,10,1,10,3,10,223,8,10,1,10,1,10,1,11,1,11,1,
		11,5,11,230,8,11,10,11,12,11,233,9,11,1,11,3,11,236,8,11,1,12,1,12,1,12,
		1,12,3,12,242,8,12,1,12,1,12,1,12,1,13,1,13,1,13,3,13,250,8,13,1,14,1,
		14,1,15,1,15,5,15,256,8,15,10,15,12,15,259,9,15,1,15,1,15,1,16,1,16,1,
		16,1,16,5,16,267,8,16,10,16,12,16,270,9,16,1,17,5,17,273,8,17,10,17,12,
		17,276,9,17,1,18,1,18,3,18,280,8,18,1,19,3,19,283,8,19,1,19,1,19,3,19,
		287,8,19,1,19,3,19,290,8,19,1,19,3,19,293,8,19,1,19,3,19,296,8,19,1,19,
		5,19,299,8,19,10,19,12,19,302,9,19,1,19,1,19,1,19,1,19,1,19,1,20,5,20,
		310,8,20,10,20,12,20,313,9,20,1,20,3,20,316,8,20,1,21,1,21,1,21,1,21,1,
		22,1,22,1,22,1,23,1,23,3,23,327,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
		5,25,336,8,25,10,25,12,25,339,9,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
		1,28,4,28,349,8,28,11,28,12,28,350,1,29,1,29,1,30,1,30,1,31,1,31,1,31,
		5,31,360,8,31,10,31,12,31,363,9,31,1,32,1,32,1,32,3,32,368,8,32,1,33,3,
		33,371,8,33,1,33,1,33,3,33,375,8,33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,
		1,35,1,35,5,35,386,8,35,10,35,12,35,389,9,35,1,36,1,36,3,36,393,8,36,1,
		36,3,36,396,8,36,1,37,4,37,399,8,37,11,37,12,37,400,1,37,3,37,404,8,37,
		1,38,1,38,3,38,408,8,38,1,38,1,38,3,38,412,8,38,1,38,1,38,3,38,416,8,38,
		3,38,418,8,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,428,8,40,10,
		40,12,40,431,9,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,439,8,41,1,42,1,42,
		3,42,443,8,42,1,43,1,43,3,43,447,8,43,1,44,1,44,1,44,5,44,452,8,44,10,
		44,12,44,455,9,44,1,45,3,45,458,8,45,1,45,4,45,461,8,45,11,45,12,45,462,
		1,45,3,45,466,8,45,1,46,1,46,1,46,3,46,471,8,46,1,46,1,46,1,46,3,46,476,
		8,46,1,46,1,46,1,46,3,46,481,8,46,1,46,3,46,484,8,46,3,46,486,8,46,1,47,
		1,47,1,47,1,47,5,47,492,8,47,10,47,12,47,495,9,47,1,47,1,47,1,48,1,48,
		1,48,1,48,1,48,1,48,3,48,505,8,48,3,48,507,8,48,1,49,1,49,1,49,1,49,3,
		49,513,8,49,1,50,1,50,3,50,517,8,50,1,51,1,51,1,52,1,52,3,52,523,8,52,
		1,52,1,52,3,52,527,8,52,1,52,1,52,3,52,531,8,52,3,52,533,8,52,1,53,1,53,
		1,53,1,53,1,53,3,53,540,8,53,1,54,1,54,1,54,1,54,3,54,546,8,54,1,55,1,
		55,3,55,550,8,55,1,56,1,56,1,56,1,56,3,56,556,8,56,1,57,1,57,1,57,1,57,
		5,57,562,8,57,10,57,12,57,565,9,57,1,57,1,57,1,58,1,58,3,58,571,8,58,1,
		58,1,58,3,58,575,8,58,1,58,1,58,3,58,579,8,58,1,59,1,59,3,59,583,8,59,
		1,59,5,59,586,8,59,10,59,12,59,589,9,59,1,59,3,59,592,8,59,1,59,1,59,1,
		59,1,60,1,60,3,60,599,8,60,1,60,3,60,602,8,60,1,61,1,61,1,61,1,61,1,62,
		1,62,3,62,610,8,62,1,62,1,62,3,62,614,8,62,3,62,616,8,62,1,63,1,63,1,63,
		1,63,5,63,622,8,63,10,63,12,63,625,9,63,1,63,1,63,1,64,1,64,1,64,1,64,
		1,64,1,64,3,64,635,8,64,3,64,637,8,64,1,65,1,65,1,66,1,66,1,66,5,66,644,
		8,66,10,66,12,66,647,9,66,1,66,1,257,0,67,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,0,3,2,0,41,41,45,47,2,0,7,7,66,
		66,2,0,9,9,13,13,686,0,134,1,0,0,0,2,150,1,0,0,0,4,159,1,0,0,0,6,166,1,
		0,0,0,8,168,1,0,0,0,10,179,1,0,0,0,12,194,1,0,0,0,14,196,1,0,0,0,16,212,
		1,0,0,0,18,214,1,0,0,0,20,220,1,0,0,0,22,226,1,0,0,0,24,237,1,0,0,0,26,
		249,1,0,0,0,28,251,1,0,0,0,30,253,1,0,0,0,32,262,1,0,0,0,34,274,1,0,0,
		0,36,279,1,0,0,0,38,282,1,0,0,0,40,311,1,0,0,0,42,317,1,0,0,0,44,321,1,
		0,0,0,46,326,1,0,0,0,48,328,1,0,0,0,50,331,1,0,0,0,52,340,1,0,0,0,54,343,
		1,0,0,0,56,348,1,0,0,0,58,352,1,0,0,0,60,354,1,0,0,0,62,356,1,0,0,0,64,
		364,1,0,0,0,66,370,1,0,0,0,68,380,1,0,0,0,70,382,1,0,0,0,72,395,1,0,0,
		0,74,403,1,0,0,0,76,417,1,0,0,0,78,419,1,0,0,0,80,423,1,0,0,0,82,438,1,
		0,0,0,84,442,1,0,0,0,86,446,1,0,0,0,88,448,1,0,0,0,90,465,1,0,0,0,92,485,
		1,0,0,0,94,487,1,0,0,0,96,506,1,0,0,0,98,508,1,0,0,0,100,514,1,0,0,0,102,
		518,1,0,0,0,104,532,1,0,0,0,106,539,1,0,0,0,108,545,1,0,0,0,110,547,1,
		0,0,0,112,555,1,0,0,0,114,557,1,0,0,0,116,578,1,0,0,0,118,580,1,0,0,0,
		120,596,1,0,0,0,122,603,1,0,0,0,124,615,1,0,0,0,126,617,1,0,0,0,128,636,
		1,0,0,0,130,638,1,0,0,0,132,640,1,0,0,0,134,138,3,2,1,0,135,137,3,6,3,
		0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,
		141,1,0,0,0,140,138,1,0,0,0,141,145,3,34,17,0,142,144,3,32,16,0,143,142,
		1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,
		0,147,145,1,0,0,0,148,149,5,0,0,1,149,1,1,0,0,0,150,151,3,4,2,0,151,152,
		3,130,65,0,152,153,5,57,0,0,153,3,1,0,0,0,154,155,5,42,0,0,155,160,5,44,
		0,0,156,157,5,43,0,0,157,160,5,44,0,0,158,160,5,44,0,0,159,154,1,0,0,0,
		159,156,1,0,0,0,159,158,1,0,0,0,160,5,1,0,0,0,161,167,3,8,4,0,162,167,
		3,14,7,0,163,167,3,18,9,0,164,167,3,20,10,0,165,167,3,24,12,0,166,161,
		1,0,0,0,166,162,1,0,0,0,166,163,1,0,0,0,166,164,1,0,0,0,166,165,1,0,0,
		0,167,7,1,0,0,0,168,174,5,37,0,0,169,170,3,10,5,0,170,171,5,57,0,0,171,
		173,1,0,0,0,172,169,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,1,
		0,0,0,175,177,1,0,0,0,176,174,1,0,0,0,177,178,5,60,0,0,178,9,1,0,0,0,179,
		180,3,130,65,0,180,181,5,7,0,0,181,182,3,12,6,0,182,11,1,0,0,0,183,188,
		3,130,65,0,184,185,5,71,0,0,185,187,3,130,65,0,186,184,1,0,0,0,187,190,
		1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,195,1,0,0,0,190,188,1,0,0,
		0,191,195,5,11,0,0,192,195,3,28,14,0,193,195,5,34,0,0,194,183,1,0,0,0,
		194,191,1,0,0,0,194,192,1,0,0,0,194,193,1,0,0,0,195,13,1,0,0,0,196,197,
		5,40,0,0,197,202,3,16,8,0,198,199,5,56,0,0,199,201,3,16,8,0,200,198,1,
		0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,
		204,202,1,0,0,0,205,206,5,57,0,0,206,15,1,0,0,0,207,208,3,130,65,0,208,
		209,5,7,0,0,209,210,3,130,65,0,210,213,1,0,0,0,211,213,3,130,65,0,212,
		207,1,0,0,0,212,211,1,0,0,0,213,17,1,0,0,0,214,216,5,38,0,0,215,217,3,
		22,11,0,216,215,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,5,60,0,
		0,219,19,1,0,0,0,220,222,5,39,0,0,221,223,3,22,11,0,222,221,1,0,0,0,222,
		223,1,0,0,0,223,224,1,0,0,0,224,225,5,60,0,0,225,21,1,0,0,0,226,231,3,
		130,65,0,227,228,5,56,0,0,228,230,3,130,65,0,229,227,1,0,0,0,230,233,1,
		0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,
		234,236,5,56,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,23,1,0,0,0,237,241,
		5,72,0,0,238,239,3,26,13,0,239,240,5,55,0,0,240,242,1,0,0,0,241,238,1,
		0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,244,3,130,65,0,244,245,3,28,
		14,0,245,25,1,0,0,0,246,250,3,130,65,0,247,250,5,42,0,0,248,250,5,43,0,
		0,249,246,1,0,0,0,249,247,1,0,0,0,249,248,1,0,0,0,250,27,1,0,0,0,251,252,
		5,4,0,0,252,29,1,0,0,0,253,257,5,36,0,0,254,256,5,78,0,0,255,254,1,0,0,
		0,256,259,1,0,0,0,257,258,1,0,0,0,257,255,1,0,0,0,258,260,1,0,0,0,259,
		257,1,0,0,0,260,261,5,76,0,0,261,31,1,0,0,0,262,263,5,53,0,0,263,264,3,
		130,65,0,264,268,5,57,0,0,265,267,3,66,33,0,266,265,1,0,0,0,267,270,1,
		0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,33,1,0,0,0,270,268,1,0,0,0,271,
		273,3,36,18,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,
		1,0,0,0,275,35,1,0,0,0,276,274,1,0,0,0,277,280,3,38,19,0,278,280,3,66,
		33,0,279,277,1,0,0,0,279,278,1,0,0,0,280,37,1,0,0,0,281,283,3,56,28,0,
		282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,286,5,9,0,0,285,287,
		3,30,15,0,286,285,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,290,3,48,
		24,0,289,288,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,293,3,50,25,0,
		292,291,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,296,3,52,26,0,295,
		294,1,0,0,0,295,296,1,0,0,0,296,300,1,0,0,0,297,299,3,46,23,0,298,297,
		1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,
		0,302,300,1,0,0,0,303,304,5,54,0,0,304,305,3,60,30,0,305,306,5,57,0,0,
		306,307,3,40,20,0,307,39,1,0,0,0,308,310,3,42,21,0,309,308,1,0,0,0,310,
		313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,315,1,0,0,0,313,311,1,
		0,0,0,314,316,3,44,22,0,315,314,1,0,0,0,315,316,1,0,0,0,316,41,1,0,0,0,
		317,318,5,51,0,0,318,319,3,30,15,0,319,320,3,28,14,0,320,43,1,0,0,0,321,
		322,5,52,0,0,322,323,3,28,14,0,323,45,1,0,0,0,324,327,3,8,4,0,325,327,
		3,54,27,0,326,324,1,0,0,0,326,325,1,0,0,0,327,47,1,0,0,0,328,329,5,48,
		0,0,329,330,3,30,15,0,330,49,1,0,0,0,331,332,5,50,0,0,332,337,3,132,66,
		0,333,334,5,56,0,0,334,336,3,132,66,0,335,333,1,0,0,0,336,339,1,0,0,0,
		337,335,1,0,0,0,337,338,1,0,0,0,338,51,1,0,0,0,339,337,1,0,0,0,340,341,
		5,49,0,0,341,342,3,30,15,0,342,53,1,0,0,0,343,344,5,72,0,0,344,345,3,130,
		65,0,345,346,3,28,14,0,346,55,1,0,0,0,347,349,3,58,29,0,348,347,1,0,0,
		0,349,350,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,57,1,0,0,0,352,353,
		7,0,0,0,353,59,1,0,0,0,354,355,3,62,31,0,355,61,1,0,0,0,356,361,3,64,32,
		0,357,358,5,68,0,0,358,360,3,64,32,0,359,357,1,0,0,0,360,363,1,0,0,0,361,
		359,1,0,0,0,361,362,1,0,0,0,362,63,1,0,0,0,363,361,1,0,0,0,364,367,3,90,
		45,0,365,366,5,73,0,0,366,368,3,130,65,0,367,365,1,0,0,0,367,368,1,0,0,
		0,368,65,1,0,0,0,369,371,5,41,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,
		372,1,0,0,0,372,374,5,13,0,0,373,375,3,8,4,0,374,373,1,0,0,0,374,375,1,
		0,0,0,375,376,1,0,0,0,376,377,5,54,0,0,377,378,3,68,34,0,378,379,5,57,
		0,0,379,67,1,0,0,0,380,381,3,70,35,0,381,69,1,0,0,0,382,387,3,72,36,0,
		383,384,5,68,0,0,384,386,3,72,36,0,385,383,1,0,0,0,386,389,1,0,0,0,387,
		385,1,0,0,0,387,388,1,0,0,0,388,71,1,0,0,0,389,387,1,0,0,0,390,392,3,74,
		37,0,391,393,3,80,40,0,392,391,1,0,0,0,392,393,1,0,0,0,393,396,1,0,0,0,
		394,396,1,0,0,0,395,390,1,0,0,0,395,394,1,0,0,0,396,73,1,0,0,0,397,399,
		3,76,38,0,398,397,1,0,0,0,399,400,1,0,0,0,400,398,1,0,0,0,400,401,1,0,
		0,0,401,404,1,0,0,0,402,404,1,0,0,0,403,398,1,0,0,0,403,402,1,0,0,0,404,
		75,1,0,0,0,405,407,3,106,53,0,406,408,3,104,52,0,407,406,1,0,0,0,407,408,
		1,0,0,0,408,418,1,0,0,0,409,411,3,78,39,0,410,412,3,104,52,0,411,410,1,
		0,0,0,411,412,1,0,0,0,412,418,1,0,0,0,413,415,3,28,14,0,414,416,5,64,0,
		0,415,414,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,405,1,0,0,0,417,
		409,1,0,0,0,417,413,1,0,0,0,418,77,1,0,0,0,419,420,5,58,0,0,420,421,3,
		70,35,0,421,422,5,59,0,0,422,79,1,0,0,0,423,424,5,61,0,0,424,429,3,82,
		41,0,425,426,5,56,0,0,426,428,3,82,41,0,427,425,1,0,0,0,428,431,1,0,0,
		0,429,427,1,0,0,0,429,430,1,0,0,0,430,81,1,0,0,0,431,429,1,0,0,0,432,433,
		3,84,42,0,433,434,5,58,0,0,434,435,3,86,43,0,435,436,5,59,0,0,436,439,
		1,0,0,0,437,439,3,84,42,0,438,432,1,0,0,0,438,437,1,0,0,0,439,83,1,0,0,
		0,440,443,3,130,65,0,441,443,5,53,0,0,442,440,1,0,0,0,442,441,1,0,0,0,
		443,85,1,0,0,0,444,447,3,130,65,0,445,447,5,34,0,0,446,444,1,0,0,0,446,
		445,1,0,0,0,447,87,1,0,0,0,448,453,3,90,45,0,449,450,5,68,0,0,450,452,
		3,90,45,0,451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,
		0,0,454,89,1,0,0,0,455,453,1,0,0,0,456,458,3,126,63,0,457,456,1,0,0,0,
		457,458,1,0,0,0,458,460,1,0,0,0,459,461,3,92,46,0,460,459,1,0,0,0,461,
		462,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,466,1,0,0,0,464,466,1,
		0,0,0,465,457,1,0,0,0,465,464,1,0,0,0,466,91,1,0,0,0,467,470,3,98,49,0,
		468,471,3,104,52,0,469,471,1,0,0,0,470,468,1,0,0,0,470,469,1,0,0,0,471,
		486,1,0,0,0,472,475,3,108,54,0,473,476,3,104,52,0,474,476,1,0,0,0,475,
		473,1,0,0,0,475,474,1,0,0,0,476,486,1,0,0,0,477,486,3,100,50,0,478,480,
		3,28,14,0,479,481,5,64,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,483,1,0,
		0,0,482,484,3,94,47,0,483,482,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,
		485,467,1,0,0,0,485,472,1,0,0,0,485,477,1,0,0,0,485,478,1,0,0,0,486,93,
		1,0,0,0,487,488,5,62,0,0,488,493,3,96,48,0,489,490,5,56,0,0,490,492,3,
		96,48,0,491,489,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,
		0,494,496,1,0,0,0,495,493,1,0,0,0,496,497,5,63,0,0,497,95,1,0,0,0,498,
		507,3,128,64,0,499,500,3,130,65,0,500,504,5,7,0,0,501,505,3,28,14,0,502,
		505,5,34,0,0,503,505,5,11,0,0,504,501,1,0,0,0,504,502,1,0,0,0,504,503,
		1,0,0,0,505,507,1,0,0,0,506,498,1,0,0,0,506,499,1,0,0,0,507,97,1,0,0,0,
		508,509,3,130,65,0,509,512,7,1,0,0,510,513,3,108,54,0,511,513,3,118,59,
		0,512,510,1,0,0,0,512,511,1,0,0,0,513,99,1,0,0,0,514,516,3,118,59,0,515,
		517,3,102,51,0,516,515,1,0,0,0,516,517,1,0,0,0,517,101,1,0,0,0,518,519,
		3,104,52,0,519,103,1,0,0,0,520,522,5,64,0,0,521,523,5,64,0,0,522,521,1,
		0,0,0,522,523,1,0,0,0,523,533,1,0,0,0,524,526,5,65,0,0,525,527,5,64,0,
		0,526,525,1,0,0,0,526,527,1,0,0,0,527,533,1,0,0,0,528,530,5,67,0,0,529,
		531,5,64,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,533,1,0,0,0,532,520,1,
		0,0,0,532,524,1,0,0,0,532,528,1,0,0,0,533,105,1,0,0,0,534,540,3,122,61,
		0,535,540,3,124,62,0,536,540,3,112,56,0,537,540,5,8,0,0,538,540,3,110,
		55,0,539,534,1,0,0,0,539,535,1,0,0,0,539,536,1,0,0,0,539,537,1,0,0,0,539,
		538,1,0,0,0,540,107,1,0,0,0,541,546,3,124,62,0,542,546,3,120,60,0,543,
		546,3,112,56,0,544,546,3,110,55,0,545,541,1,0,0,0,545,542,1,0,0,0,545,
		543,1,0,0,0,545,544,1,0,0,0,546,109,1,0,0,0,547,549,5,71,0,0,548,550,3,
		126,63,0,549,548,1,0,0,0,549,550,1,0,0,0,550,111,1,0,0,0,551,552,5,74,
		0,0,552,556,3,116,58,0,553,554,5,74,0,0,554,556,3,114,57,0,555,551,1,0,
		0,0,555,553,1,0,0,0,556,113,1,0,0,0,557,558,5,58,0,0,558,563,3,116,58,
		0,559,560,5,68,0,0,560,562,3,116,58,0,561,559,1,0,0,0,562,565,1,0,0,0,
		563,561,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,563,1,0,0,0,566,567,
		5,59,0,0,567,115,1,0,0,0,568,570,5,13,0,0,569,571,3,126,63,0,570,569,1,
		0,0,0,570,571,1,0,0,0,571,579,1,0,0,0,572,574,5,11,0,0,573,575,3,126,63,
		0,574,573,1,0,0,0,574,575,1,0,0,0,575,579,1,0,0,0,576,579,3,122,61,0,577,
		579,5,8,0,0,578,568,1,0,0,0,578,572,1,0,0,0,578,576,1,0,0,0,578,577,1,
		0,0,0,579,117,1,0,0,0,580,591,5,58,0,0,581,583,3,8,4,0,582,581,1,0,0,0,
		582,583,1,0,0,0,583,587,1,0,0,0,584,586,3,54,27,0,585,584,1,0,0,0,586,
		589,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,587,1,
		0,0,0,590,592,5,54,0,0,591,582,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,
		593,594,3,88,44,0,594,595,5,59,0,0,595,119,1,0,0,0,596,598,5,9,0,0,597,
		599,3,30,15,0,598,597,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,0,600,602,
		3,126,63,0,601,600,1,0,0,0,601,602,1,0,0,0,602,121,1,0,0,0,603,604,5,11,
		0,0,604,605,5,70,0,0,605,606,5,11,0,0,606,123,1,0,0,0,607,609,5,13,0,0,
		608,610,3,126,63,0,609,608,1,0,0,0,609,610,1,0,0,0,610,616,1,0,0,0,611,
		613,5,11,0,0,612,614,3,126,63,0,613,612,1,0,0,0,613,614,1,0,0,0,614,616,
		1,0,0,0,615,607,1,0,0,0,615,611,1,0,0,0,616,125,1,0,0,0,617,618,5,62,0,
		0,618,623,3,128,64,0,619,620,5,56,0,0,620,622,3,128,64,0,621,619,1,0,0,
		0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,626,1,0,0,0,625,
		623,1,0,0,0,626,627,5,63,0,0,627,127,1,0,0,0,628,637,3,132,66,0,629,630,
		3,130,65,0,630,634,5,7,0,0,631,635,3,132,66,0,632,635,5,11,0,0,633,635,
		5,34,0,0,634,631,1,0,0,0,634,632,1,0,0,0,634,633,1,0,0,0,635,637,1,0,0,
		0,636,628,1,0,0,0,636,629,1,0,0,0,637,129,1,0,0,0,638,639,7,2,0,0,639,
		131,1,0,0,0,640,645,3,130,65,0,641,642,5,71,0,0,642,644,3,130,65,0,643,
		641,1,0,0,0,644,647,1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,133,1,
		0,0,0,647,645,1,0,0,0,85,138,145,159,166,174,188,194,202,212,216,222,231,
		235,241,249,257,268,274,279,282,286,289,292,295,300,311,315,326,337,350,
		361,367,370,374,387,392,395,400,403,407,411,415,417,429,438,442,446,453,
		457,462,465,470,475,480,483,485,493,504,506,512,516,522,526,530,532,539,
		545,549,555,563,570,574,578,582,587,591,598,601,609,613,615,623,634,636,
		645
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
