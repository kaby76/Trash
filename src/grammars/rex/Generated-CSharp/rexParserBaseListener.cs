//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from rexParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IrexParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class rexParserBaseListener : IrexParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.grammar_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGrammar_([NotNull] rexParser.Grammar_Context context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.grammar_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGrammar_([NotNull] rexParser.Grammar_Context context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.prolog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProlog([NotNull] rexParser.PrologContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.prolog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProlog([NotNull] rexParser.PrologContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.processingInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProcessingInstruction([NotNull] rexParser.ProcessingInstructionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.processingInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProcessingInstruction([NotNull] rexParser.ProcessingInstructionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSyntaxDefinition([NotNull] rexParser.SyntaxDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSyntaxDefinition([NotNull] rexParser.SyntaxDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSyntaxProduction([NotNull] rexParser.SyntaxProductionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSyntaxProduction([NotNull] rexParser.SyntaxProductionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxChoice"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSyntaxChoice([NotNull] rexParser.SyntaxChoiceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxChoice"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSyntaxChoice([NotNull] rexParser.SyntaxChoiceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxSequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSyntaxSequence([NotNull] rexParser.SyntaxSequenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxSequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSyntaxSequence([NotNull] rexParser.SyntaxSequenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxItem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSyntaxItem([NotNull] rexParser.SyntaxItemContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxItem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSyntaxItem([NotNull] rexParser.SyntaxItemContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxPrimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSyntaxPrimary([NotNull] rexParser.SyntaxPrimaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxPrimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSyntaxPrimary([NotNull] rexParser.SyntaxPrimaryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLexicalDefinition([NotNull] rexParser.LexicalDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLexicalDefinition([NotNull] rexParser.LexicalDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLexicalProduction([NotNull] rexParser.LexicalProductionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLexicalProduction([NotNull] rexParser.LexicalProductionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.contextChoice"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContextChoice([NotNull] rexParser.ContextChoiceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.contextChoice"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContextChoice([NotNull] rexParser.ContextChoiceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalChoice"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLexicalChoice([NotNull] rexParser.LexicalChoiceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalChoice"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLexicalChoice([NotNull] rexParser.LexicalChoiceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.contextExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContextExpression([NotNull] rexParser.ContextExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.contextExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContextExpression([NotNull] rexParser.ContextExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalSequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLexicalSequence([NotNull] rexParser.LexicalSequenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalSequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLexicalSequence([NotNull] rexParser.LexicalSequenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalItem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLexicalItem([NotNull] rexParser.LexicalItemContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalItem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLexicalItem([NotNull] rexParser.LexicalItemContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalPrimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLexicalPrimary([NotNull] rexParser.LexicalPrimaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalPrimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLexicalPrimary([NotNull] rexParser.LexicalPrimaryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.nameOrString"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNameOrString([NotNull] rexParser.NameOrStringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.nameOrString"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNameOrString([NotNull] rexParser.NameOrStringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.context"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContext([NotNull] rexParser.ContextContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.context"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContext([NotNull] rexParser.ContextContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.charCode"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharCode([NotNull] rexParser.CharCodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.charCode"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharCode([NotNull] rexParser.CharCodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.unicode"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnicode([NotNull] rexParser.UnicodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.unicode"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnicode([NotNull] rexParser.UnicodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.charClass"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharClass([NotNull] rexParser.CharClassContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.charClass"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharClass([NotNull] rexParser.CharClassContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.option"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOption([NotNull] rexParser.OptionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.option"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOption([NotNull] rexParser.OptionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.preference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPreference([NotNull] rexParser.PreferenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.preference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPreference([NotNull] rexParser.PreferenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.delimiter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDelimiter([NotNull] rexParser.DelimiterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.delimiter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDelimiter([NotNull] rexParser.DelimiterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.equivalence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquivalence([NotNull] rexParser.EquivalenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.equivalence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquivalence([NotNull] rexParser.EquivalenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.equivalenceCharRange"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquivalenceCharRange([NotNull] rexParser.EquivalenceCharRangeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.equivalenceCharRange"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquivalenceCharRange([NotNull] rexParser.EquivalenceCharRangeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.encore"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEncore([NotNull] rexParser.EncoreContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.encore"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEncore([NotNull] rexParser.EncoreContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterName([NotNull] rexParser.NameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitName([NotNull] rexParser.NameContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
