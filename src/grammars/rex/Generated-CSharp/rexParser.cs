//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from rexParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class rexParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenQu=1, CloseQu=2, RuleDef=3, RuleSep=4, Sharp=5, Quest=6, Star=7, Plus=8, 
		VBar=9, Slash=10, OpenP=11, CloseP=12, Tokens=13, Encore=14, Dot=15, Amp=16, 
		Minus=17, OpenSet=18, OpenNotSet=19, Dollar=20, OpenMLComment=21, CloseMLComment=22, 
		Colon=23, GtGt=24, LtLt=25, BsBs=26, EqEq=27, WsLit=28, ExplicitLit=29, 
		DefinitionLit=30, Name=31, StringLiteral=32, CaretName=33, CharCode=34, 
		Unicode=35, Char=36, SingleLineComment=37, MultiLineComment=38, Whitespace=39, 
		WS_Space=40, DirPIContents=41, SetChar=42, SetCharCode=43, SetCharRange=44, 
		SetCharCodeRange=45, CloseSet=46;
	public const int
		RULE_grammar_ = 0, RULE_prolog = 1, RULE_processingInstruction = 2, RULE_syntaxDefinition = 3, 
		RULE_syntaxProduction = 4, RULE_syntaxChoice = 5, RULE_syntaxSequence = 6, 
		RULE_syntaxItem = 7, RULE_syntaxPrimary = 8, RULE_lexicalDefinition = 9, 
		RULE_lexicalProduction = 10, RULE_contextChoice = 11, RULE_lexicalChoice = 12, 
		RULE_contextExpression = 13, RULE_lexicalSequence = 14, RULE_lexicalItem = 15, 
		RULE_lexicalPrimary = 16, RULE_nameOrString = 17, RULE_context = 18, RULE_charCode = 19, 
		RULE_unicode = 20, RULE_charClass = 21, RULE_option = 22, RULE_preference = 23, 
		RULE_delimiter = 24, RULE_equivalence = 25, RULE_equivalenceCharRange = 26, 
		RULE_encore = 27, RULE_name = 28;
	public static readonly string[] ruleNames = {
		"grammar_", "prolog", "processingInstruction", "syntaxDefinition", "syntaxProduction", 
		"syntaxChoice", "syntaxSequence", "syntaxItem", "syntaxPrimary", "lexicalDefinition", 
		"lexicalProduction", "contextChoice", "lexicalChoice", "contextExpression", 
		"lexicalSequence", "lexicalItem", "lexicalPrimary", "nameOrString", "context", 
		"charCode", "unicode", "charClass", "option", "preference", "delimiter", 
		"equivalence", "equivalenceCharRange", "encore", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<?'", "'?>'", "'::='", "';'", "'#'", "'?'", "'*'", "'+'", "'|'", 
		"'/'", "'('", "')'", "'<?TOKENS?>'", "'<?ENCORE?>'", "'.'", "'&'", "'-'", 
		"'['", "'[^'", "'$'", "'/*'", "'*/'", "':'", "'>>'", "'<<'", "'\\\\'", 
		"'=='", "'ws'", "'explicit'", "'definition'", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenQu", "CloseQu", "RuleDef", "RuleSep", "Sharp", "Quest", "Star", 
		"Plus", "VBar", "Slash", "OpenP", "CloseP", "Tokens", "Encore", "Dot", 
		"Amp", "Minus", "OpenSet", "OpenNotSet", "Dollar", "OpenMLComment", "CloseMLComment", 
		"Colon", "GtGt", "LtLt", "BsBs", "EqEq", "WsLit", "ExplicitLit", "DefinitionLit", 
		"Name", "StringLiteral", "CaretName", "CharCode", "Unicode", "Char", "SingleLineComment", 
		"MultiLineComment", "Whitespace", "WS_Space", "DirPIContents", "SetChar", 
		"SetCharCode", "SetCharRange", "SetCharCodeRange", "CloseSet"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "rexParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static rexParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public rexParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public rexParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Grammar_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrologContext prolog() {
			return GetRuleContext<PrologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxDefinitionContext syntaxDefinition() {
			return GetRuleContext<SyntaxDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(rexParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexicalDefinitionContext lexicalDefinition() {
			return GetRuleContext<LexicalDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncoreContext encore() {
			return GetRuleContext<EncoreContext>(0);
		}
		public Grammar_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitGrammar_(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_Context grammar_() {
		Grammar_Context _localctx = new Grammar_Context(Context, State);
		EnterRule(_localctx, 0, RULE_grammar_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			prolog();
			State = 59;
			syntaxDefinition();
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Tokens) {
				{
				State = 60;
				lexicalDefinition();
				}
			}

			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Encore) {
				{
				State = 63;
				encore();
				}
			}

			State = 66;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcessingInstructionContext[] processingInstruction() {
			return GetRuleContexts<ProcessingInstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcessingInstructionContext processingInstruction(int i) {
			return GetRuleContext<ProcessingInstructionContext>(i);
		}
		public PrologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prolog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterProlog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitProlog(this);
		}
	}

	[RuleVersion(0)]
	public PrologContext prolog() {
		PrologContext _localctx = new PrologContext(Context, State);
		EnterRule(_localctx, 2, RULE_prolog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpenQu) {
				{
				{
				State = 68;
				processingInstruction();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcessingInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenQu() { return GetToken(rexParser.OpenQu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseQu() { return GetToken(rexParser.CloseQu, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS_Space() { return GetTokens(rexParser.WS_Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS_Space(int i) {
			return GetToken(rexParser.WS_Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirPIContents() { return GetToken(rexParser.DirPIContents, 0); }
		public ProcessingInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_processingInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterProcessingInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitProcessingInstruction(this);
		}
	}

	[RuleVersion(0)]
	public ProcessingInstructionContext processingInstruction() {
		ProcessingInstructionContext _localctx = new ProcessingInstructionContext(Context, State);
		EnterRule(_localctx, 4, RULE_processingInstruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(OpenQu);
			State = 75;
			name();
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS_Space) {
				{
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 76;
					Match(WS_Space);
					}
					}
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS_Space );
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DirPIContents) {
					{
					State = 81;
					Match(DirPIContents);
					}
				}

				}
			}

			State = 86;
			Match(CloseQu);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxProductionContext[] syntaxProduction() {
			return GetRuleContexts<SyntaxProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxProductionContext syntaxProduction(int i) {
			return GetRuleContext<SyntaxProductionContext>(i);
		}
		public SyntaxDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntaxDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterSyntaxDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitSyntaxDefinition(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxDefinitionContext syntaxDefinition() {
		SyntaxDefinitionContext _localctx = new SyntaxDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_syntaxDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 88;
				syntaxProduction();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4026531840L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RuleDef() { return GetToken(rexParser.RuleDef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxChoiceContext syntaxChoice() {
			return GetRuleContext<SyntaxChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public SyntaxProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntaxProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterSyntaxProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitSyntaxProduction(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxProductionContext syntaxProduction() {
		SyntaxProductionContext _localctx = new SyntaxProductionContext(Context, State);
		EnterRule(_localctx, 8, RULE_syntaxProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			name();
			State = 94;
			Match(RuleDef);
			State = 95;
			syntaxChoice();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpenMLComment) {
				{
				{
				State = 96;
				option();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxSequenceContext[] syntaxSequence() {
			return GetRuleContexts<SyntaxSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxSequenceContext syntaxSequence(int i) {
			return GetRuleContext<SyntaxSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VBar() { return GetTokens(rexParser.VBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBar(int i) {
			return GetToken(rexParser.VBar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Slash() { return GetTokens(rexParser.Slash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash(int i) {
			return GetToken(rexParser.Slash, i);
		}
		public SyntaxChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntaxChoice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterSyntaxChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitSyntaxChoice(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxChoiceContext syntaxChoice() {
		SyntaxChoiceContext _localctx = new SyntaxChoiceContext(Context, State);
		EnterRule(_localctx, 10, RULE_syntaxChoice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			syntaxSequence();
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VBar:
				{
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 103;
					Match(VBar);
					State = 104;
					syntaxSequence();
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==VBar );
				}
				break;
			case Slash:
				{
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 109;
					Match(Slash);
					State = 110;
					syntaxSequence();
					}
					}
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Slash );
				}
				break;
			case Eof:
			case CloseP:
			case Tokens:
			case Encore:
			case OpenMLComment:
			case WsLit:
			case ExplicitLit:
			case DefinitionLit:
			case Name:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxItemContext[] syntaxItem() {
			return GetRuleContexts<SyntaxItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxItemContext syntaxItem(int i) {
			return GetRuleContext<SyntaxItemContext>(i);
		}
		public SyntaxSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntaxSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterSyntaxSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitSyntaxSequence(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxSequenceContext syntaxSequence() {
		SyntaxSequenceContext _localctx = new SyntaxSequenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_syntaxSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 117;
					syntaxItem();
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxPrimaryContext syntaxPrimary() {
			return GetRuleContext<SyntaxPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quest() { return GetToken(rexParser.Quest, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(rexParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(rexParser.Plus, 0); }
		public SyntaxItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntaxItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterSyntaxItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitSyntaxItem(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxItemContext syntaxItem() {
		SyntaxItemContext _localctx = new SyntaxItemContext(Context, State);
		EnterRule(_localctx, 14, RULE_syntaxItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			syntaxPrimary();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) {
				{
				State = 124;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameOrStringContext nameOrString() {
			return GetRuleContext<NameOrStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenP() { return GetToken(rexParser.OpenP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxChoiceContext syntaxChoice() {
			return GetRuleContext<SyntaxChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseP() { return GetToken(rexParser.CloseP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcessingInstructionContext processingInstruction() {
			return GetRuleContext<ProcessingInstructionContext>(0);
		}
		public SyntaxPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntaxPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterSyntaxPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitSyntaxPrimary(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxPrimaryContext syntaxPrimary() {
		SyntaxPrimaryContext _localctx = new SyntaxPrimaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_syntaxPrimary);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WsLit:
			case ExplicitLit:
			case DefinitionLit:
			case Name:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				nameOrString();
				}
				break;
			case OpenP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				Match(OpenP);
				State = 129;
				syntaxChoice();
				State = 130;
				Match(CloseP);
				}
				break;
			case OpenQu:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				processingInstruction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexicalDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tokens() { return GetToken(rexParser.Tokens, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexicalProductionContext[] lexicalProduction() {
			return GetRuleContexts<LexicalProductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexicalProductionContext lexicalProduction(int i) {
			return GetRuleContext<LexicalProductionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreferenceContext[] preference() {
			return GetRuleContexts<PreferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreferenceContext preference(int i) {
			return GetRuleContext<PreferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelimiterContext[] delimiter() {
			return GetRuleContexts<DelimiterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelimiterContext delimiter(int i) {
			return GetRuleContext<DelimiterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceContext[] equivalence() {
			return GetRuleContexts<EquivalenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceContext equivalence(int i) {
			return GetRuleContext<EquivalenceContext>(i);
		}
		public LexicalDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexicalDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterLexicalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitLexicalDefinition(this);
		}
	}

	[RuleVersion(0)]
	public LexicalDefinitionContext lexicalDefinition() {
		LexicalDefinitionContext _localctx = new LexicalDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_lexicalDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(Tokens);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8321794048L) != 0)) {
				{
				State = 140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 136;
					lexicalProduction();
					}
					break;
				case 2:
					{
					State = 137;
					preference();
					}
					break;
				case 3:
					{
					State = 138;
					delimiter();
					}
					break;
				case 4:
					{
					State = 139;
					equivalence();
					}
					break;
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexicalProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RuleDef() { return GetToken(rexParser.RuleDef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContextChoiceContext contextChoice() {
			return GetRuleContext<ContextChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(rexParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quest() { return GetToken(rexParser.Quest, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public LexicalProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexicalProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterLexicalProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitLexicalProduction(this);
		}
	}

	[RuleVersion(0)]
	public LexicalProductionContext lexicalProduction() {
		LexicalProductionContext _localctx = new LexicalProductionContext(Context, State);
		EnterRule(_localctx, 20, RULE_lexicalProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WsLit:
			case ExplicitLit:
			case DefinitionLit:
			case Name:
				{
				State = 145;
				name();
				}
				break;
			case Dot:
				{
				State = 146;
				Match(Dot);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Quest) {
				{
				State = 149;
				Match(Quest);
				}
			}

			State = 152;
			Match(RuleDef);
			State = 153;
			contextChoice();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpenMLComment) {
				{
				{
				State = 154;
				option();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContextExpressionContext[] contextExpression() {
			return GetRuleContexts<ContextExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextExpressionContext contextExpression(int i) {
			return GetRuleContext<ContextExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VBar() { return GetTokens(rexParser.VBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBar(int i) {
			return GetToken(rexParser.VBar, i);
		}
		public ContextChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextChoice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterContextChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitContextChoice(this);
		}
	}

	[RuleVersion(0)]
	public ContextChoiceContext contextChoice() {
		ContextChoiceContext _localctx = new ContextChoiceContext(Context, State);
		EnterRule(_localctx, 22, RULE_contextChoice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			contextExpression();
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VBar) {
				{
				{
				State = 161;
				Match(VBar);
				State = 162;
				contextExpression();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexicalChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexicalSequenceContext[] lexicalSequence() {
			return GetRuleContexts<LexicalSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexicalSequenceContext lexicalSequence(int i) {
			return GetRuleContext<LexicalSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VBar() { return GetTokens(rexParser.VBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBar(int i) {
			return GetToken(rexParser.VBar, i);
		}
		public LexicalChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexicalChoice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterLexicalChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitLexicalChoice(this);
		}
	}

	[RuleVersion(0)]
	public LexicalChoiceContext lexicalChoice() {
		LexicalChoiceContext _localctx = new LexicalChoiceContext(Context, State);
		EnterRule(_localctx, 24, RULE_lexicalChoice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			lexicalSequence();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VBar) {
				{
				{
				State = 169;
				Match(VBar);
				State = 170;
				lexicalSequence();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexicalSequenceContext lexicalSequence() {
			return GetRuleContext<LexicalSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Amp() { return GetToken(rexParser.Amp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexicalItemContext lexicalItem() {
			return GetRuleContext<LexicalItemContext>(0);
		}
		public ContextExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterContextExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitContextExpression(this);
		}
	}

	[RuleVersion(0)]
	public ContextExpressionContext contextExpression() {
		ContextExpressionContext _localctx = new ContextExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_contextExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			lexicalSequence();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Amp) {
				{
				State = 177;
				Match(Amp);
				State = 178;
				lexicalItem();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexicalSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexicalItemContext[] lexicalItem() {
			return GetRuleContexts<LexicalItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LexicalItemContext lexicalItem(int i) {
			return GetRuleContext<LexicalItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(rexParser.Minus, 0); }
		public LexicalSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexicalSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterLexicalSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitLexicalSequence(this);
		}
	}

	[RuleVersion(0)]
	public LexicalSequenceContext lexicalSequence() {
		LexicalSequenceContext _localctx = new LexicalSequenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_lexicalSequence);
		try {
			int _alt;
			State = 193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				lexicalItem();
				State = 191;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Minus:
					{
					State = 183;
					Match(Minus);
					State = 184;
					lexicalItem();
					}
					break;
				case Eof:
				case VBar:
				case OpenP:
				case CloseP:
				case Encore:
				case Dot:
				case Amp:
				case OpenSet:
				case OpenNotSet:
				case Dollar:
				case OpenMLComment:
				case WsLit:
				case ExplicitLit:
				case DefinitionLit:
				case Name:
				case StringLiteral:
				case CharCode:
				case Unicode:
					{
					State = 188;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 185;
							lexicalItem();
							}
							} 
						}
						State = 190;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexicalItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LexicalPrimaryContext lexicalPrimary() {
			return GetRuleContext<LexicalPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quest() { return GetToken(rexParser.Quest, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(rexParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(rexParser.Plus, 0); }
		public LexicalItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexicalItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterLexicalItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitLexicalItem(this);
		}
	}

	[RuleVersion(0)]
	public LexicalItemContext lexicalItem() {
		LexicalItemContext _localctx = new LexicalItemContext(Context, State);
		EnterRule(_localctx, 30, RULE_lexicalItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			lexicalPrimary();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) {
				{
				State = 196;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexicalPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(rexParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(rexParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenP() { return GetToken(rexParser.OpenP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LexicalChoiceContext lexicalChoice() {
			return GetRuleContext<LexicalChoiceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseP() { return GetToken(rexParser.CloseP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dollar() { return GetToken(rexParser.Dollar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharCodeContext charCode() {
			return GetRuleContext<CharCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharClassContext charClass() {
			return GetRuleContext<CharClassContext>(0);
		}
		public LexicalPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexicalPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterLexicalPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitLexicalPrimary(this);
		}
	}

	[RuleVersion(0)]
	public LexicalPrimaryContext lexicalPrimary() {
		LexicalPrimaryContext _localctx = new LexicalPrimaryContext(Context, State);
		EnterRule(_localctx, 32, RULE_lexicalPrimary);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dot:
			case WsLit:
			case ExplicitLit:
			case DefinitionLit:
			case Name:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WsLit:
				case ExplicitLit:
				case DefinitionLit:
				case Name:
					{
					State = 199;
					name();
					}
					break;
				case Dot:
					{
					State = 200;
					Match(Dot);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				Match(StringLiteral);
				}
				break;
			case OpenP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				Match(OpenP);
				State = 205;
				lexicalChoice();
				State = 206;
				Match(CloseP);
				}
				break;
			case Dollar:
				EnterOuterAlt(_localctx, 4);
				{
				State = 208;
				Match(Dollar);
				}
				break;
			case CharCode:
			case Unicode:
				EnterOuterAlt(_localctx, 5);
				{
				State = 209;
				charCode();
				}
				break;
			case OpenSet:
			case OpenNotSet:
				EnterOuterAlt(_localctx, 6);
				{
				State = 210;
				charClass();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameOrStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextContext context() {
			return GetRuleContext<ContextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(rexParser.StringLiteral, 0); }
		public NameOrStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameOrString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterNameOrString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitNameOrString(this);
		}
	}

	[RuleVersion(0)]
	public NameOrStringContext nameOrString() {
		NameOrStringContext _localctx = new NameOrStringContext(Context, State);
		EnterRule(_localctx, 34, RULE_nameOrString);
		int _la;
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WsLit:
			case ExplicitLit:
			case DefinitionLit:
			case Name:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				name();
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CaretName) {
					{
					State = 214;
					context();
					}
				}

				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				Match(StringLiteral);
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CaretName) {
					{
					State = 218;
					context();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CaretName() { return GetToken(rexParser.CaretName, 0); }
		public ContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterContext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitContext(this);
		}
	}

	[RuleVersion(0)]
	public ContextContext context() {
		ContextContext _localctx = new ContextContext(Context, State);
		EnterRule(_localctx, 36, RULE_context);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(CaretName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharCode() { return GetToken(rexParser.CharCode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnicodeContext unicode() {
			return GetRuleContext<UnicodeContext>(0);
		}
		public CharCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterCharCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitCharCode(this);
		}
	}

	[RuleVersion(0)]
	public CharCodeContext charCode() {
		CharCodeContext _localctx = new CharCodeContext(Context, State);
		EnterRule(_localctx, 38, RULE_charCode);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CharCode:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				Match(CharCode);
				}
				break;
			case Unicode:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				unicode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnicodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unicode() { return GetToken(rexParser.Unicode, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterUnicode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitUnicode(this);
		}
	}

	[RuleVersion(0)]
	public UnicodeContext unicode() {
		UnicodeContext _localctx = new UnicodeContext(Context, State);
		EnterRule(_localctx, 40, RULE_unicode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(Unicode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseSet() { return GetToken(rexParser.CloseSet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenSet() { return GetToken(rexParser.OpenSet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenNotSet() { return GetToken(rexParser.OpenNotSet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SetChar() { return GetTokens(rexParser.SetChar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SetChar(int i) {
			return GetToken(rexParser.SetChar, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SetCharCode() { return GetTokens(rexParser.SetCharCode); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SetCharCode(int i) {
			return GetToken(rexParser.SetCharCode, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SetCharRange() { return GetTokens(rexParser.SetCharRange); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SetCharRange(int i) {
			return GetToken(rexParser.SetCharRange, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SetCharCodeRange() { return GetTokens(rexParser.SetCharCodeRange); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SetCharCodeRange(int i) {
			return GetToken(rexParser.SetCharCodeRange, i);
		}
		public CharClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterCharClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitCharClass(this);
		}
	}

	[RuleVersion(0)]
	public CharClassContext charClass() {
		CharClassContext _localctx = new CharClassContext(Context, State);
		EnterRule(_localctx, 42, RULE_charClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_la = TokenStream.LA(1);
			if ( !(_la==OpenSet || _la==OpenNotSet) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 232;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0) );
			State = 237;
			Match(CloseSet);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenMLComment() { return GetToken(rexParser.OpenMLComment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WsLit() { return GetToken(rexParser.WsLit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(rexParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseMLComment() { return GetToken(rexParser.CloseMLComment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExplicitLit() { return GetToken(rexParser.ExplicitLit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DefinitionLit() { return GetToken(rexParser.DefinitionLit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS_Space() { return GetTokens(rexParser.WS_Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS_Space(int i) {
			return GetToken(rexParser.WS_Space, i);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 44, RULE_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(OpenMLComment);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS_Space) {
				{
				{
				State = 240;
				Match(WS_Space);
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			name();
			State = 247;
			Match(WsLit);
			State = 248;
			Match(Colon);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS_Space) {
				{
				{
				State = 249;
				Match(WS_Space);
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 255;
			_la = TokenStream.LA(1);
			if ( !(_la==ExplicitLit || _la==DefinitionLit) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS_Space) {
				{
				{
				State = 256;
				Match(WS_Space);
				}
				}
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 262;
			Match(CloseMLComment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameOrStringContext[] nameOrString() {
			return GetRuleContexts<NameOrStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameOrStringContext nameOrString(int i) {
			return GetRuleContext<NameOrStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GtGt() { return GetToken(rexParser.GtGt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LtLt() { return GetToken(rexParser.LtLt, 0); }
		public PreferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterPreference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitPreference(this);
		}
	}

	[RuleVersion(0)]
	public PreferenceContext preference() {
		PreferenceContext _localctx = new PreferenceContext(Context, State);
		EnterRule(_localctx, 46, RULE_preference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			nameOrString();
			State = 277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GtGt:
				{
				State = 265;
				Match(GtGt);
				State = 267;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 266;
						nameOrString();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 269;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case LtLt:
				{
				State = 271;
				Match(LtLt);
				State = 273;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 272;
						nameOrString();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 275;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelimiterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BsBs() { return GetToken(rexParser.BsBs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameOrStringContext[] nameOrString() {
			return GetRuleContexts<NameOrStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameOrStringContext nameOrString(int i) {
			return GetRuleContext<NameOrStringContext>(i);
		}
		public DelimiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delimiter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterDelimiter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitDelimiter(this);
		}
	}

	[RuleVersion(0)]
	public DelimiterContext delimiter() {
		DelimiterContext _localctx = new DelimiterContext(Context, State);
		EnterRule(_localctx, 48, RULE_delimiter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			name();
			State = 280;
			Match(BsBs);
			State = 282;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 281;
					nameOrString();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceCharRangeContext[] equivalenceCharRange() {
			return GetRuleContexts<EquivalenceCharRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceCharRangeContext equivalenceCharRange(int i) {
			return GetRuleContext<EquivalenceCharRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqEq() { return GetToken(rexParser.EqEq, 0); }
		public EquivalenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterEquivalence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitEquivalence(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceContext equivalence() {
		EquivalenceContext _localctx = new EquivalenceContext(Context, State);
		EnterRule(_localctx, 50, RULE_equivalence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			equivalenceCharRange();
			State = 287;
			Match(EqEq);
			State = 288;
			equivalenceCharRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceCharRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(rexParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenSet() { return GetToken(rexParser.OpenSet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseSet() { return GetToken(rexParser.CloseSet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SetChar() { return GetToken(rexParser.SetChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SetCharCode() { return GetToken(rexParser.SetCharCode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SetCharRange() { return GetToken(rexParser.SetCharRange, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SetCharCodeRange() { return GetToken(rexParser.SetCharCodeRange, 0); }
		public EquivalenceCharRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceCharRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterEquivalenceCharRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitEquivalenceCharRange(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceCharRangeContext equivalenceCharRange() {
		EquivalenceCharRangeContext _localctx = new EquivalenceCharRangeContext(Context, State);
		EnterRule(_localctx, 52, RULE_equivalenceCharRange);
		int _la;
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290;
				Match(StringLiteral);
				}
				break;
			case OpenSet:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				Match(OpenSet);
				State = 292;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 293;
				Match(CloseSet);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Encore() { return GetToken(rexParser.Encore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcessingInstructionContext[] processingInstruction() {
			return GetRuleContexts<ProcessingInstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcessingInstructionContext processingInstruction(int i) {
			return GetRuleContext<ProcessingInstructionContext>(i);
		}
		public EncoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encore; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterEncore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitEncore(this);
		}
	}

	[RuleVersion(0)]
	public EncoreContext encore() {
		EncoreContext _localctx = new EncoreContext(Context, State);
		EnterRule(_localctx, 54, RULE_encore);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(Encore);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpenQu) {
				{
				{
				State = 297;
				processingInstruction();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(rexParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WsLit() { return GetToken(rexParser.WsLit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExplicitLit() { return GetToken(rexParser.ExplicitLit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DefinitionLit() { return GetToken(rexParser.DefinitionLit, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IrexParserListener typedListener = listener as IrexParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 56, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4026531840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,46,306,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,1,0,1,0,3,0,62,8,0,1,0,3,0,65,8,0,1,0,1,0,1,1,5,1,70,8,1,10,1,12,1,
		73,9,1,1,2,1,2,1,2,4,2,78,8,2,11,2,12,2,79,1,2,3,2,83,8,2,3,2,85,8,2,1,
		2,1,2,1,3,4,3,90,8,3,11,3,12,3,91,1,4,1,4,1,4,1,4,5,4,98,8,4,10,4,12,4,
		101,9,4,1,5,1,5,1,5,4,5,106,8,5,11,5,12,5,107,1,5,1,5,4,5,112,8,5,11,5,
		12,5,113,3,5,116,8,5,1,6,5,6,119,8,6,10,6,12,6,122,9,6,1,7,1,7,3,7,126,
		8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,134,8,8,1,9,1,9,1,9,1,9,1,9,5,9,141,8,
		9,10,9,12,9,144,9,9,1,10,1,10,3,10,148,8,10,1,10,3,10,151,8,10,1,10,1,
		10,1,10,5,10,156,8,10,10,10,12,10,159,9,10,1,11,1,11,1,11,5,11,164,8,11,
		10,11,12,11,167,9,11,1,12,1,12,1,12,5,12,172,8,12,10,12,12,12,175,9,12,
		1,13,1,13,1,13,3,13,180,8,13,1,14,1,14,1,14,1,14,1,14,5,14,187,8,14,10,
		14,12,14,190,9,14,3,14,192,8,14,3,14,194,8,14,1,15,1,15,3,15,198,8,15,
		1,16,1,16,3,16,202,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,212,
		8,16,1,17,1,17,3,17,216,8,17,1,17,1,17,3,17,220,8,17,3,17,222,8,17,1,18,
		1,18,1,19,1,19,3,19,228,8,19,1,20,1,20,1,21,1,21,4,21,234,8,21,11,21,12,
		21,235,1,21,1,21,1,22,1,22,5,22,242,8,22,10,22,12,22,245,9,22,1,22,1,22,
		1,22,1,22,5,22,251,8,22,10,22,12,22,254,9,22,1,22,1,22,5,22,258,8,22,10,
		22,12,22,261,9,22,1,22,1,22,1,23,1,23,1,23,4,23,268,8,23,11,23,12,23,269,
		1,23,1,23,4,23,274,8,23,11,23,12,23,275,3,23,278,8,23,1,24,1,24,1,24,4,
		24,283,8,24,11,24,12,24,284,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,3,
		26,295,8,26,1,27,1,27,5,27,299,8,27,10,27,12,27,302,9,27,1,28,1,28,1,28,
		0,0,29,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,0,5,1,0,6,8,1,0,18,19,1,0,42,45,1,0,29,30,1,0,28,31,
		326,0,58,1,0,0,0,2,71,1,0,0,0,4,74,1,0,0,0,6,89,1,0,0,0,8,93,1,0,0,0,10,
		102,1,0,0,0,12,120,1,0,0,0,14,123,1,0,0,0,16,133,1,0,0,0,18,135,1,0,0,
		0,20,147,1,0,0,0,22,160,1,0,0,0,24,168,1,0,0,0,26,176,1,0,0,0,28,193,1,
		0,0,0,30,195,1,0,0,0,32,211,1,0,0,0,34,221,1,0,0,0,36,223,1,0,0,0,38,227,
		1,0,0,0,40,229,1,0,0,0,42,231,1,0,0,0,44,239,1,0,0,0,46,264,1,0,0,0,48,
		279,1,0,0,0,50,286,1,0,0,0,52,294,1,0,0,0,54,296,1,0,0,0,56,303,1,0,0,
		0,58,59,3,2,1,0,59,61,3,6,3,0,60,62,3,18,9,0,61,60,1,0,0,0,61,62,1,0,0,
		0,62,64,1,0,0,0,63,65,3,54,27,0,64,63,1,0,0,0,64,65,1,0,0,0,65,66,1,0,
		0,0,66,67,5,0,0,1,67,1,1,0,0,0,68,70,3,4,2,0,69,68,1,0,0,0,70,73,1,0,0,
		0,71,69,1,0,0,0,71,72,1,0,0,0,72,3,1,0,0,0,73,71,1,0,0,0,74,75,5,1,0,0,
		75,84,3,56,28,0,76,78,5,40,0,0,77,76,1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,
		0,79,80,1,0,0,0,80,82,1,0,0,0,81,83,5,41,0,0,82,81,1,0,0,0,82,83,1,0,0,
		0,83,85,1,0,0,0,84,77,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,87,5,2,0,
		0,87,5,1,0,0,0,88,90,3,8,4,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,
		91,92,1,0,0,0,92,7,1,0,0,0,93,94,3,56,28,0,94,95,5,3,0,0,95,99,3,10,5,
		0,96,98,3,44,22,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,
		0,0,0,100,9,1,0,0,0,101,99,1,0,0,0,102,115,3,12,6,0,103,104,5,9,0,0,104,
		106,3,12,6,0,105,103,1,0,0,0,106,107,1,0,0,0,107,105,1,0,0,0,107,108,1,
		0,0,0,108,116,1,0,0,0,109,110,5,10,0,0,110,112,3,12,6,0,111,109,1,0,0,
		0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,116,1,0,0,0,115,
		105,1,0,0,0,115,111,1,0,0,0,115,116,1,0,0,0,116,11,1,0,0,0,117,119,3,14,
		7,0,118,117,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,
		13,1,0,0,0,122,120,1,0,0,0,123,125,3,16,8,0,124,126,7,0,0,0,125,124,1,
		0,0,0,125,126,1,0,0,0,126,15,1,0,0,0,127,134,3,34,17,0,128,129,5,11,0,
		0,129,130,3,10,5,0,130,131,5,12,0,0,131,134,1,0,0,0,132,134,3,4,2,0,133,
		127,1,0,0,0,133,128,1,0,0,0,133,132,1,0,0,0,134,17,1,0,0,0,135,142,5,13,
		0,0,136,141,3,20,10,0,137,141,3,46,23,0,138,141,3,48,24,0,139,141,3,50,
		25,0,140,136,1,0,0,0,140,137,1,0,0,0,140,138,1,0,0,0,140,139,1,0,0,0,141,
		144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,19,1,0,0,0,144,142,1,0,
		0,0,145,148,3,56,28,0,146,148,5,15,0,0,147,145,1,0,0,0,147,146,1,0,0,0,
		148,150,1,0,0,0,149,151,5,6,0,0,150,149,1,0,0,0,150,151,1,0,0,0,151,152,
		1,0,0,0,152,153,5,3,0,0,153,157,3,22,11,0,154,156,3,44,22,0,155,154,1,
		0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,21,1,0,0,0,159,
		157,1,0,0,0,160,165,3,26,13,0,161,162,5,9,0,0,162,164,3,26,13,0,163,161,
		1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,23,1,0,0,0,
		167,165,1,0,0,0,168,173,3,28,14,0,169,170,5,9,0,0,170,172,3,28,14,0,171,
		169,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,25,1,0,
		0,0,175,173,1,0,0,0,176,179,3,28,14,0,177,178,5,16,0,0,178,180,3,30,15,
		0,179,177,1,0,0,0,179,180,1,0,0,0,180,27,1,0,0,0,181,194,1,0,0,0,182,191,
		3,30,15,0,183,184,5,17,0,0,184,192,3,30,15,0,185,187,3,30,15,0,186,185,
		1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,192,1,0,0,
		0,190,188,1,0,0,0,191,183,1,0,0,0,191,188,1,0,0,0,192,194,1,0,0,0,193,
		181,1,0,0,0,193,182,1,0,0,0,194,29,1,0,0,0,195,197,3,32,16,0,196,198,7,
		0,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,31,1,0,0,0,199,202,3,56,28,0,
		200,202,5,15,0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,212,1,0,0,0,203,212,
		5,32,0,0,204,205,5,11,0,0,205,206,3,24,12,0,206,207,5,12,0,0,207,212,1,
		0,0,0,208,212,5,20,0,0,209,212,3,38,19,0,210,212,3,42,21,0,211,201,1,0,
		0,0,211,203,1,0,0,0,211,204,1,0,0,0,211,208,1,0,0,0,211,209,1,0,0,0,211,
		210,1,0,0,0,212,33,1,0,0,0,213,215,3,56,28,0,214,216,3,36,18,0,215,214,
		1,0,0,0,215,216,1,0,0,0,216,222,1,0,0,0,217,219,5,32,0,0,218,220,3,36,
		18,0,219,218,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,213,1,0,0,0,221,
		217,1,0,0,0,222,35,1,0,0,0,223,224,5,33,0,0,224,37,1,0,0,0,225,228,5,34,
		0,0,226,228,3,40,20,0,227,225,1,0,0,0,227,226,1,0,0,0,228,39,1,0,0,0,229,
		230,5,35,0,0,230,41,1,0,0,0,231,233,7,1,0,0,232,234,7,2,0,0,233,232,1,
		0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,
		237,238,5,46,0,0,238,43,1,0,0,0,239,243,5,21,0,0,240,242,5,40,0,0,241,
		240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,
		0,0,0,245,243,1,0,0,0,246,247,3,56,28,0,247,248,5,28,0,0,248,252,5,23,
		0,0,249,251,5,40,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,
		253,1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,259,7,3,0,0,256,258,5,
		40,0,0,257,256,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,
		260,262,1,0,0,0,261,259,1,0,0,0,262,263,5,22,0,0,263,45,1,0,0,0,264,277,
		3,34,17,0,265,267,5,24,0,0,266,268,3,34,17,0,267,266,1,0,0,0,268,269,1,
		0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,278,1,0,0,0,271,273,5,25,0,0,
		272,274,3,34,17,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,
		276,1,0,0,0,276,278,1,0,0,0,277,265,1,0,0,0,277,271,1,0,0,0,278,47,1,0,
		0,0,279,280,3,56,28,0,280,282,5,26,0,0,281,283,3,34,17,0,282,281,1,0,0,
		0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,49,1,0,0,0,286,287,
		3,52,26,0,287,288,5,27,0,0,288,289,3,52,26,0,289,51,1,0,0,0,290,295,5,
		32,0,0,291,292,5,18,0,0,292,293,7,2,0,0,293,295,5,46,0,0,294,290,1,0,0,
		0,294,291,1,0,0,0,295,53,1,0,0,0,296,300,5,14,0,0,297,299,3,4,2,0,298,
		297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,55,1,0,
		0,0,302,300,1,0,0,0,303,304,7,4,0,0,304,57,1,0,0,0,42,61,64,71,79,82,84,
		91,99,107,113,115,120,125,133,140,142,147,150,157,165,173,179,188,191,
		193,197,201,211,215,219,221,227,235,243,252,259,269,275,277,284,294,300
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
