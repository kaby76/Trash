//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from rexParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="rexParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IrexParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.grammar_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGrammar_([NotNull] rexParser.Grammar_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.grammar_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGrammar_([NotNull] rexParser.Grammar_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.prolog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProlog([NotNull] rexParser.PrologContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.prolog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProlog([NotNull] rexParser.PrologContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.processingInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcessingInstruction([NotNull] rexParser.ProcessingInstructionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.processingInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcessingInstruction([NotNull] rexParser.ProcessingInstructionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSyntaxDefinition([NotNull] rexParser.SyntaxDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSyntaxDefinition([NotNull] rexParser.SyntaxDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSyntaxProduction([NotNull] rexParser.SyntaxProductionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSyntaxProduction([NotNull] rexParser.SyntaxProductionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxChoice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSyntaxChoice([NotNull] rexParser.SyntaxChoiceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxChoice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSyntaxChoice([NotNull] rexParser.SyntaxChoiceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSyntaxSequence([NotNull] rexParser.SyntaxSequenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSyntaxSequence([NotNull] rexParser.SyntaxSequenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSyntaxItem([NotNull] rexParser.SyntaxItemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSyntaxItem([NotNull] rexParser.SyntaxItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.syntaxPrimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSyntaxPrimary([NotNull] rexParser.SyntaxPrimaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.syntaxPrimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSyntaxPrimary([NotNull] rexParser.SyntaxPrimaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLexicalDefinition([NotNull] rexParser.LexicalDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLexicalDefinition([NotNull] rexParser.LexicalDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLexicalProduction([NotNull] rexParser.LexicalProductionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLexicalProduction([NotNull] rexParser.LexicalProductionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.contextChoice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContextChoice([NotNull] rexParser.ContextChoiceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.contextChoice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContextChoice([NotNull] rexParser.ContextChoiceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalChoice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLexicalChoice([NotNull] rexParser.LexicalChoiceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalChoice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLexicalChoice([NotNull] rexParser.LexicalChoiceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.contextExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContextExpression([NotNull] rexParser.ContextExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.contextExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContextExpression([NotNull] rexParser.ContextExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLexicalSequence([NotNull] rexParser.LexicalSequenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLexicalSequence([NotNull] rexParser.LexicalSequenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLexicalItem([NotNull] rexParser.LexicalItemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLexicalItem([NotNull] rexParser.LexicalItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.lexicalPrimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLexicalPrimary([NotNull] rexParser.LexicalPrimaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.lexicalPrimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLexicalPrimary([NotNull] rexParser.LexicalPrimaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.nameOrString"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNameOrString([NotNull] rexParser.NameOrStringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.nameOrString"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNameOrString([NotNull] rexParser.NameOrStringContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.context"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContext([NotNull] rexParser.ContextContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.context"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContext([NotNull] rexParser.ContextContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.charCode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharCode([NotNull] rexParser.CharCodeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.charCode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharCode([NotNull] rexParser.CharCodeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.unicode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnicode([NotNull] rexParser.UnicodeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.unicode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnicode([NotNull] rexParser.UnicodeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.charClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharClass([NotNull] rexParser.CharClassContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.charClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharClass([NotNull] rexParser.CharClassContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOption([NotNull] rexParser.OptionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOption([NotNull] rexParser.OptionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.preference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreference([NotNull] rexParser.PreferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.preference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreference([NotNull] rexParser.PreferenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.delimiter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDelimiter([NotNull] rexParser.DelimiterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.delimiter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDelimiter([NotNull] rexParser.DelimiterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.equivalence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquivalence([NotNull] rexParser.EquivalenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.equivalence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquivalence([NotNull] rexParser.EquivalenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.equivalenceCharRange"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquivalenceCharRange([NotNull] rexParser.EquivalenceCharRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.equivalenceCharRange"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquivalenceCharRange([NotNull] rexParser.EquivalenceCharRangeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.encore"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEncore([NotNull] rexParser.EncoreContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.encore"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEncore([NotNull] rexParser.EncoreContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="rexParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterName([NotNull] rexParser.NameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="rexParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitName([NotNull] rexParser.NameContext context);
}
